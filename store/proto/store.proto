syntax = "proto3";
package store;
option go_package = "github.com/aau-network-security/haaukins-store/proto";

service Store {
    //Insert
    rpc AddEvent (AddEventRequest) returns (InsertResponse) {}
    rpc AddTeam (AddTeamRequest) returns (InsertResponse) {}
    rpc AddProfile (AddProfileRequest) returns (InsertResponse) {}

    //Select
    rpc GetEvents (GetEventRequest) returns (GetEventResponse) {}
    rpc GetEventByUser (GetEventByUserReq) returns (GetEventResponse) {}
    rpc GetEventTeams (GetEventTeamsRequest) returns (GetEventTeamsResponse) {}
    rpc GetEventStatus (GetEventStatusRequest) returns (EventStatusStore) {}
    rpc IsEventExists(GetEventByTagReq) returns (GetEventByTagResp) {}
    rpc GetTimeSeries(EmptyRequest) returns (GetTimeSeriesResponse) {}
    rpc DropEvent(DropEventReq) returns (DropEventResp){}
    rpc GetEventID(GetEventIDReq) returns (GetEventIDResp) {}
    rpc GetProfiles(EmptyRequest) returns (GetProfilesResp) {}

    rpc SetEventStatus (SetEventStatusRequest) returns (EventStatusStore) {}

    //Update
    rpc UpdateCloseEvent (UpdateEventRequest) returns (UpdateResponse) {}
    rpc UpdateTeamSolvedChallenge (UpdateTeamSolvedChallengeRequest) returns (UpdateResponse) {}
    rpc UpdateTeamLastAccess (UpdateTeamLastAccessRequest) returns (UpdateResponse) {}
    rpc UpdateTeamPassword (UpdateTeamPassRequest) returns (UpdateResponse) {}
    rpc UpdateExercises(UpdateExerciseRequest) returns (UpdateExerciseResponse){}
    rpc UpdateProfile(UpdateProfileRequest) returns (UpdateResponse) {}
    rpc UpdateEvent(UpdateEventPropReq) returns (UpdateEventResponse){}
    // Delete
    rpc DeleteTeam(DelTeamRequest) returns (DelTeamResp) {}
    rpc DeleteProfile(DelProfileRequest) returns (DelProfileResp) {}
}

message AddProfileRequest {
    message Challenge {
        string tag = 1;
        string name = 2;
    }
    string name = 1;
    bool secret = 2;
    repeated Challenge challenges = 3;
}

message UpdateEventPropReq {
    string eventTag = 1;
    string finishTime = 2;
    int32 capacity = 3;
}

message UpdateEventResponse {
    string message = 1;
}

message UpdateProfileRequest {
    message Challenge {
        string tag = 1;
        string name = 2;
    }
    string name = 1;
    bool secret = 2;
    repeated Challenge challenges = 3;
}

message DelProfileRequest {
    string name = 1;
}

message DelProfileResp {
    string message = 1;
    string errorMessage = 2;
}

message GetProfilesResp {
    message Profile {
        message Challenge {
            string tag = 1;
            string name = 2;
        }
        string name = 1;
        bool secret = 2;
        repeated Challenge challenges = 3;
    }
    repeated Profile profiles = 1;
    string errorMessage = 2;
}

message UpdateExerciseRequest {
    string eventTag = 1;
    string challenges = 2;  // challenges should be exactly in this format :  [ ,ftp,microcms,scan    ]
}

message UpdateExerciseResponse {
    string message = 1;
}

message EmptyRequest {}


message DelTeamRequest {
    string evTag = 1;
    string teamId = 2;
}

message DelTeamResp {
    string message = 1;
}

message UpdateTeamPassRequest {
    string encryptedPass = 1;
    string teamID = 2;
    int32 eventID  = 3;
}

message GetEventIDReq {
    string eventTag = 1;
}

message GetEventIDResp {
    int32 eventID = 1;
}

message GetTimeSeriesResponse {
    map<string, int32> timeseries = 1;
}

message GetEventStatusRequest {
    string eventTag = 1;
}

message GetEventByTagReq {
    string eventTag = 1;
    int32 status = 2;
}
message GetEventByTagResp {
    bool isExist = 1;
}

message DropEventReq {
    string tag = 1;
    int32 status =2;
}

message DropEventResp {
    bool isDropped = 1;
}



message GetEventRequest {
    // this will indicate that whether all events requested or some by status
    // status 0  > Running Events (which set as Running)
    // status 1  > Suspended Events (which set as Suspended)
    // status 2  > Booked Events (which are booked by client)
    // status 3  > Closed Events (which are finished and closed )
    int32 status = 1;
}

message GetEventByUserReq {
    int32 status =1;
    string user = 2;
}


message SetEventStatusRequest {
    string eventTag = 1;
    int32 status = 2;
}

message EventStatusStore {
    int32 status = 1;
}

message AddEventRequest{
    string name = 1;
    string tag = 2;
    string frontends = 3;
    string exercises = 4;
    int32 available = 5;
    int32 capacity = 6;
    string startTime = 7;
    string expectedFinishTime = 8;
    string finishedAt = 9;
    int32 status = 10;
    string createdBy = 11;
    int32 onlyVPN = 12; // 0 NoVPN 1 VPN 2 Browser+VPN
    string secretKey = 13;
    string disabledExercises = 14;
}

message AddTeamRequest{
    string id = 1;
    string event_tag = 2;
    string email = 3;
    string name = 4;
    string password = 5;
}

message InsertResponse{
    string Message = 1;
    string errorMessage = 2;
}

message GetEventResponse{
    message Events {
        string name = 1;
        string tag = 2;
        string frontends = 3;
        string exercises = 4;
        int32 available = 5;
        int32 capacity = 6;
        string startedAt = 7;
        string expectedFinishTime = 8;
        string finishedAt = 9;
        int32 status = 10;
        string createdBy =11;
        int32 onlyVPN = 12;
        string secretKey = 13;
        string disabledExercises = 14;
    }
    repeated Events events = 1;
    string errorMessage = 2;
}

message GetEventTeamsRequest{
    string eventTag = 1;
}

message GetEventTeamsResponse{
    message Teams{
        string id = 1;
        string email = 2;
        string name = 3;
        string hashPassword = 4;
        string createdAt = 5;
        string lastAccess = 6;
        string solvedChallenges = 7;
    }
    repeated Teams teams = 1;
    string errorMessage = 2;
}

message UpdateEventRequest{
    string oldTag = 1;
    string newTag = 2;
    string finishedAt = 3;
}

message UpdateTeamSolvedChallengeRequest{
    string teamId = 1;
    string tag = 2;
    string completedAt = 3;
}

message UpdateTeamLastAccessRequest{
    string teamId = 1;
    string accessAt = 2;
}

message UpdateResponse{
    string Message = 1;
    string errorMessage = 2;
}