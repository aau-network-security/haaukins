syntax = "proto3";
package daemon;
option go_package = "github.com/aau-network-security/haaukins/daemon/proto";


import "google/protobuf/empty.proto";
import "google/api/annotations.proto";


service Daemon {
  rpc LoginUser (LoginUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
      post: "/admin/login"
      body: "*"
    };
  }

  rpc SignupUser (SignupUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
      post: "/admin/signup"
      body: "*"
    };
  }
  rpc InviteUser (InviteUserRequest) returns (InviteUserResponse) {
    option (google.api.http) = {
      post: "/admin/invite"
      body: "*"
    };
  }
  rpc ListUsers (Empty) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/admin/user/list"
    };
  }
  rpc ChangeUserPasswd (UpdatePasswdRequest) returns (UpdatePasswdResponse) {
    option (google.api.http) = {
      post: "/admin/user/update"
      body: "*"
    };
  }

  rpc DestroyUser (DestroyUserRequest) returns (DestroyUserResponse) {
    option (google.api.http) = {
      post: "/admin/user/delete"
      body: "*"
    };
  }
  rpc SetTeamSuspend (SetTeamSuspendRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/admin/team/suspend"
      body: "*"
    };
  }
  rpc UpdateTeamPassword(UpdateTeamPassRequest) returns (UpdateTeamPassResponse) {
    option (google.api.http) = {
      post: "/admin/team/update"
      body: "*"
    };
  }

  rpc GetAPICreds(Empty) returns (CredsResponse) {
    option (google.api.http) = {
      get: "/admin/get/api/creds"
    };
  }
  rpc CreateEvent (CreateEventRequest) returns (LabStatus) {
    option (google.api.http) = {
      post: "/admin/event/create"
      body: "*"
    };
  }
  rpc StopEvent (StopEventRequest) returns (EventStatus) {
    option (google.api.http) = {
      post: "/admin/event/stop"
      body: "*"
    };
  }
  rpc SuspendEvent(SuspendEventRequest) returns (EventStatus) {
    option (google.api.http) = {
      post: "/admin/event/suspend"
      body: "*"
    };
  }
  rpc ListEvents (ListEventsRequest) returns (ListEventsResponse) {
    option (google.api.http) = {
      get: "/admin/event/list/{status}"
    };
  }
  rpc ListEventTeams (ListEventTeamsRequest) returns (ListEventTeamsResponse) {
    option (google.api.http) = {
      get: "/admin/event/{tag}/list/teams"
    };
  }
  rpc RestartTeamLab (RestartTeamLabRequest) returns (EventStatus) {
    option (google.api.http) = {
      post: "/admin/lab/restart"
      body: "*"
    };
  }
  rpc SolveChallenge (SolveChallengeRequest) returns (SolveChallengeResponse) {
    option (google.api.http) = {
      post: "/admin/challenge/solve"
      body: "*"
    };
  }

  rpc AddChallenge(AddChallengeRequest) returns (stream AddChallengeResponse) {
    option (google.api.http) = {
      post: "/admin/challenge/add"
      body: "*"
    };
  }
  rpc AddNotification(AddNotificationRequest) returns (AddNotificationResponse) {
    option (google.api.http) = {
      post: "/admin/manage/notification"
      body: "*"
    };
  }

  rpc DeleteTeam(DeleteTeamRequest) returns (DeleteTeamResponse) {
    option (google.api.http) = {
      post: "/admin/team/delete"
      body: "*"
    };
  }

  rpc GetTeamChals(GetTeamInfoRequest) returns (TeamChalsInfo) {
    option (google.api.http) = {
      get: "/admin/team/{eventTag}/{teamId}/challenges"
    };
  }

  rpc StressEvent(TestEventLoadReq) returns (TestEventLoadResp) {
    option (google.api.http) = {
      post: "/admin/stress/event"
      body: "*"
    };
  }

  rpc ListExercises (Empty) returns (ListExercisesResponse) {
    option (google.api.http) = {
      get: "/admin/exercise/list"
    };
  }
  rpc ResetExercise (ResetExerciseRequest) returns (stream ResetTeamStatus) {
    option (google.api.http) = {
      post: "/admin/event/reset/exercise"
      body: "*"
    };
  }
  rpc GetExercisesByTags (GetExsByTagsReq) returns (GetExsByTagsResp) {
    option (google.api.http) = {
      post: "/admin/event/get/exercises"
      body: "*"
    };
  }
  rpc ListFrontends (Empty) returns (ListFrontendsResponse) {
    option (google.api.http) = {
      get: "/admin/frontends/list"
    };
  }
  rpc ResetFrontends (ResetFrontendsRequest) returns (stream ResetTeamStatus) {
    option (google.api.http) = {
      post: "/admin/frontend/reset"
      body: "*"
    };
  }
  rpc SetFrontendMemory (SetFrontendMemoryRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/admin/frontend/set/memory"
      body: "*"
    };
  }
  rpc SetFrontendCpu (SetFrontendCpuRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/admin/frontend/set/cpu"
      body: "*"
    };
  }
  rpc GetTeamInfo (GetTeamInfoRequest) returns (GetTeamInfoResponse) {
    option (google.api.http) = {
      get: "/admin/team/{eventTag}/{teamId}/info"
    };
  }
  rpc MonitorHost (Empty) returns (stream MonitorHostResponse) {
    option (google.api.http) = {
      get: "/admin/host/monitor"
    };
  }
  rpc Version (Empty) returns (VersionResponse) {
    option (google.api.http) = {
      get: "/version"
    };
  }
  rpc ListCategories (Empty) returns (ListCategoriesResponse) {
    option (google.api.http) = {
      get: "/admin/categories/list"
    };
  }
  rpc SaveProfile (SaveProfileRequest) returns ( ProfileStatus) {
    option (google.api.http) = {
      post: "/admin/event/save/profile"
      body: "*"
    };
  }
  rpc DeleteProfile (DeleteProfileRequest) returns ( ProfileStatus) {
    option (google.api.http) = {
      post: "/admin/event/delete/profile"
      body: "*"
    };
  }
  rpc EditProfile (SaveProfileRequest) returns ( ProfileStatus) {
    option (google.api.http) = {
      post: "/admin/event/edit/profile"
      body: "*"
    };
  }
  rpc ListProfiles (Empty) returns (ListProfilesResponse) {
    option (google.api.http) = {
      get: "/admin/profiles/list"
    };
  }
}


message AddNotificationRequest {
  string message = 1;
  bool loggedUsers = 2;
}

message AddNotificationResponse {
  string response = 1;
}

message AddChallengeRequest {
  string eventTag = 1;
  repeated string challengeTag = 2;
}


message AddChallengeResponse {
  string message = 1;
}

message GetExsByTagsReq {
  repeated string tags = 1;
}

message GetExsByTagsResp {
  message ExInfo {
    string name = 1;
    string tag =  2;
  }
  repeated ExInfo exercises = 1;
}

message DeleteTeamRequest {
  string evTag = 1;
  string teamId = 2;
}

message DeleteTeamResponse {
  string message = 1;
}


message UpdateTeamPassRequest {
  string eventTag = 1;
  string teamID = 2;
  string password = 3;
  string passwordRepeat = 4;
}

message UpdateTeamPassResponse {
  string status = 1;
}


message SolveChallengeRequest {
  string eventTag = 1;
  string teamID = 2;
  string challengeTag = 3;
}

message SolveChallengeResponse {
  string status =1 ;
}

message Flag {
  string challengeName = 1;
  string challengeTag = 2;
  string challengeFlag = 3;
}

message TeamChalsInfo {
  repeated Flag flags =  1;
}

message CredsResponse {
  string username = 1;
  string password = 2;
}

message Team {
  string Id = 1;
}

message SuspendEventRequest {
  string eventTag = 1;
  bool suspend = 2;
}

message SetTeamSuspendRequest {
  string teamId = 1;
  string eventTag = 2;
  bool   suspend = 3;
}

message DestroyUserRequest {
  string username = 1;
}

message DestroyUserResponse {
  string message = 1;
}

message UpdatePasswdRequest{
  string username = 1;
  string password = 2;
}

message UpdatePasswdResponse {
  string message = 1;
}

message LoginUserRequest {
  string username = 1;
  string password = 2;
}

message LoginUserResponse {
  string token = 1;
  string error = 2;
}

message SignupUserRequest {
  string key = 1;
  string username = 2;
  string name = 3;
  string surname = 4;
  string email = 5;
  string password = 6;
}

message InviteUserRequest {
  bool super_user = 1;
  bool np_user =2;
}

message InviteUserResponse {
  string key = 1;
  string error = 2;
}

message ListUsersResponse {
  message UserInfo {
    string username = 1;
    string name = 2;
    string surname = 3;
    string email = 4;
    string createdAt = 5;
    bool isSuperUser = 6;
    bool isNPUser = 7;
  }
  repeated UserInfo users = 1;
  string error = 2;
}

message CreateEventRequest {
  string name = 1;
  string tag = 2;
  repeated string frontends = 3;
  repeated string exercises = 4;
  int32 available = 5;
  int32 capacity = 6;
  string  startTime = 7;
  string finishTime = 8;
  int32 onlyVPN = 9;
  string secretEvent = 10;
  repeated string disableExercises = 11;
}


message TestEventLoadReq {
  string eventName = 1;
  int32 numberOfTeams = 2;
}

message TestEventLoadResp {
  string signUpResult = 1;
}

message ListEventsRequest {
  int32 status = 1;
}

message ListEventsResponse {
  message Events {
    string tag = 1;
    string name = 2;
    int32 teamCount = 3;
    string exercises = 4;
    int32 availability = 5;
    int32 capacity = 6;
    string creationTime = 7;
    string finishTime = 8;
    int32 status = 9;
    string createdBy = 10;
    string secretEvent = 11;
  }

  repeated Events events = 1;
}

message ListEventTeamsRequest {
  string tag = 1;
}
message ListEventTeamsResponse {
  message Teams {
    string Id = 1;
    string Name = 2;
    string Email = 3;
    string AccessedAt = 4;
  }
  repeated Teams teams = 1;
}

message RestartTeamLabRequest {
  string eventTag = 1;
  string teamId = 2;
}

message ResetExerciseRequest {
  string exerciseTag = 1;
  string eventTag = 2;
  repeated Team teams = 3;
}


message ListExercisesResponse {
  message Exercise {
    message ExerciseInfo{
      string tag = 1;
      string name = 2;
      int32 points = 3;
      string category = 4;
      string description = 5;
    }
    repeated string tags = 1;
    string name = 2;
    int32 dockerImageCount = 3;
    int32 vboxImageCount = 4;
    bool secret = 6;
    repeated ExerciseInfo exerciseinfo = 5;
    string orgdescription = 7;
  }
  repeated Exercise exercises = 1;
}

message ListProfilesResponse {
  message Profile {
    message Challenge {
      string tag = 1;
      string name = 2;
    }
    string name = 1;
    bool secret = 2;
    repeated Challenge challenges = 3;
  }
  repeated Profile profiles = 1;
}

message SaveProfileRequest {
  message Challenge {
    string tag = 1;
    string name = 2;
  }
  string name = 1;
  bool secret = 2;
  repeated Challenge challenges = 3;
}

message DeleteProfileRequest {
  string name = 1;
}

message ProfileStatus {
  string profile = 1;
  string status = 2;
}

message ListCategoriesResponse {
  message Category {
    string tag = 1;
    string name = 2;
    string catDescription = 3;
  }
  repeated Category categories = 1;
}

message ResetTeamStatus {
  string teamId = 1;
  string status = 2;
}

message StopEventRequest {
  string tag = 1;
}

message EventStatus {
  string  entity = 1;
  string status = 2;
}

message LabStatus {
  string Message = 1;
  string errorMessage = 2;
}

message MonitorHostResponse {
  float MemoryPercent = 1;
  string MemoryReadError = 2;
  float CPUPercent = 3;
  string CPUReadError = 4;
}

message Empty {}

message VersionResponse {
  string version = 1;
}

message ListFrontendsResponse {
  message Frontend {
    string image = 1;
    int64 size = 2;
    int64 memoryMB = 3;
    float cpu = 4;
  }
  repeated Frontend frontends = 1;
}


message ResetFrontendsRequest {
  string eventTag = 2;
  repeated Team teams = 3;
}

message SetFrontendMemoryRequest {
  string image = 1;
  int64 memoryMB =2 ;
}

message SetFrontendCpuRequest{
  string image = 1;
  float cpu = 2;
}

message GetTeamInfoRequest {
  string teamId = 1;
  string eventTag = 2;
}

message GetTeamInfoResponse {
  message Instance {
    string image = 1;
    string type = 2;
    string id = 3;
    int32 state = 4;
  }
  repeated Instance instances = 1;
}
