{"version":3,"file":"bundle.min.js","sources":["../lib/utils/index.js","../lib/parse.js","../lib/ast.js","../lib/transform.js","../lib/utils/first_in_statement.js","../lib/output.js","../lib/scope.js","../lib/compress/index.js","../tools/domprops.js","../lib/propmangle.js","../lib/minify.js","../lib/sourcemap.js","../tools/node.js","../lib/mozilla-ast.js"],"sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction characters(str) {\n    return str.split(\"\");\n}\n\nfunction member(name, array) {\n    return array.includes(name);\n}\n\nclass DefaultsError extends Error {\n    constructor(msg, defs) {\n        super();\n\n        this.name = \"DefaultsError\";\n        this.message = msg;\n        this.defs = defs;\n    }\n}\n\nfunction defaults(args, defs, croak) {\n    if (args === true)\n        args = {};\n    var ret = args || {};\n    if (croak) for (var i in ret) if (HOP(ret, i) && !HOP(defs, i))\n        throw new DefaultsError(\"`\" + i + \"` is not a supported option\", defs);\n    for (var i in defs) if (HOP(defs, i)) {\n        ret[i] = (args && HOP(args, i)) ? args[i] : defs[i];\n    }\n    return ret;\n}\n\nfunction noop() {}\nfunction return_false() { return false; }\nfunction return_true() { return true; }\nfunction return_this() { return this; }\nfunction return_null() { return null; }\n\nvar MAP = (function() {\n    function MAP(a, f, backwards) {\n        var ret = [], top = [], i;\n        function doit() {\n            var val = f(a[i], i);\n            var is_last = val instanceof Last;\n            if (is_last) val = val.v;\n            if (val instanceof AtTop) {\n                val = val.v;\n                if (val instanceof Splice) {\n                    top.push.apply(top, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    top.push(val);\n                }\n            } else if (val !== skip) {\n                if (val instanceof Splice) {\n                    ret.push.apply(ret, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    ret.push(val);\n                }\n            }\n            return is_last;\n        }\n        if (Array.isArray(a)) {\n            if (backwards) {\n                for (i = a.length; --i >= 0;) if (doit()) break;\n                ret.reverse();\n                top.reverse();\n            } else {\n                for (i = 0; i < a.length; ++i) if (doit()) break;\n            }\n        } else {\n            for (i in a) if (HOP(a, i)) if (doit()) break;\n        }\n        return top.concat(ret);\n    }\n    MAP.at_top = function(val) { return new AtTop(val); };\n    MAP.splice = function(val) { return new Splice(val); };\n    MAP.last = function(val) { return new Last(val); };\n    var skip = MAP.skip = {};\n    function AtTop(val) { this.v = val; }\n    function Splice(val) { this.v = val; }\n    function Last(val) { this.v = val; }\n    return MAP;\n})();\n\nfunction push_uniq(array, el) {\n    if (!array.includes(el))\n        array.push(el);\n}\n\nfunction string_template(text, props) {\n    return text.replace(/{(.+?)}/g, function(str, p) {\n        return props && props[p];\n    });\n}\n\nfunction remove(array, el) {\n    for (var i = array.length; --i >= 0;) {\n        if (array[i] === el) array.splice(i, 1);\n    }\n}\n\nfunction mergeSort(array, cmp) {\n    if (array.length < 2) return array.slice();\n    function merge(a, b) {\n        var r = [], ai = 0, bi = 0, i = 0;\n        while (ai < a.length && bi < b.length) {\n            cmp(a[ai], b[bi]) <= 0\n                ? r[i++] = a[ai++]\n                : r[i++] = b[bi++];\n        }\n        if (ai < a.length) r.push.apply(r, a.slice(ai));\n        if (bi < b.length) r.push.apply(r, b.slice(bi));\n        return r;\n    }\n    function _ms(a) {\n        if (a.length <= 1)\n            return a;\n        var m = Math.floor(a.length / 2), left = a.slice(0, m), right = a.slice(m);\n        left = _ms(left);\n        right = _ms(right);\n        return merge(left, right);\n    }\n    return _ms(array);\n}\n\nfunction makePredicate(words) {\n    if (!Array.isArray(words)) words = words.split(\" \");\n\n    return new Set(words);\n}\n\nfunction map_add(map, key, value) {\n    if (map.has(key)) {\n        map.get(key).push(value);\n    } else {\n        map.set(key, [ value ]);\n    }\n}\n\nfunction map_from_object(obj) {\n    var map = new Map();\n    for (var key in obj) {\n        if (HOP(obj, key) && key.charAt(0) === \"$\") {\n            map.set(key.substr(1), obj[key]);\n        }\n    }\n    return map;\n}\n\nfunction map_to_object(map) {\n    var obj = Object.create(null);\n    map.forEach(function (value, key) {\n        obj[\"$\" + key] = value;\n    });\n    return obj;\n}\n\nfunction HOP(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction keep_name(keep_setting, name) {\n    return keep_setting === true\n        || (keep_setting instanceof RegExp && keep_setting.test(name));\n}\n\nvar lineTerminatorEscape = {\n    \"\\n\": \"n\",\n    \"\\r\": \"r\",\n    \"\\u2028\": \"u2028\",\n    \"\\u2029\": \"u2029\",\n};\nfunction regexp_source_fix(source) {\n    // V8 does not escape line terminators in regexp patterns in node 12\n    return source.replace(/[\\n\\r\\u2028\\u2029]/g, function (match, offset) {\n        var escaped = source[offset - 1] == \"\\\\\"\n            && (source[offset - 2] != \"\\\\\"\n            || /(?:^|[^\\\\])(?:\\\\{2})*$/.test(source.slice(0, offset - 1)));\n        return (escaped ? \"\" : \"\\\\\") + lineTerminatorEscape[match];\n    });\n}\n\nexport {\n    characters,\n    defaults,\n    HOP,\n    keep_name,\n    makePredicate,\n    map_add,\n    map_from_object,\n    map_to_object,\n    MAP,\n    member,\n    mergeSort,\n    noop,\n    push_uniq,\n    regexp_source_fix,\n    remove,\n    return_false,\n    return_null,\n    return_this,\n    return_true,\n    string_template,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    characters,\n    defaults,\n    HOP,\n    makePredicate,\n} from \"./utils/index.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_IterationStatement,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\n\nvar KEYWORDS = \"break case catch class const continue debugger default delete do else export extends finally for function if in instanceof let new return switch throw try typeof var void while with\";\nvar KEYWORDS_ATOM = \"false null true\";\nvar RESERVED_WORDS = \"enum implements import interface package private protected public static super this \" + KEYWORDS_ATOM + \" \" + KEYWORDS;\nvar KEYWORDS_BEFORE_EXPRESSION = \"return new delete throw else case yield await\";\n\nKEYWORDS = makePredicate(KEYWORDS);\nRESERVED_WORDS = makePredicate(RESERVED_WORDS);\nKEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);\nKEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);\n\nvar OPERATOR_CHARS = makePredicate(characters(\"+-*&%=<>!?|~^\"));\n\nvar RE_NUM_LITERAL = /[0-9a-f]/i;\nvar RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;\nvar RE_OCT_NUMBER = /^0[0-7]+$/;\nvar RE_ES6_OCT_NUMBER = /^0o[0-7]+$/i;\nvar RE_BIN_NUMBER = /^0b[01]+$/i;\nvar RE_DEC_NUMBER = /^\\d*\\.?\\d*(?:e[+-]?\\d*(?:\\d\\.?|\\.?\\d)\\d*)?$/i;\nvar RE_BIG_INT = /^(0[xob])?[0-9]+n$/i;\n\nvar OPERATORS = makePredicate([\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"new\",\n    \"void\",\n    \"delete\",\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"!\",\n    \"~\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"*\",\n    \"**\",\n    \"/\",\n    \"%\",\n    \">>\",\n    \"<<\",\n    \">>>\",\n    \"<\",\n    \">\",\n    \"<=\",\n    \">=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \"?\",\n    \"=\",\n    \"+=\",\n    \"-=\",\n    \"/=\",\n    \"*=\",\n    \"**=\",\n    \"%=\",\n    \">>=\",\n    \"<<=\",\n    \">>>=\",\n    \"|=\",\n    \"^=\",\n    \"&=\",\n    \"&&\",\n    \"||\"\n]);\n\nvar WHITESPACE_CHARS = makePredicate(characters(\" \\u00a0\\n\\r\\t\\f\\u000b\\u200b\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\uFEFF\"));\n\nvar NEWLINE_CHARS = makePredicate(characters(\"\\n\\r\\u2028\\u2029\"));\n\nvar PUNC_AFTER_EXPRESSION = makePredicate(characters(\";]),:\"));\n\nvar PUNC_BEFORE_EXPRESSION = makePredicate(characters(\"[{(,;:\"));\n\nvar PUNC_CHARS = makePredicate(characters(\"[]{}(),;:\"));\n\n/* -----[ Tokenizer ]----- */\n\n// surrogate safe regexps adapted from https://github.com/mathiasbynens/unicode-8.0.0/tree/89b412d8a71ecca9ed593d9e9fa073ab64acfebe/Binary_Property\nvar UNICODE = {\n    ID_Start: /[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n    ID_Continue: /[0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/,\n};\n\nfunction get_full_char(str, pos) {\n    var char = str.charAt(pos);\n    if (is_surrogate_pair_head(char)) {\n        var next = str.charAt(pos + 1);\n        if (is_surrogate_pair_tail(next)) {\n            return char + next;\n        }\n    }\n    if (is_surrogate_pair_tail(char)) {\n        var prev = str.charAt(pos - 1);\n        if (is_surrogate_pair_head(prev)) {\n            return prev + char;\n        }\n    }\n    return char;\n}\n\nfunction get_full_char_code(str, pos) {\n    // https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n    if (is_surrogate_pair_head(str.charAt(pos))) {\n        return 0x10000 + (str.charCodeAt(pos) - 0xd800 << 10) + str.charCodeAt(pos + 1) - 0xdc00;\n    }\n    return str.charCodeAt(pos);\n}\n\nfunction get_full_char_length(str) {\n    var surrogates = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        if (is_surrogate_pair_head(str.charCodeAt(i))) {\n            if (is_surrogate_pair_tail(str.charCodeAt(i + 1))) {\n                surrogates++;\n                i++;\n            }\n        }\n    }\n\n    return str.length - surrogates;\n}\n\nfunction from_char_code(code) {\n    // Based on https://github.com/mathiasbynens/String.fromCodePoint/blob/master/fromcodepoint.js\n    if (code > 0xFFFF) {\n        code -= 0x10000;\n        return (String.fromCharCode((code >> 10) + 0xD800) +\n            String.fromCharCode((code % 0x400) + 0xDC00));\n    }\n    return String.fromCharCode(code);\n}\n\nfunction is_surrogate_pair_head(code) {\n    if (typeof code === \"string\")\n        code = code.charCodeAt(0);\n\n    return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction is_surrogate_pair_tail(code) {\n    if (typeof code === \"string\")\n        code = code.charCodeAt(0);\n    return code >= 0xdc00 && code <= 0xdfff;\n}\n\nfunction is_digit(code) {\n    return code >= 48 && code <= 57;\n}\n\nfunction is_identifier_start(ch) {\n    var code = ch.charCodeAt(0);\n    return UNICODE.ID_Start.test(ch) || code == 36 || code == 95;\n}\n\nfunction is_identifier_char(ch) {\n    var code = ch.charCodeAt(0);\n    return UNICODE.ID_Continue.test(ch)\n        || code == 36\n        || code == 95\n        || code == 8204 // \\u200c: zero-width non-joiner <ZWNJ>\n        || code == 8205 // \\u200d: zero-width joiner <ZWJ> (in my ECMA-262 PDF, this is also 200c)\n    ;\n}\n\nfunction is_identifier_string(str) {\n    return /^[a-z_$][a-z0-9_$]*$/i.test(str);\n}\n\nfunction parse_js_number(num) {\n    if (RE_HEX_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 16);\n    } else if (RE_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(1), 8);\n    } else if (RE_ES6_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 8);\n    } else if (RE_BIN_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 2);\n    } else if (RE_DEC_NUMBER.test(num)) {\n        return parseFloat(num);\n    } else {\n        var val = parseFloat(num);\n        if (val == num) return val;\n    }\n}\n\nclass JS_Parse_Error extends Error {\n    constructor(message, filename, line, col, pos) {\n        super();\n\n        this.name = \"SyntaxError\";\n        this.message = message;\n        this.filename = filename;\n        this.line = line;\n        this.col = col;\n        this.pos = pos;\n    }\n}\n\nfunction js_error(message, filename, line, col, pos) {\n    throw new JS_Parse_Error(message, filename, line, col, pos);\n}\n\nfunction is_token(token, type, val) {\n    return token.type == type && (val == null || token.value == val);\n}\n\nvar EX_EOF = {};\n\nfunction tokenizer($TEXT, filename, html5_comments, shebang) {\n\n    var S = {\n        text            : $TEXT,\n        filename        : filename,\n        pos             : 0,\n        tokpos          : 0,\n        line            : 1,\n        tokline         : 0,\n        col             : 0,\n        tokcol          : 0,\n        newline_before  : false,\n        regex_allowed   : false,\n        brace_counter   : 0,\n        template_braces : [],\n        comments_before : [],\n        directives      : {},\n        directive_stack : []\n    };\n\n    function peek() { return get_full_char(S.text, S.pos); }\n\n    function next(signal_eof, in_string) {\n        var ch = get_full_char(S.text, S.pos++);\n        if (signal_eof && !ch)\n            throw EX_EOF;\n        if (NEWLINE_CHARS.has(ch)) {\n            S.newline_before = S.newline_before || !in_string;\n            ++S.line;\n            S.col = 0;\n            if (!in_string && ch == \"\\r\" && peek() == \"\\n\") {\n                // treat a \\r\\n sequence as a single \\n\n                ++S.pos;\n                ch = \"\\n\";\n            }\n        } else {\n            if (ch.length > 1) {\n                ++S.pos;\n                ++S.col;\n            }\n            ++S.col;\n        }\n        return ch;\n    }\n\n    function forward(i) {\n        while (i-- > 0) next();\n    }\n\n    function looking_at(str) {\n        return S.text.substr(S.pos, str.length) == str;\n    }\n\n    function find_eol() {\n        var text = S.text;\n        for (var i = S.pos, n = S.text.length; i < n; ++i) {\n            var ch = text[i];\n            if (NEWLINE_CHARS.has(ch))\n                return i;\n        }\n        return -1;\n    }\n\n    function find(what, signal_eof) {\n        var pos = S.text.indexOf(what, S.pos);\n        if (signal_eof && pos == -1) throw EX_EOF;\n        return pos;\n    }\n\n    function start_token() {\n        S.tokline = S.line;\n        S.tokcol = S.col;\n        S.tokpos = S.pos;\n    }\n\n    var prev_was_dot = false;\n    var previous_token = null;\n    function token(type, value, is_comment) {\n        S.regex_allowed = ((type == \"operator\" && !UNARY_POSTFIX.has(value)) ||\n                           (type == \"keyword\" && KEYWORDS_BEFORE_EXPRESSION.has(value)) ||\n                           (type == \"punc\" && PUNC_BEFORE_EXPRESSION.has(value))) ||\n                           (type == \"arrow\");\n        if (type == \"punc\" && value == \".\") {\n            prev_was_dot = true;\n        } else if (!is_comment) {\n            prev_was_dot = false;\n        }\n        var ret = {\n            type    : type,\n            value   : value,\n            line    : S.tokline,\n            col     : S.tokcol,\n            pos     : S.tokpos,\n            endline : S.line,\n            endcol  : S.col,\n            endpos  : S.pos,\n            nlb     : S.newline_before,\n            file    : filename\n        };\n        if (/^(?:num|string|regexp)$/i.test(type)) {\n            ret.raw = $TEXT.substring(ret.pos, ret.endpos);\n        }\n        if (!is_comment) {\n            ret.comments_before = S.comments_before;\n            ret.comments_after = S.comments_before = [];\n        }\n        S.newline_before = false;\n        ret = new AST_Token(ret);\n        if (!is_comment) previous_token = ret;\n        return ret;\n    }\n\n    function skip_whitespace() {\n        while (WHITESPACE_CHARS.has(peek()))\n            next();\n    }\n\n    function read_while(pred) {\n        var ret = \"\", ch, i = 0;\n        while ((ch = peek()) && pred(ch, i++))\n            ret += next();\n        return ret;\n    }\n\n    function parse_error(err) {\n        js_error(err, filename, S.tokline, S.tokcol, S.tokpos);\n    }\n\n    function read_num(prefix) {\n        var has_e = false, after_e = false, has_x = false, has_dot = prefix == \".\", is_big_int = false;\n        var num = read_while(function(ch, i) {\n            if (is_big_int) return false;\n\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 98: case 66: // bB\n                return (has_x = true); // Can occur in hex sequence, don't return false yet\n              case 111: case 79: // oO\n              case 120: case 88: // xX\n                return has_x ? false : (has_x = true);\n              case 101: case 69: // eE\n                return has_x ? true : has_e ? false : (has_e = after_e = true);\n              case 45: // -\n                return after_e || (i == 0 && !prefix);\n              case 43: // +\n                return after_e;\n              case (after_e = false, 46): // .\n                return (!has_dot && !has_x && !has_e) ? (has_dot = true) : false;\n            }\n\n            if (ch === \"n\") {\n                is_big_int = true;\n\n                return true;\n            }\n\n            return RE_NUM_LITERAL.test(ch);\n        });\n        if (prefix) num = prefix + num;\n        if (RE_OCT_NUMBER.test(num) && next_token.has_directive(\"use strict\")) {\n            parse_error(\"Legacy octal literals are not allowed in strict mode\");\n        }\n        if (num.endsWith(\"n\")) {\n            if (!has_dot && RE_BIG_INT.test(num))\n                return token(\"big_int\", num.replace(\"n\", \"\"));\n            parse_error(\"Invalid or unexpected token\");\n        }\n        var valid = parse_js_number(num);\n        if (!isNaN(valid)) {\n            return token(\"num\", valid);\n        } else {\n            parse_error(\"Invalid syntax: \" + num);\n        }\n    }\n\n    function read_escaped_char(in_string, strict_hex, template_string) {\n        var ch = next(true, in_string);\n        switch (ch.charCodeAt(0)) {\n          case 110 : return \"\\n\";\n          case 114 : return \"\\r\";\n          case 116 : return \"\\t\";\n          case 98  : return \"\\b\";\n          case 118 : return \"\\u000b\"; // \\v\n          case 102 : return \"\\f\";\n          case 120 : return String.fromCharCode(hex_bytes(2, strict_hex)); // \\x\n          case 117 : // \\u\n            if (peek() == \"{\") {\n                next(true);\n                if (peek() === \"}\")\n                    parse_error(\"Expecting hex-character between {}\");\n                while (peek() == \"0\") next(true); // No significance\n                var result, length = find(\"}\", true) - S.pos;\n                // Avoid 32 bit integer overflow (1 << 32 === 1)\n                // We know first character isn't 0 and thus out of range anyway\n                if (length > 6 || (result = hex_bytes(length, strict_hex)) > 0x10FFFF) {\n                    parse_error(\"Unicode reference out of bounds\");\n                }\n                next(true);\n                return from_char_code(result);\n            }\n            return String.fromCharCode(hex_bytes(4, strict_hex));\n          case 10  : return \"\"; // newline\n          case 13  :            // \\r\n            if (peek() == \"\\n\") { // DOS newline\n                next(true, in_string);\n                return \"\";\n            }\n        }\n        if (ch >= \"0\" && ch <= \"7\") {\n            if (template_string && strict_hex) {\n                parse_error(\"Octal escape sequences are not allowed in template strings\");\n            }\n            return read_octal_escape_sequence(ch, strict_hex);\n        }\n        return ch;\n    }\n\n    function read_octal_escape_sequence(ch, strict_octal) {\n        // Read\n        var p = peek();\n        if (p >= \"0\" && p <= \"7\") {\n            ch += next(true);\n            if (ch[0] <= \"3\" && (p = peek()) >= \"0\" && p <= \"7\")\n                ch += next(true);\n        }\n\n        // Parse\n        if (ch === \"0\") return \"\\0\";\n        if (ch.length > 0 && next_token.has_directive(\"use strict\") && strict_octal)\n            parse_error(\"Legacy octal escape sequences are not allowed in strict mode\");\n        return String.fromCharCode(parseInt(ch, 8));\n    }\n\n    function hex_bytes(n, strict_hex) {\n        var num = 0;\n        for (; n > 0; --n) {\n            if (!strict_hex && isNaN(parseInt(peek(), 16))) {\n                return parseInt(num, 16) || \"\";\n            }\n            var digit = next(true);\n            if (isNaN(parseInt(digit, 16)))\n                parse_error(\"Invalid hex-character pattern in string\");\n            num += digit;\n        }\n        return parseInt(num, 16);\n    }\n\n    var read_string = with_eof_error(\"Unterminated string constant\", function() {\n        var quote = next(), ret = \"\";\n        for (;;) {\n            var ch = next(true, true);\n            if (ch == \"\\\\\") ch = read_escaped_char(true, true);\n            else if (ch == \"\\r\" || ch == \"\\n\") parse_error(\"Unterminated string constant\");\n            else if (ch == quote) break;\n            ret += ch;\n        }\n        var tok = token(\"string\", ret);\n        tok.quote = quote;\n        return tok;\n    });\n\n    var read_template_characters = with_eof_error(\"Unterminated template\", function(begin) {\n        if (begin) {\n            S.template_braces.push(S.brace_counter);\n        }\n        var content = \"\", raw = \"\", ch, tok;\n        next(true, true);\n        while ((ch = next(true, true)) != \"`\") {\n            if (ch == \"\\r\") {\n                if (peek() == \"\\n\") ++S.pos;\n                ch = \"\\n\";\n            } else if (ch == \"$\" && peek() == \"{\") {\n                next(true, true);\n                S.brace_counter++;\n                tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n                tok.begin = begin;\n                tok.raw = raw;\n                tok.end = false;\n                return tok;\n            }\n\n            raw += ch;\n            if (ch == \"\\\\\") {\n                var tmp = S.pos;\n                var prev_is_tag = previous_token && (previous_token.type === \"name\" || previous_token.type === \"punc\" && (previous_token.value === \")\" || previous_token.value === \"]\"));\n                ch = read_escaped_char(true, !prev_is_tag, true);\n                raw += S.text.substr(tmp, S.pos - tmp);\n            }\n\n            content += ch;\n        }\n        S.template_braces.pop();\n        tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n        tok.begin = begin;\n        tok.raw = raw;\n        tok.end = true;\n        return tok;\n    });\n\n    function skip_line_comment(type) {\n        var regex_allowed = S.regex_allowed;\n        var i = find_eol(), ret;\n        if (i == -1) {\n            ret = S.text.substr(S.pos);\n            S.pos = S.text.length;\n        } else {\n            ret = S.text.substring(S.pos, i);\n            S.pos = i;\n        }\n        S.col = S.tokcol + (S.pos - S.tokpos);\n        S.comments_before.push(token(type, ret, true));\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    }\n\n    var skip_multiline_comment = with_eof_error(\"Unterminated multiline comment\", function() {\n        var regex_allowed = S.regex_allowed;\n        var i = find(\"*/\", true);\n        var text = S.text.substring(S.pos, i).replace(/\\r\\n|\\r|\\u2028|\\u2029/g, \"\\n\");\n        // update stream position\n        forward(get_full_char_length(text) /* text length doesn't count \\r\\n as 2 char while S.pos - i does */ + 2);\n        S.comments_before.push(token(\"comment2\", text, true));\n        S.newline_before = S.newline_before || text.includes(\"\\n\");\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    });\n\n    var read_name = with_eof_error(\"Unterminated identifier name\", function() {\n        var name, ch, escaped = false;\n        var read_escaped_identifier_char = function() {\n            escaped = true;\n            next();\n            if (peek() !== \"u\") {\n                parse_error(\"Expecting UnicodeEscapeSequence -- uXXXX or u{XXXX}\");\n            }\n            return read_escaped_char(false, true);\n        };\n\n        // Read first character (ID_Start)\n        if ((name = peek()) === \"\\\\\") {\n            name = read_escaped_identifier_char();\n            if (!is_identifier_start(name)) {\n                parse_error(\"First identifier char is an invalid identifier char\");\n            }\n        } else if (is_identifier_start(name)) {\n            next();\n        } else {\n            return \"\";\n        }\n\n        // Read ID_Continue\n        while ((ch = peek()) != null) {\n            if ((ch = peek()) === \"\\\\\") {\n                ch = read_escaped_identifier_char();\n                if (!is_identifier_char(ch)) {\n                    parse_error(\"Invalid escaped identifier char\");\n                }\n            } else {\n                if (!is_identifier_char(ch)) {\n                    break;\n                }\n                next();\n            }\n            name += ch;\n        }\n        if (RESERVED_WORDS.has(name) && escaped) {\n            parse_error(\"Escaped characters are not allowed in keywords\");\n        }\n        return name;\n    });\n\n    var read_regexp = with_eof_error(\"Unterminated regular expression\", function(source) {\n        var prev_backslash = false, ch, in_class = false;\n        while ((ch = next(true))) if (NEWLINE_CHARS.has(ch)) {\n            parse_error(\"Unexpected line terminator\");\n        } else if (prev_backslash) {\n            source += \"\\\\\" + ch;\n            prev_backslash = false;\n        } else if (ch == \"[\") {\n            in_class = true;\n            source += ch;\n        } else if (ch == \"]\" && in_class) {\n            in_class = false;\n            source += ch;\n        } else if (ch == \"/\" && !in_class) {\n            break;\n        } else if (ch == \"\\\\\") {\n            prev_backslash = true;\n        } else {\n            source += ch;\n        }\n        var mods = read_name();\n        try {\n            var regexp = new RegExp(source, mods);\n            regexp.raw_source = \"/\" + source + \"/\" + mods;\n            return token(\"regexp\", regexp);\n        } catch(e) {\n            parse_error(e.message);\n        }\n    });\n\n    function read_operator(prefix) {\n        function grow(op) {\n            if (!peek()) return op;\n            var bigger = op + peek();\n            if (OPERATORS.has(bigger)) {\n                next();\n                return grow(bigger);\n            } else {\n                return op;\n            }\n        }\n        return token(\"operator\", grow(prefix || next()));\n    }\n\n    function handle_slash() {\n        next();\n        switch (peek()) {\n          case \"/\":\n            next();\n            return skip_line_comment(\"comment1\");\n          case \"*\":\n            next();\n            return skip_multiline_comment();\n        }\n        return S.regex_allowed ? read_regexp(\"\") : read_operator(\"/\");\n    }\n\n    function handle_eq_sign() {\n        next();\n        if (peek() === \">\") {\n            next();\n            return token(\"arrow\", \"=>\");\n        } else {\n            return read_operator(\"=\");\n        }\n    }\n\n    function handle_dot() {\n        next();\n        if (is_digit(peek().charCodeAt(0))) {\n            return read_num(\".\");\n        }\n        if (peek() === \".\") {\n            next();  // Consume second dot\n            next();  // Consume third dot\n            return token(\"expand\", \"...\");\n        }\n\n        return token(\"punc\", \".\");\n    }\n\n    function read_word() {\n        var word = read_name();\n        if (prev_was_dot) return token(\"name\", word);\n        return KEYWORDS_ATOM.has(word) ? token(\"atom\", word)\n            : !KEYWORDS.has(word) ? token(\"name\", word)\n            : OPERATORS.has(word) ? token(\"operator\", word)\n            : token(\"keyword\", word);\n    }\n\n    function with_eof_error(eof_error, cont) {\n        return function(x) {\n            try {\n                return cont(x);\n            } catch(ex) {\n                if (ex === EX_EOF) parse_error(eof_error);\n                else throw ex;\n            }\n        };\n    }\n\n    function next_token(force_regexp) {\n        if (force_regexp != null)\n            return read_regexp(force_regexp);\n        if (shebang && S.pos == 0 && looking_at(\"#!\")) {\n            start_token();\n            forward(2);\n            skip_line_comment(\"comment5\");\n        }\n        for (;;) {\n            skip_whitespace();\n            start_token();\n            if (html5_comments) {\n                if (looking_at(\"<!--\")) {\n                    forward(4);\n                    skip_line_comment(\"comment3\");\n                    continue;\n                }\n                if (looking_at(\"-->\") && S.newline_before) {\n                    forward(3);\n                    skip_line_comment(\"comment4\");\n                    continue;\n                }\n            }\n            var ch = peek();\n            if (!ch) return token(\"eof\");\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 34: case 39: return read_string();\n              case 46: return handle_dot();\n              case 47: {\n                  var tok = handle_slash();\n                  if (tok === next_token) continue;\n                  return tok;\n              }\n              case 61: return handle_eq_sign();\n              case 96: return read_template_characters(true);\n              case 123:\n                S.brace_counter++;\n                break;\n              case 125:\n                S.brace_counter--;\n                if (S.template_braces.length > 0\n                    && S.template_braces[S.template_braces.length - 1] === S.brace_counter)\n                    return read_template_characters(false);\n                break;\n            }\n            if (is_digit(code)) return read_num();\n            if (PUNC_CHARS.has(ch)) return token(\"punc\", next());\n            if (OPERATOR_CHARS.has(ch)) return read_operator();\n            if (code == 92 || is_identifier_start(ch)) return read_word();\n            break;\n        }\n        parse_error(\"Unexpected character '\" + ch + \"'\");\n    }\n\n    next_token.next = next;\n    next_token.peek = peek;\n\n    next_token.context = function(nc) {\n        if (nc) S = nc;\n        return S;\n    };\n\n    next_token.add_directive = function(directive) {\n        S.directive_stack[S.directive_stack.length - 1].push(directive);\n\n        if (S.directives[directive] === undefined) {\n            S.directives[directive] = 1;\n        } else {\n            S.directives[directive]++;\n        }\n    };\n\n    next_token.push_directives_stack = function() {\n        S.directive_stack.push([]);\n    };\n\n    next_token.pop_directives_stack = function() {\n        var directives = S.directive_stack[S.directive_stack.length - 1];\n\n        for (var i = 0; i < directives.length; i++) {\n            S.directives[directives[i]]--;\n        }\n\n        S.directive_stack.pop();\n    };\n\n    next_token.has_directive = function(directive) {\n        return S.directives[directive] > 0;\n    };\n\n    return next_token;\n\n}\n\n/* -----[ Parser (constants) ]----- */\n\nvar UNARY_PREFIX = makePredicate([\n    \"typeof\",\n    \"void\",\n    \"delete\",\n    \"--\",\n    \"++\",\n    \"!\",\n    \"~\",\n    \"-\",\n    \"+\"\n]);\n\nvar UNARY_POSTFIX = makePredicate([ \"--\", \"++\" ]);\n\nvar ASSIGNMENT = makePredicate([ \"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"**=\", \"%=\", \">>=\", \"<<=\", \">>>=\", \"|=\", \"^=\", \"&=\" ]);\n\nvar PRECEDENCE = (function(a, ret) {\n    for (var i = 0; i < a.length; ++i) {\n        var b = a[i];\n        for (var j = 0; j < b.length; ++j) {\n            ret[b[j]] = i + 1;\n        }\n    }\n    return ret;\n})(\n    [\n        [\"||\"],\n        [\"&&\"],\n        [\"|\"],\n        [\"^\"],\n        [\"&\"],\n        [\"==\", \"===\", \"!=\", \"!==\"],\n        [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],\n        [\">>\", \"<<\", \">>>\"],\n        [\"+\", \"-\"],\n        [\"*\", \"/\", \"%\"],\n        [\"**\"]\n    ],\n    {}\n);\n\nvar ATOMIC_START_TOKEN = makePredicate([ \"atom\", \"num\", \"big_int\", \"string\", \"regexp\", \"name\" ]);\n\n/* -----[ Parser ]----- */\n\nfunction parse($TEXT, options) {\n\n    options = defaults(options, {\n        bare_returns   : false,\n        ecma           : 8,\n        expression     : false,\n        filename       : null,\n        html5_comments : true,\n        module         : false,\n        shebang        : true,\n        strict         : false,\n        toplevel       : null,\n    }, true);\n\n    var S = {\n        input         : (typeof $TEXT == \"string\"\n                         ? tokenizer($TEXT, options.filename,\n                                     options.html5_comments, options.shebang)\n                         : $TEXT),\n        token         : null,\n        prev          : null,\n        peeked        : null,\n        in_function   : 0,\n        in_async      : -1,\n        in_generator  : -1,\n        in_directives : true,\n        in_loop       : 0,\n        labels        : []\n    };\n\n    S.token = next();\n\n    function is(type, value) {\n        return is_token(S.token, type, value);\n    }\n\n    function peek() { return S.peeked || (S.peeked = S.input()); }\n\n    function next() {\n        S.prev = S.token;\n\n        if (!S.peeked) peek();\n        S.token = S.peeked;\n        S.peeked = null;\n        S.in_directives = S.in_directives && (\n            S.token.type == \"string\" || is(\"punc\", \";\")\n        );\n        return S.token;\n    }\n\n    function prev() {\n        return S.prev;\n    }\n\n    function croak(msg, line, col, pos) {\n        var ctx = S.input.context();\n        js_error(msg,\n                 ctx.filename,\n                 line != null ? line : ctx.tokline,\n                 col != null ? col : ctx.tokcol,\n                 pos != null ? pos : ctx.tokpos);\n    }\n\n    function token_error(token, msg) {\n        croak(msg, token.line, token.col);\n    }\n\n    function unexpected(token) {\n        if (token == null)\n            token = S.token;\n        token_error(token, \"Unexpected token: \" + token.type + \" (\" + token.value + \")\");\n    }\n\n    function expect_token(type, val) {\n        if (is(type, val)) {\n            return next();\n        }\n        token_error(S.token, \"Unexpected token \" + S.token.type + \" «\" + S.token.value + \"»\" + \", expected \" + type + \" «\" + val + \"»\");\n    }\n\n    function expect(punc) { return expect_token(\"punc\", punc); }\n\n    function has_newline_before(token) {\n        return token.nlb || !token.comments_before.every((comment) => !comment.nlb);\n    }\n\n    function can_insert_semicolon() {\n        return !options.strict\n            && (is(\"eof\") || is(\"punc\", \"}\") || has_newline_before(S.token));\n    }\n\n    function is_in_generator() {\n        return S.in_generator === S.in_function;\n    }\n\n    function is_in_async() {\n        return S.in_async === S.in_function;\n    }\n\n    function semicolon(optional) {\n        if (is(\"punc\", \";\")) next();\n        else if (!optional && !can_insert_semicolon()) unexpected();\n    }\n\n    function parenthesised() {\n        expect(\"(\");\n        var exp = expression(true);\n        expect(\")\");\n        return exp;\n    }\n\n    function embed_tokens(parser) {\n        return function() {\n            var start = S.token;\n            var expr = parser.apply(null, arguments);\n            var end = prev();\n            expr.start = start;\n            expr.end = end;\n            return expr;\n        };\n    }\n\n    function handle_regexp() {\n        if (is(\"operator\", \"/\") || is(\"operator\", \"/=\")) {\n            S.peeked = null;\n            S.token = S.input(S.token.value.substr(1)); // force regexp\n        }\n    }\n\n    var statement = embed_tokens(function(is_export_default, is_for_body, is_if_body) {\n        handle_regexp();\n        switch (S.token.type) {\n          case \"string\":\n            if (S.in_directives) {\n                var token = peek();\n                if (!S.token.raw.includes(\"\\\\\")\n                    && (is_token(token, \"punc\", \";\")\n                        || is_token(token, \"punc\", \"}\")\n                        || has_newline_before(token)\n                        || is_token(token, \"eof\"))) {\n                    S.input.add_directive(S.token.value);\n                } else {\n                    S.in_directives = false;\n                }\n            }\n            var dir = S.in_directives, stat = simple_statement();\n            return dir && stat.body instanceof AST_String ? new AST_Directive(stat.body) : stat;\n          case \"template_head\":\n          case \"num\":\n          case \"big_int\":\n          case \"regexp\":\n          case \"operator\":\n          case \"atom\":\n            return simple_statement();\n\n          case \"name\":\n            if (S.token.value == \"async\" && is_token(peek(), \"keyword\", \"function\")) {\n                next();\n                next();\n                if (is_for_body) {\n                    croak(\"functions are not allowed as the body of a loop\");\n                }\n                return function_(AST_Defun, false, true, is_export_default);\n            }\n            if (S.token.value == \"import\" && !is_token(peek(), \"punc\", \"(\")) {\n                next();\n                var node = import_();\n                semicolon();\n                return node;\n            }\n            return is_token(peek(), \"punc\", \":\")\n                ? labeled_statement()\n                : simple_statement();\n\n          case \"punc\":\n            switch (S.token.value) {\n              case \"{\":\n                return new AST_BlockStatement({\n                    start : S.token,\n                    body  : block_(),\n                    end   : prev()\n                });\n              case \"[\":\n              case \"(\":\n                return simple_statement();\n              case \";\":\n                S.in_directives = false;\n                next();\n                return new AST_EmptyStatement();\n              default:\n                unexpected();\n            }\n\n          case \"keyword\":\n            switch (S.token.value) {\n              case \"break\":\n                next();\n                return break_cont(AST_Break);\n\n              case \"continue\":\n                next();\n                return break_cont(AST_Continue);\n\n              case \"debugger\":\n                next();\n                semicolon();\n                return new AST_Debugger();\n\n              case \"do\":\n                next();\n                var body = in_loop(statement);\n                expect_token(\"keyword\", \"while\");\n                var condition = parenthesised();\n                semicolon(true);\n                return new AST_Do({\n                    body      : body,\n                    condition : condition\n                });\n\n              case \"while\":\n                next();\n                return new AST_While({\n                    condition : parenthesised(),\n                    body      : in_loop(function() { return statement(false, true); })\n                });\n\n              case \"for\":\n                next();\n                return for_();\n\n              case \"class\":\n                next();\n                if (is_for_body) {\n                    croak(\"classes are not allowed as the body of a loop\");\n                }\n                if (is_if_body) {\n                    croak(\"classes are not allowed as the body of an if\");\n                }\n                return class_(AST_DefClass);\n\n              case \"function\":\n                next();\n                if (is_for_body) {\n                    croak(\"functions are not allowed as the body of a loop\");\n                }\n                return function_(AST_Defun, false, false, is_export_default);\n\n              case \"if\":\n                next();\n                return if_();\n\n              case \"return\":\n                if (S.in_function == 0 && !options.bare_returns)\n                    croak(\"'return' outside of function\");\n                next();\n                var value = null;\n                if (is(\"punc\", \";\")) {\n                    next();\n                } else if (!can_insert_semicolon()) {\n                    value = expression(true);\n                    semicolon();\n                }\n                return new AST_Return({\n                    value: value\n                });\n\n              case \"switch\":\n                next();\n                return new AST_Switch({\n                    expression : parenthesised(),\n                    body       : in_loop(switch_body_)\n                });\n\n              case \"throw\":\n                next();\n                if (has_newline_before(S.token))\n                    croak(\"Illegal newline after 'throw'\");\n                var value = expression(true);\n                semicolon();\n                return new AST_Throw({\n                    value: value\n                });\n\n              case \"try\":\n                next();\n                return try_();\n\n              case \"var\":\n                next();\n                var node = var_();\n                semicolon();\n                return node;\n\n              case \"let\":\n                next();\n                var node = let_();\n                semicolon();\n                return node;\n\n              case \"const\":\n                next();\n                var node = const_();\n                semicolon();\n                return node;\n\n              case \"with\":\n                if (S.input.has_directive(\"use strict\")) {\n                    croak(\"Strict mode may not include a with statement\");\n                }\n                next();\n                return new AST_With({\n                    expression : parenthesised(),\n                    body       : statement()\n                });\n\n              case \"export\":\n                if (!is_token(peek(), \"punc\", \"(\")) {\n                    next();\n                    var node = export_();\n                    if (is(\"punc\", \";\")) semicolon();\n                    return node;\n                }\n            }\n        }\n        unexpected();\n    });\n\n    function labeled_statement() {\n        var label = as_symbol(AST_Label);\n        if (label.name === \"await\" && is_in_async()) {\n            token_error(S.prev, \"await cannot be used as label inside async function\");\n        }\n        if (S.labels.some((l) => l.name === label.name)) {\n            // ECMA-262, 12.12: An ECMAScript program is considered\n            // syntactically incorrect if it contains a\n            // LabelledStatement that is enclosed by a\n            // LabelledStatement with the same Identifier as label.\n            croak(\"Label \" + label.name + \" defined twice\");\n        }\n        expect(\":\");\n        S.labels.push(label);\n        var stat = statement();\n        S.labels.pop();\n        if (!(stat instanceof AST_IterationStatement)) {\n            // check for `continue` that refers to this label.\n            // those should be reported as syntax errors.\n            // https://github.com/mishoo/UglifyJS2/issues/287\n            label.references.forEach(function(ref) {\n                if (ref instanceof AST_Continue) {\n                    ref = ref.label.start;\n                    croak(\"Continue label `\" + label.name + \"` refers to non-IterationStatement.\",\n                          ref.line, ref.col, ref.pos);\n                }\n            });\n        }\n        return new AST_LabeledStatement({ body: stat, label: label });\n    }\n\n    function simple_statement(tmp) {\n        return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });\n    }\n\n    function break_cont(type) {\n        var label = null, ldef;\n        if (!can_insert_semicolon()) {\n            label = as_symbol(AST_LabelRef, true);\n        }\n        if (label != null) {\n            ldef = S.labels.find((l) => l.name === label.name);\n            if (!ldef)\n                croak(\"Undefined label \" + label.name);\n            label.thedef = ldef;\n        } else if (S.in_loop == 0)\n            croak(type.TYPE + \" not inside a loop or switch\");\n        semicolon();\n        var stat = new type({ label: label });\n        if (ldef) ldef.references.push(stat);\n        return stat;\n    }\n\n    function for_() {\n        var for_await_error = \"`for await` invalid in this context\";\n        var await_tok = S.token;\n        if (await_tok.type == \"name\" && await_tok.value == \"await\") {\n            if (!is_in_async()) {\n                token_error(await_tok, for_await_error);\n            }\n            next();\n        } else {\n            await_tok = false;\n        }\n        expect(\"(\");\n        var init = null;\n        if (!is(\"punc\", \";\")) {\n            init =\n                is(\"keyword\", \"var\") ? (next(), var_(true)) :\n                is(\"keyword\", \"let\") ? (next(), let_(true)) :\n                is(\"keyword\", \"const\") ? (next(), const_(true)) :\n                                       expression(true, true);\n            var is_in = is(\"operator\", \"in\");\n            var is_of = is(\"name\", \"of\");\n            if (await_tok && !is_of) {\n                token_error(await_tok, for_await_error);\n            }\n            if (is_in || is_of) {\n                if (init instanceof AST_Definitions) {\n                    if (init.definitions.length > 1)\n                        token_error(init.start, \"Only one variable declaration allowed in for..in loop\");\n                } else if (!(is_assignable(init) || (init = to_destructuring(init)) instanceof AST_Destructuring)) {\n                    token_error(init.start, \"Invalid left-hand side in for..in loop\");\n                }\n                next();\n                if (is_in) {\n                    return for_in(init);\n                } else {\n                    return for_of(init, !!await_tok);\n                }\n            }\n        } else if (await_tok) {\n            token_error(await_tok, for_await_error);\n        }\n        return regular_for(init);\n    }\n\n    function regular_for(init) {\n        expect(\";\");\n        var test = is(\"punc\", \";\") ? null : expression(true);\n        expect(\";\");\n        var step = is(\"punc\", \")\") ? null : expression(true);\n        expect(\")\");\n        return new AST_For({\n            init      : init,\n            condition : test,\n            step      : step,\n            body      : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    function for_of(init, is_await) {\n        var lhs = init instanceof AST_Definitions ? init.definitions[0].name : null;\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForOf({\n            await  : is_await,\n            init   : init,\n            name   : lhs,\n            object : obj,\n            body   : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    function for_in(init) {\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForIn({\n            init   : init,\n            object : obj,\n            body   : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    var arrow_function = function(start, argnames, is_async) {\n        if (has_newline_before(S.token)) {\n            croak(\"Unexpected newline before arrow (=>)\");\n        }\n\n        expect_token(\"arrow\", \"=>\");\n\n        var body = _function_body(is(\"punc\", \"{\"), false, is_async);\n\n        var end =\n            body instanceof Array && body.length ? body[body.length - 1].end :\n            body instanceof Array ? start :\n                body.end;\n\n        return new AST_Arrow({\n            start    : start,\n            end      : end,\n            async    : is_async,\n            argnames : argnames,\n            body     : body\n        });\n    };\n\n    var function_ = function(ctor, is_generator_property, is_async, is_export_default) {\n        var start = S.token;\n\n        var in_statement = ctor === AST_Defun;\n        var is_generator = is(\"operator\", \"*\");\n        if (is_generator) {\n            next();\n        }\n\n        var name = is(\"name\") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;\n        if (in_statement && !name) {\n            if (is_export_default) {\n                ctor = AST_Function;\n            } else {\n                unexpected();\n            }\n        }\n\n        if (name && ctor !== AST_Accessor && !(name instanceof AST_SymbolDeclaration))\n            unexpected(prev());\n\n        var args = [];\n        var body = _function_body(true, is_generator || is_generator_property, is_async, name, args);\n        return new ctor({\n            start : args.start,\n            end   : body.end,\n            is_generator: is_generator,\n            async : is_async,\n            name  : name,\n            argnames: args,\n            body  : body\n        });\n    };\n\n    function track_used_binding_identifiers(is_parameter, strict) {\n        var parameters = new Set();\n        var duplicate = false;\n        var default_assignment = false;\n        var spread = false;\n        var strict_mode = !!strict;\n        var tracker = {\n            add_parameter: function(token) {\n                if (parameters.has(token.value)) {\n                    if (duplicate === false) {\n                        duplicate = token;\n                    }\n                    tracker.check_strict();\n                } else {\n                    parameters.add(token.value);\n                    if (is_parameter) {\n                        switch (token.value) {\n                          case \"arguments\":\n                          case \"eval\":\n                          case \"yield\":\n                            if (strict_mode) {\n                                token_error(token, \"Unexpected \" + token.value + \" identifier as parameter inside strict mode\");\n                            }\n                            break;\n                          default:\n                            if (RESERVED_WORDS.has(token.value)) {\n                                unexpected();\n                            }\n                        }\n                    }\n                }\n            },\n            mark_default_assignment: function(token) {\n                if (default_assignment === false) {\n                    default_assignment = token;\n                }\n            },\n            mark_spread: function(token) {\n                if (spread === false) {\n                    spread = token;\n                }\n            },\n            mark_strict_mode: function() {\n                strict_mode = true;\n            },\n            is_strict: function() {\n                return default_assignment !== false || spread !== false || strict_mode;\n            },\n            check_strict: function() {\n                if (tracker.is_strict() && duplicate !== false) {\n                    token_error(duplicate, \"Parameter \" + duplicate.value + \" was used already\");\n                }\n            }\n        };\n\n        return tracker;\n    }\n\n    function parameters(params) {\n        var start = S.token;\n        var used_parameters = track_used_binding_identifiers(true, S.input.has_directive(\"use strict\"));\n\n        expect(\"(\");\n\n        while (!is(\"punc\", \")\")) {\n            var param = parameter(used_parameters);\n            params.push(param);\n\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\") && options.ecma < 8) unexpected();\n            }\n\n            if (param instanceof AST_Expansion) {\n                break;\n            }\n        }\n\n        next();\n    }\n\n    function parameter(used_parameters, symbol_type) {\n        var param;\n        var expand = false;\n        if (used_parameters === undefined) {\n            used_parameters = track_used_binding_identifiers(true, S.input.has_directive(\"use strict\"));\n        }\n        if (is(\"expand\", \"...\")) {\n            expand = S.token;\n            used_parameters.mark_spread(S.token);\n            next();\n        }\n        param = binding_element(used_parameters, symbol_type);\n\n        if (is(\"operator\", \"=\") && expand === false) {\n            used_parameters.mark_default_assignment(S.token);\n            next();\n            param = new AST_DefaultAssign({\n                start: param.start,\n                left: param,\n                operator: \"=\",\n                right: expression(false),\n                end: S.token\n            });\n        }\n\n        if (expand !== false) {\n            if (!is(\"punc\", \")\")) {\n                unexpected();\n            }\n            param = new AST_Expansion({\n                start: expand,\n                expression: param,\n                end: expand\n            });\n        }\n        used_parameters.check_strict();\n\n        return param;\n    }\n\n    function binding_element(used_parameters, symbol_type) {\n        var elements = [];\n        var first = true;\n        var is_expand = false;\n        var expand_token;\n        var first_token = S.token;\n        if (used_parameters === undefined) {\n            used_parameters = track_used_binding_identifiers(false, S.input.has_directive(\"use strict\"));\n        }\n        symbol_type = symbol_type === undefined ? AST_SymbolFunarg : symbol_type;\n        if (is(\"punc\", \"[\")) {\n            next();\n            while (!is(\"punc\", \"]\")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(\",\");\n                }\n\n                if (is(\"expand\", \"...\")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is(\"punc\")) {\n                    switch (S.token.value) {\n                      case \",\":\n                        elements.push(new AST_Hole({\n                            start: S.token,\n                            end: S.token\n                        }));\n                        continue;\n                      case \"]\": // Trailing comma after last element\n                        break;\n                      case \"[\":\n                      case \"{\":\n                        elements.push(binding_element(used_parameters, symbol_type));\n                        break;\n                      default:\n                        unexpected();\n                    }\n                } else if (is(\"name\")) {\n                    used_parameters.add_parameter(S.token);\n                    elements.push(as_symbol(symbol_type));\n                } else {\n                    croak(\"Invalid function parameter\");\n                }\n                if (is(\"operator\", \"=\") && is_expand === false) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1] = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].start,\n                        left: elements[elements.length - 1],\n                        operator: \"=\",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n                if (is_expand) {\n                    if (!is(\"punc\", \"]\")) {\n                        croak(\"Rest element must be last element\");\n                    }\n                    elements[elements.length - 1] = new AST_Expansion({\n                        start: expand_token,\n                        expression: elements[elements.length - 1],\n                        end: expand_token\n                    });\n                }\n            }\n            expect(\"]\");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: true,\n                end: prev()\n            });\n        } else if (is(\"punc\", \"{\")) {\n            next();\n            while (!is(\"punc\", \"}\")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(\",\");\n                }\n                if (is(\"expand\", \"...\")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is(\"name\") && (is_token(peek(), \"punc\") || is_token(peek(), \"operator\")) && [\",\", \"}\", \"=\"].includes(peek().value)) {\n                    used_parameters.add_parameter(S.token);\n                    var start = prev();\n                    var value = as_symbol(symbol_type);\n                    if (is_expand) {\n                        elements.push(new AST_Expansion({\n                            start: expand_token,\n                            expression: value,\n                            end: value.end,\n                        }));\n                    } else {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: start,\n                            key: value.name,\n                            value: value,\n                            end: value.end,\n                        }));\n                    }\n                } else if (is(\"punc\", \"}\")) {\n                    continue; // Allow trailing hole\n                } else {\n                    var property_token = S.token;\n                    var property = as_property_name();\n                    if (property === null) {\n                        unexpected(prev());\n                    } else if (prev().type === \"name\" && !is(\"punc\", \":\")) {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: prev(),\n                            key: property,\n                            value: new symbol_type({\n                                start: prev(),\n                                name: property,\n                                end: prev()\n                            }),\n                            end: prev()\n                        }));\n                    } else {\n                        expect(\":\");\n                        elements.push(new AST_ObjectKeyVal({\n                            start: property_token,\n                            quote: property_token.quote,\n                            key: property,\n                            value: binding_element(used_parameters, symbol_type),\n                            end: prev()\n                        }));\n                    }\n                }\n                if (is_expand) {\n                    if (!is(\"punc\", \"}\")) {\n                        croak(\"Rest element must be last element\");\n                    }\n                } else if (is(\"operator\", \"=\")) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1].value = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].value.start,\n                        left: elements[elements.length - 1].value,\n                        operator: \"=\",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n            }\n            expect(\"}\");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: false,\n                end: prev()\n            });\n        } else if (is(\"name\")) {\n            used_parameters.add_parameter(S.token);\n            return as_symbol(symbol_type);\n        } else {\n            croak(\"Invalid function parameter\");\n        }\n    }\n\n    function params_or_seq_(allow_arrows, maybe_sequence) {\n        var spread_token;\n        var invalid_sequence;\n        var trailing_comma;\n        var a = [];\n        expect(\"(\");\n        while (!is(\"punc\", \")\")) {\n            if (spread_token) unexpected(spread_token);\n            if (is(\"expand\", \"...\")) {\n                spread_token = S.token;\n                if (maybe_sequence) invalid_sequence = S.token;\n                next();\n                a.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(),\n                    end: S.token,\n                }));\n            } else {\n                a.push(expression());\n            }\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\")) {\n                    if (options.ecma < 8) unexpected();\n                    trailing_comma = prev();\n                    if (maybe_sequence) invalid_sequence = trailing_comma;\n                }\n            }\n        }\n        expect(\")\");\n        if (allow_arrows && is(\"arrow\", \"=>\")) {\n            if (spread_token && trailing_comma) unexpected(trailing_comma);\n        } else if (invalid_sequence) {\n            unexpected(invalid_sequence);\n        }\n        return a;\n    }\n\n    function _function_body(block, generator, is_async, name, args) {\n        var loop = S.in_loop;\n        var labels = S.labels;\n        var current_generator = S.in_generator;\n        var current_async = S.in_async;\n        ++S.in_function;\n        if (generator)\n            S.in_generator = S.in_function;\n        if (is_async)\n            S.in_async = S.in_function;\n        if (args) parameters(args);\n        if (block)\n            S.in_directives = true;\n        S.in_loop = 0;\n        S.labels = [];\n        if (block) {\n            S.input.push_directives_stack();\n            var a = block_();\n            if (name) _verify_symbol(name);\n            if (args) args.forEach(_verify_symbol);\n            S.input.pop_directives_stack();\n        } else {\n            var a = expression(false);\n        }\n        --S.in_function;\n        S.in_loop = loop;\n        S.labels = labels;\n        S.in_generator = current_generator;\n        S.in_async = current_async;\n        return a;\n    }\n\n    function _await_expression() {\n        // Previous token must be \"await\" and not be interpreted as an identifier\n        if (!is_in_async()) {\n            croak(\"Unexpected await expression outside async function\",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        // the await expression is parsed as a unary expression in Babel\n        return new AST_Await({\n            start: prev(),\n            end: S.token,\n            expression : maybe_unary(true),\n        });\n    }\n\n    function _yield_expression() {\n        // Previous token must be keyword yield and not be interpret as an identifier\n        if (!is_in_generator()) {\n            croak(\"Unexpected yield expression outside generator function\",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        var start = S.token;\n        var star = false;\n        var has_expression = true;\n\n        // Attempt to get expression or star (and then the mandatory expression)\n        // behind yield on the same line.\n        //\n        // If nothing follows on the same line of the yieldExpression,\n        // it should default to the value `undefined` for yield to return.\n        // In that case, the `undefined` stored as `null` in ast.\n        //\n        // Note 1: It isn't allowed for yield* to close without an expression\n        // Note 2: If there is a nlb between yield and star, it is interpret as\n        //         yield <explicit undefined> <inserted automatic semicolon> *\n        if (can_insert_semicolon() ||\n            (is(\"punc\") && PUNC_AFTER_EXPRESSION.has(S.token.value))) {\n            has_expression = false;\n\n        } else if (is(\"operator\", \"*\")) {\n            star = true;\n            next();\n        }\n\n        return new AST_Yield({\n            start      : start,\n            is_star    : star,\n            expression : has_expression ? expression() : null,\n            end        : prev()\n        });\n    }\n\n    function if_() {\n        var cond = parenthesised(), body = statement(false, false, true), belse = null;\n        if (is(\"keyword\", \"else\")) {\n            next();\n            belse = statement(false, false, true);\n        }\n        return new AST_If({\n            condition   : cond,\n            body        : body,\n            alternative : belse\n        });\n    }\n\n    function block_() {\n        expect(\"{\");\n        var a = [];\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            a.push(statement());\n        }\n        next();\n        return a;\n    }\n\n    function switch_body_() {\n        expect(\"{\");\n        var a = [], cur = null, branch = null, tmp;\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            if (is(\"keyword\", \"case\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Case({\n                    start      : (tmp = S.token, next(), tmp),\n                    expression : expression(true),\n                    body       : cur\n                });\n                a.push(branch);\n                expect(\":\");\n            } else if (is(\"keyword\", \"default\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Default({\n                    start : (tmp = S.token, next(), expect(\":\"), tmp),\n                    body  : cur\n                });\n                a.push(branch);\n            } else {\n                if (!cur) unexpected();\n                cur.push(statement());\n            }\n        }\n        if (branch) branch.end = prev();\n        next();\n        return a;\n    }\n\n    function try_() {\n        var body = block_(), bcatch = null, bfinally = null;\n        if (is(\"keyword\", \"catch\")) {\n            var start = S.token;\n            next();\n            if (is(\"punc\", \"{\")) {\n                var name = null;\n            } else {\n                expect(\"(\");\n                var name = parameter(undefined, AST_SymbolCatch);\n                expect(\")\");\n            }\n            bcatch = new AST_Catch({\n                start   : start,\n                argname : name,\n                body    : block_(),\n                end     : prev()\n            });\n        }\n        if (is(\"keyword\", \"finally\")) {\n            var start = S.token;\n            next();\n            bfinally = new AST_Finally({\n                start : start,\n                body  : block_(),\n                end   : prev()\n            });\n        }\n        if (!bcatch && !bfinally)\n            croak(\"Missing catch/finally blocks\");\n        return new AST_Try({\n            body     : body,\n            bcatch   : bcatch,\n            bfinally : bfinally\n        });\n    }\n\n    function vardefs(no_in, kind) {\n        var a = [];\n        var def;\n        for (;;) {\n            var sym_type =\n                kind === \"var\" ? AST_SymbolVar :\n                kind === \"const\" ? AST_SymbolConst :\n                kind === \"let\" ? AST_SymbolLet : null;\n            if (is(\"punc\", \"{\") || is(\"punc\", \"[\")) {\n                def = new AST_VarDef({\n                    start: S.token,\n                    name: binding_element(undefined ,sym_type),\n                    value: is(\"operator\", \"=\") ? (expect_token(\"operator\", \"=\"), expression(false, no_in)) : null,\n                    end: prev()\n                });\n            } else {\n                def = new AST_VarDef({\n                    start : S.token,\n                    name  : as_symbol(sym_type),\n                    value : is(\"operator\", \"=\")\n                        ? (next(), expression(false, no_in))\n                        : !no_in && kind === \"const\"\n                            ? croak(\"Missing initializer in const declaration\") : null,\n                    end   : prev()\n                });\n                if (def.name.name == \"import\") croak(\"Unexpected token: import\");\n            }\n            a.push(def);\n            if (!is(\"punc\", \",\"))\n                break;\n            next();\n        }\n        return a;\n    }\n\n    var var_ = function(no_in) {\n        return new AST_Var({\n            start       : prev(),\n            definitions : vardefs(no_in, \"var\"),\n            end         : prev()\n        });\n    };\n\n    var let_ = function(no_in) {\n        return new AST_Let({\n            start       : prev(),\n            definitions : vardefs(no_in, \"let\"),\n            end         : prev()\n        });\n    };\n\n    var const_ = function(no_in) {\n        return new AST_Const({\n            start       : prev(),\n            definitions : vardefs(no_in, \"const\"),\n            end         : prev()\n        });\n    };\n\n    var new_ = function(allow_calls) {\n        var start = S.token;\n        expect_token(\"operator\", \"new\");\n        if (is(\"punc\", \".\")) {\n            next();\n            expect_token(\"name\", \"target\");\n            return subscripts(new AST_NewTarget({\n                start : start,\n                end   : prev()\n            }), allow_calls);\n        }\n        var newexp = expr_atom(false), args;\n        if (is(\"punc\", \"(\")) {\n            next();\n            args = expr_list(\")\", options.ecma >= 8);\n        } else {\n            args = [];\n        }\n        var call = new AST_New({\n            start      : start,\n            expression : newexp,\n            args       : args,\n            end        : prev()\n        });\n        mark_pure(call);\n        return subscripts(call, allow_calls);\n    };\n\n    function as_atom_node() {\n        var tok = S.token, ret;\n        switch (tok.type) {\n          case \"name\":\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n          case \"num\":\n            ret = new AST_Number({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"big_int\":\n            ret = new AST_BigInt({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"string\":\n            ret = new AST_String({\n                start : tok,\n                end   : tok,\n                value : tok.value,\n                quote : tok.quote\n            });\n            break;\n          case \"regexp\":\n            ret = new AST_RegExp({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"atom\":\n            switch (tok.value) {\n              case \"false\":\n                ret = new AST_False({ start: tok, end: tok });\n                break;\n              case \"true\":\n                ret = new AST_True({ start: tok, end: tok });\n                break;\n              case \"null\":\n                ret = new AST_Null({ start: tok, end: tok });\n                break;\n            }\n            break;\n        }\n        next();\n        return ret;\n    }\n\n    function to_fun_args(ex, _, __, default_seen_above) {\n        var insert_default = function(ex, default_value) {\n            if (default_value) {\n                return new AST_DefaultAssign({\n                    start: ex.start,\n                    left: ex,\n                    operator: \"=\",\n                    right: default_value,\n                    end: default_value.end\n                });\n            }\n            return ex;\n        };\n        if (ex instanceof AST_Object) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: false,\n                names: ex.properties.map(to_fun_args)\n            }), default_seen_above);\n        } else if (ex instanceof AST_ObjectKeyVal) {\n            ex.value = to_fun_args(ex.value, 0, [ex.key]);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Hole) {\n            return ex;\n        } else if (ex instanceof AST_Destructuring) {\n            ex.names = ex.names.map(to_fun_args);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_SymbolRef) {\n            return insert_default(new AST_SymbolFunarg({\n                name: ex.name,\n                start: ex.start,\n                end: ex.end\n            }), default_seen_above);\n        } else if (ex instanceof AST_Expansion) {\n            ex.expression = to_fun_args(ex.expression);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Array) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: true,\n                names: ex.elements.map(to_fun_args)\n            }), default_seen_above);\n        } else if (ex instanceof AST_Assign) {\n            return insert_default(to_fun_args(ex.left, undefined, undefined, ex.right), default_seen_above);\n        } else if (ex instanceof AST_DefaultAssign) {\n            ex.left = to_fun_args(ex.left, 0, [ex.left]);\n            return ex;\n        } else {\n            croak(\"Invalid function parameter\", ex.start.line, ex.start.col);\n        }\n    }\n\n    var expr_atom = function(allow_calls, allow_arrows) {\n        if (is(\"operator\", \"new\")) {\n            return new_(allow_calls);\n        }\n        var start = S.token;\n        var peeked;\n        var async = is(\"name\", \"async\")\n            && (peeked = peek()).value != \"[\"\n            && peeked.type != \"arrow\"\n            && as_atom_node();\n        if (is(\"punc\")) {\n            switch (S.token.value) {\n              case \"(\":\n                if (async && !allow_calls) break;\n                var exprs = params_or_seq_(allow_arrows, !async);\n                if (allow_arrows && is(\"arrow\", \"=>\")) {\n                    return arrow_function(start, exprs.map(to_fun_args), !!async);\n                }\n                var ex = async ? new AST_Call({\n                    expression: async,\n                    args: exprs\n                }) : exprs.length == 1 ? exprs[0] : new AST_Sequence({\n                    expressions: exprs\n                });\n                if (ex.start) {\n                    var len = start.comments_before.length;\n                    [].unshift.apply(ex.start.comments_before, start.comments_before);\n                    start.comments_before = ex.start.comments_before;\n                    start.comments_before_length = len;\n                    if (len == 0 && start.comments_before.length > 0) {\n                        var comment = start.comments_before[0];\n                        if (!comment.nlb) {\n                            comment.nlb = start.nlb;\n                            start.nlb = false;\n                        }\n                    }\n                    start.comments_after = ex.start.comments_after;\n                }\n                ex.start = start;\n                var end = prev();\n                if (ex.end) {\n                    end.comments_before = ex.end.comments_before;\n                    [].push.apply(ex.end.comments_after, end.comments_after);\n                    end.comments_after = ex.end.comments_after;\n                }\n                ex.end = end;\n                if (ex instanceof AST_Call) mark_pure(ex);\n                return subscripts(ex, allow_calls);\n              case \"[\":\n                return subscripts(array_(), allow_calls);\n              case \"{\":\n                return subscripts(object_or_destructuring_(), allow_calls);\n            }\n            if (!async) unexpected();\n        }\n        if (allow_arrows && is(\"name\") && is_token(peek(), \"arrow\")) {\n            var param = new AST_SymbolFunarg({\n                name: S.token.value,\n                start: start,\n                end: start,\n            });\n            next();\n            return arrow_function(start, [param], !!async);\n        }\n        if (is(\"keyword\", \"function\")) {\n            next();\n            var func = function_(AST_Function, false, !!async);\n            func.start = start;\n            func.end = prev();\n            return subscripts(func, allow_calls);\n        }\n        if (async) return subscripts(async, allow_calls);\n        if (is(\"keyword\", \"class\")) {\n            next();\n            var cls = class_(AST_ClassExpression);\n            cls.start = start;\n            cls.end = prev();\n            return subscripts(cls, allow_calls);\n        }\n        if (is(\"template_head\")) {\n            return subscripts(template_string(false), allow_calls);\n        }\n        if (ATOMIC_START_TOKEN.has(S.token.type)) {\n            return subscripts(as_atom_node(), allow_calls);\n        }\n        unexpected();\n    };\n\n    function template_string(tagged) {\n        var segments = [], start = S.token;\n\n        segments.push(new AST_TemplateSegment({\n            start: S.token,\n            raw: S.token.raw,\n            value: S.token.value,\n            end: S.token\n        }));\n        while (S.token.end === false) {\n            next();\n            handle_regexp();\n            segments.push(expression(true));\n\n            if (!is_token(\"template_substitution\")) {\n                unexpected();\n            }\n\n            segments.push(new AST_TemplateSegment({\n                start: S.token,\n                raw: S.token.raw,\n                value: S.token.value,\n                end: S.token\n            }));\n        }\n        next();\n\n        return new AST_TemplateString({\n            start: start,\n            segments: segments,\n            end: S.token\n        });\n    }\n\n    function expr_list(closing, allow_trailing_comma, allow_empty) {\n        var first = true, a = [];\n        while (!is(\"punc\", closing)) {\n            if (first) first = false; else expect(\",\");\n            if (allow_trailing_comma && is(\"punc\", closing)) break;\n            if (is(\"punc\", \",\") && allow_empty) {\n                a.push(new AST_Hole({ start: S.token, end: S.token }));\n            } else if (is(\"expand\", \"...\")) {\n                next();\n                a.push(new AST_Expansion({start: prev(), expression: expression(),end: S.token}));\n            } else {\n                a.push(expression(false));\n            }\n        }\n        next();\n        return a;\n    }\n\n    var array_ = embed_tokens(function() {\n        expect(\"[\");\n        return new AST_Array({\n            elements: expr_list(\"]\", !options.strict, true)\n        });\n    });\n\n    var create_accessor = embed_tokens(function(is_generator, is_async) {\n        return function_(AST_Accessor, is_generator, is_async);\n    });\n\n    var object_or_destructuring_ = embed_tokens(function object_or_destructuring_() {\n        var start = S.token, first = true, a = [];\n        expect(\"{\");\n        while (!is(\"punc\", \"}\")) {\n            if (first) first = false; else expect(\",\");\n            if (!options.strict && is(\"punc\", \"}\"))\n                // allow trailing comma\n                break;\n\n            start = S.token;\n            if (start.type == \"expand\") {\n                next();\n                a.push(new AST_Expansion({\n                    start: start,\n                    expression: expression(false),\n                    end: prev(),\n                }));\n                continue;\n            }\n\n            var name = as_property_name();\n            var value;\n\n            // Check property and fetch value\n            if (!is(\"punc\", \":\")) {\n                var concise = concise_method_or_getset(name, start);\n                if (concise) {\n                    a.push(concise);\n                    continue;\n                }\n\n                value = new AST_SymbolRef({\n                    start: prev(),\n                    name: name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected(prev());\n            } else {\n                next(); // `:` - see first condition\n                value = expression(false);\n            }\n\n            // Check for default value and alter value accordingly if necessary\n            if (is(\"operator\", \"=\")) {\n                next();\n                value = new AST_Assign({\n                    start: start,\n                    left: value,\n                    operator: \"=\",\n                    right: expression(false),\n                    end: prev()\n                });\n            }\n\n            // Create property\n            a.push(new AST_ObjectKeyVal({\n                start: start,\n                quote: start.quote,\n                key: name instanceof AST_Node ? name : \"\" + name,\n                value: value,\n                end: prev()\n            }));\n        }\n        next();\n        return new AST_Object({ properties: a });\n    });\n\n    function class_(KindOfClass) {\n        var start, method, class_name, extends_, a = [];\n\n        S.input.push_directives_stack(); // Push directive stack, but not scope stack\n        S.input.add_directive(\"use strict\");\n\n        if (S.token.type == \"name\" && S.token.value != \"extends\") {\n            class_name = as_symbol(KindOfClass === AST_DefClass ? AST_SymbolDefClass : AST_SymbolClass);\n        }\n\n        if (KindOfClass === AST_DefClass && !class_name) {\n            unexpected();\n        }\n\n        if (S.token.value == \"extends\") {\n            next();\n            extends_ = expression(true);\n        }\n\n        expect(\"{\");\n\n        if (is(\"punc\", \";\")) { next(); }  // Leading semicolons are okay in class bodies.\n        while (!is(\"punc\", \"}\")) {\n            start = S.token;\n            method = concise_method_or_getset(as_property_name(), start, true);\n            if (!method) { unexpected(); }\n            a.push(method);\n            if (is(\"punc\", \";\")) { next(); }\n        }\n\n        S.input.pop_directives_stack();\n\n        next();\n\n        return new KindOfClass({\n            start: start,\n            name: class_name,\n            extends: extends_,\n            properties: a,\n            end: prev(),\n        });\n    }\n\n    function concise_method_or_getset(name, start, is_class) {\n        var get_ast = function(name, token) {\n            if (typeof name === \"string\" || typeof name === \"number\") {\n                return new AST_SymbolMethod({\n                    start: token,\n                    name: \"\" + name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected();\n            }\n            return name;\n        };\n        var is_async = false;\n        var is_static = false;\n        var is_generator = false;\n        var property_token = start;\n        if (is_class && name === \"static\" && !is(\"punc\", \"(\")) {\n            is_static = true;\n            property_token = S.token;\n            name = as_property_name();\n        }\n        if (name === \"async\" && !is(\"punc\", \"(\") && !is(\"punc\", \",\") && !is(\"punc\", \"}\")) {\n            is_async = true;\n            property_token = S.token;\n            name = as_property_name();\n        }\n        if (name === null) {\n            is_generator = true;\n            property_token = S.token;\n            name = as_property_name();\n            if (name === null) {\n                unexpected();\n            }\n        }\n        if (is(\"punc\", \"(\")) {\n            name = get_ast(name, start);\n            var node = new AST_ConciseMethod({\n                start       : start,\n                static      : is_static,\n                is_generator: is_generator,\n                async       : is_async,\n                key         : name,\n                quote       : name instanceof AST_SymbolMethod ?\n                              property_token.quote : undefined,\n                value       : create_accessor(is_generator, is_async),\n                end         : prev()\n            });\n            return node;\n        }\n        property_token = S.token;\n        if (name == \"get\") {\n            if (!is(\"punc\") || is(\"punc\", \"[\")) {\n                name = get_ast(as_property_name(), start);\n                return new AST_ObjectGetter({\n                    start : start,\n                    static: is_static,\n                    key   : name,\n                    quote : name instanceof AST_SymbolMethod ?\n                            property_token.quote : undefined,\n                    value : create_accessor(),\n                    end   : prev()\n                });\n            }\n        } else if (name == \"set\") {\n            if (!is(\"punc\") || is(\"punc\", \"[\")) {\n                name = get_ast(as_property_name(), start);\n                return new AST_ObjectSetter({\n                    start : start,\n                    static: is_static,\n                    key   : name,\n                    quote : name instanceof AST_SymbolMethod ?\n                            property_token.quote : undefined,\n                    value : create_accessor(),\n                    end   : prev()\n                });\n            }\n        }\n    }\n\n    function import_() {\n        var start = prev();\n        var imported_name;\n        var imported_names;\n        if (is(\"name\")) {\n            imported_name = as_symbol(AST_SymbolImport);\n        }\n\n        if (is(\"punc\", \",\")) {\n            next();\n        }\n\n        imported_names = map_names(true);\n\n        if (imported_names || imported_name) {\n            expect_token(\"name\", \"from\");\n        }\n        var mod_str = S.token;\n        if (mod_str.type !== \"string\") {\n            unexpected();\n        }\n        next();\n        return new AST_Import({\n            start: start,\n            imported_name: imported_name,\n            imported_names: imported_names,\n            module_name: new AST_String({\n                start: mod_str,\n                value: mod_str.value,\n                quote: mod_str.quote,\n                end: mod_str,\n            }),\n            end: S.token,\n        });\n    }\n\n    function map_name(is_import) {\n        function make_symbol(type) {\n            return new type({\n                name: as_property_name(),\n                start: prev(),\n                end: prev()\n            });\n        }\n\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var name;\n\n        if (is_import) {\n            foreign_name = make_symbol(foreign_type);\n        } else {\n            name = make_symbol(type);\n        }\n        if (is(\"name\", \"as\")) {\n            next();  // The \"as\" word\n            if (is_import) {\n                name = make_symbol(type);\n            } else {\n                foreign_name = make_symbol(foreign_type);\n            }\n        } else if (is_import) {\n            name = new type(foreign_name);\n        } else {\n            foreign_name = new foreign_type(name);\n        }\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: prev(),\n        });\n    }\n\n    function map_nameAsterisk(is_import, name) {\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var end = prev();\n\n        name = name || new type({\n            name: \"*\",\n            start: start,\n            end: end,\n        });\n\n        foreign_name = new foreign_type({\n            name: \"*\",\n            start: start,\n            end: end,\n        });\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: end,\n        });\n    }\n\n    function map_names(is_import) {\n        var names;\n        if (is(\"punc\", \"{\")) {\n            next();\n            names = [];\n            while (!is(\"punc\", \"}\")) {\n                names.push(map_name(is_import));\n                if (is(\"punc\", \",\")) {\n                    next();\n                }\n            }\n            next();\n        } else if (is(\"operator\", \"*\")) {\n            var name;\n            next();\n            if (is_import && is(\"name\", \"as\")) {\n                next();  // The \"as\" word\n                name = as_symbol(is_import ? AST_SymbolImport : AST_SymbolExportForeign);\n            }\n            names = [map_nameAsterisk(is_import, name)];\n        }\n        return names;\n    }\n\n    function export_() {\n        var start = S.token;\n        var is_default;\n        var exported_names;\n\n        if (is(\"keyword\", \"default\")) {\n            is_default = true;\n            next();\n        } else if (exported_names = map_names(false)) {\n            if (is(\"name\", \"from\")) {\n                next();\n\n                var mod_str = S.token;\n                if (mod_str.type !== \"string\") {\n                    unexpected();\n                }\n                next();\n\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    module_name: new AST_String({\n                        start: mod_str,\n                        value: mod_str.value,\n                        quote: mod_str.quote,\n                        end: mod_str,\n                    }),\n                    end: prev(),\n                });\n            } else {\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    end: prev(),\n                });\n            }\n        }\n\n        var node;\n        var exported_value;\n        var exported_definition;\n        if (is(\"punc\", \"{\")\n            || is_default\n                && (is(\"keyword\", \"class\") || is(\"keyword\", \"function\"))\n                && is_token(peek(), \"punc\")) {\n            exported_value = expression(false);\n            semicolon();\n        } else if ((node = statement(is_default)) instanceof AST_Definitions && is_default) {\n            unexpected(node.start);\n        } else if (node instanceof AST_Definitions || node instanceof AST_Lambda || node instanceof AST_DefClass) {\n            exported_definition = node;\n        } else if (node instanceof AST_SimpleStatement) {\n            exported_value = node.body;\n        } else {\n            unexpected(node.start);\n        }\n\n        return new AST_Export({\n            start: start,\n            is_default: is_default,\n            exported_value: exported_value,\n            exported_definition: exported_definition,\n            end: prev(),\n        });\n    }\n\n    function as_property_name() {\n        var tmp = S.token;\n        switch (tmp.type) {\n          case \"punc\":\n            if (tmp.value === \"[\") {\n                next();\n                var ex = expression(false);\n                expect(\"]\");\n                return ex;\n            } else unexpected(tmp);\n          case \"operator\":\n            if (tmp.value === \"*\") {\n                next();\n                return null;\n            }\n            if (![\"delete\", \"in\", \"instanceof\", \"new\", \"typeof\", \"void\"].includes(tmp.value)) {\n                unexpected(tmp);\n            }\n          case \"name\":\n            if (tmp.value == \"yield\") {\n                if (is_in_generator()) {\n                    token_error(tmp, \"Yield cannot be used as identifier inside generators\");\n                } else if (!is_token(peek(), \"punc\", \":\")\n                    && !is_token(peek(), \"punc\", \"(\")\n                    && S.input.has_directive(\"use strict\")) {\n                    token_error(tmp, \"Unexpected yield identifier inside strict mode\");\n                }\n            }\n          case \"string\":\n          case \"num\":\n          case \"big_int\":\n          case \"keyword\":\n          case \"atom\":\n            next();\n            return tmp.value;\n          default:\n            unexpected(tmp);\n        }\n    }\n\n    function as_name() {\n        var tmp = S.token;\n        if (tmp.type != \"name\") unexpected();\n        next();\n        return tmp.value;\n    }\n\n    function _make_symbol(type) {\n        var name = S.token.value;\n        return new (name == \"this\" ? AST_This :\n                    name == \"super\" ? AST_Super :\n                    type)({\n            name  : String(name),\n            start : S.token,\n            end   : S.token\n        });\n    }\n\n    function _verify_symbol(sym) {\n        var name = sym.name;\n        if (is_in_generator() && name == \"yield\") {\n            token_error(sym.start, \"Yield cannot be used as identifier inside generators\");\n        }\n        if (S.input.has_directive(\"use strict\")) {\n            if (name == \"yield\") {\n                token_error(sym.start, \"Unexpected yield identifier inside strict mode\");\n            }\n            if (sym instanceof AST_SymbolDeclaration && (name == \"arguments\" || name == \"eval\")) {\n                token_error(sym.start, \"Unexpected \" + name + \" in strict mode\");\n            }\n        }\n    }\n\n    function as_symbol(type, noerror) {\n        if (!is(\"name\")) {\n            if (!noerror) croak(\"Name expected\");\n            return null;\n        }\n        var sym = _make_symbol(type);\n        _verify_symbol(sym);\n        next();\n        return sym;\n    }\n\n    function mark_pure(call) {\n        var start = call.start;\n        var comments = start.comments_before;\n        var i = HOP(start, \"comments_before_length\") ? start.comments_before_length : comments.length;\n        while (--i >= 0) {\n            var comment = comments[i];\n            if (/[@#]__PURE__/.test(comment.value)) {\n                call.pure = comment;\n                break;\n            }\n        }\n    }\n\n    var subscripts = function(expr, allow_calls) {\n        var start = expr.start;\n        if (is(\"punc\", \".\")) {\n            next();\n            return subscripts(new AST_Dot({\n                start      : start,\n                expression : expr,\n                property   : as_name(),\n                end        : prev()\n            }), allow_calls);\n        }\n        if (is(\"punc\", \"[\")) {\n            next();\n            var prop = expression(true);\n            expect(\"]\");\n            return subscripts(new AST_Sub({\n                start      : start,\n                expression : expr,\n                property   : prop,\n                end        : prev()\n            }), allow_calls);\n        }\n        if (allow_calls && is(\"punc\", \"(\")) {\n            next();\n            var call = new AST_Call({\n                start      : start,\n                expression : expr,\n                args       : call_args(),\n                end        : prev()\n            });\n            mark_pure(call);\n            return subscripts(call, true);\n        }\n        if (is(\"template_head\")) {\n            return subscripts(new AST_PrefixedTemplateString({\n                start: start,\n                prefix: expr,\n                template_string: template_string(true),\n                end: prev()\n            }), allow_calls);\n        }\n        return expr;\n    };\n\n    var call_args = embed_tokens(function _call_args() {\n        var args = [];\n        while (!is(\"punc\", \")\")) {\n            if (is(\"expand\", \"...\")) {\n                next();\n                args.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(false),\n                    end: prev()\n                }));\n            } else {\n                args.push(expression(false));\n            }\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\") && options.ecma < 8) unexpected();\n            }\n        }\n        next();\n        return args;\n    });\n\n    var maybe_unary = function(allow_calls, allow_arrows) {\n        var start = S.token;\n        if (start.type == \"name\" && start.value == \"await\") {\n            if (is_in_async()) {\n                next();\n                return _await_expression();\n            } else if (S.input.has_directive(\"use strict\")) {\n                token_error(S.token, \"Unexpected await identifier inside strict mode\");\n            }\n        }\n        if (is(\"operator\") && UNARY_PREFIX.has(start.value)) {\n            next();\n            handle_regexp();\n            var ex = make_unary(AST_UnaryPrefix, start, maybe_unary(allow_calls));\n            ex.start = start;\n            ex.end = prev();\n            return ex;\n        }\n        var val = expr_atom(allow_calls, allow_arrows);\n        while (is(\"operator\") && UNARY_POSTFIX.has(S.token.value) && !has_newline_before(S.token)) {\n            if (val instanceof AST_Arrow) unexpected();\n            val = make_unary(AST_UnaryPostfix, S.token, val);\n            val.start = start;\n            val.end = S.token;\n            next();\n        }\n        return val;\n    };\n\n    function make_unary(ctor, token, expr) {\n        var op = token.value;\n        switch (op) {\n          case \"++\":\n          case \"--\":\n            if (!is_assignable(expr))\n                croak(\"Invalid use of \" + op + \" operator\", token.line, token.col, token.pos);\n            break;\n          case \"delete\":\n            if (expr instanceof AST_SymbolRef && S.input.has_directive(\"use strict\"))\n                croak(\"Calling delete on expression not allowed in strict mode\", expr.start.line, expr.start.col, expr.start.pos);\n            break;\n        }\n        return new ctor({ operator: op, expression: expr });\n    }\n\n    var expr_op = function(left, min_prec, no_in) {\n        var op = is(\"operator\") ? S.token.value : null;\n        if (op == \"in\" && no_in) op = null;\n        if (op == \"**\" && left instanceof AST_UnaryPrefix\n            /* unary token in front not allowed - parenthesis required */\n            && !is_token(left.start, \"punc\", \"(\")\n            && left.operator !== \"--\" && left.operator !== \"++\")\n                unexpected(left.start);\n        var prec = op != null ? PRECEDENCE[op] : null;\n        if (prec != null && (prec > min_prec || (op === \"**\" && min_prec === prec))) {\n            next();\n            var right = expr_op(maybe_unary(true), prec, no_in);\n            return expr_op(new AST_Binary({\n                start    : left.start,\n                left     : left,\n                operator : op,\n                right    : right,\n                end      : right.end\n            }), min_prec, no_in);\n        }\n        return left;\n    };\n\n    function expr_ops(no_in) {\n        return expr_op(maybe_unary(true, true), 0, no_in);\n    }\n\n    var maybe_conditional = function(no_in) {\n        var start = S.token;\n        var expr = expr_ops(no_in);\n        if (is(\"operator\", \"?\")) {\n            next();\n            var yes = expression(false);\n            expect(\":\");\n            return new AST_Conditional({\n                start       : start,\n                condition   : expr,\n                consequent  : yes,\n                alternative : expression(false, no_in),\n                end         : prev()\n            });\n        }\n        return expr;\n    };\n\n    function is_assignable(expr) {\n        return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;\n    }\n\n    function to_destructuring(node) {\n        if (node instanceof AST_Object) {\n            node = new AST_Destructuring({\n                start: node.start,\n                names: node.properties.map(to_destructuring),\n                is_array: false,\n                end: node.end\n            });\n        } else if (node instanceof AST_Array) {\n            var names = [];\n\n            for (var i = 0; i < node.elements.length; i++) {\n                // Only allow expansion as last element\n                if (node.elements[i] instanceof AST_Expansion) {\n                    if (i + 1 !== node.elements.length) {\n                        token_error(node.elements[i].start, \"Spread must the be last element in destructuring array\");\n                    }\n                    node.elements[i].expression = to_destructuring(node.elements[i].expression);\n                }\n\n                names.push(to_destructuring(node.elements[i]));\n            }\n\n            node = new AST_Destructuring({\n                start: node.start,\n                names: names,\n                is_array: true,\n                end: node.end\n            });\n        } else if (node instanceof AST_ObjectProperty) {\n            node.value = to_destructuring(node.value);\n        } else if (node instanceof AST_Assign) {\n            node = new AST_DefaultAssign({\n                start: node.start,\n                left: node.left,\n                operator: \"=\",\n                right: node.right,\n                end: node.end\n            });\n        }\n        return node;\n    }\n\n    // In ES6, AssignmentExpression can also be an ArrowFunction\n    var maybe_assign = function(no_in) {\n        handle_regexp();\n        var start = S.token;\n\n        if (start.type == \"name\" && start.value == \"yield\") {\n            if (is_in_generator()) {\n                next();\n                return _yield_expression();\n            } else if (S.input.has_directive(\"use strict\")) {\n                token_error(S.token, \"Unexpected yield identifier inside strict mode\");\n            }\n        }\n\n        var left = maybe_conditional(no_in);\n        var val = S.token.value;\n\n        if (is(\"operator\") && ASSIGNMENT.has(val)) {\n            if (is_assignable(left) || (left = to_destructuring(left)) instanceof AST_Destructuring) {\n                next();\n                return new AST_Assign({\n                    start    : start,\n                    left     : left,\n                    operator : val,\n                    right    : maybe_assign(no_in),\n                    end      : prev()\n                });\n            }\n            croak(\"Invalid assignment\");\n        }\n        return left;\n    };\n\n    var expression = function(commas, no_in) {\n        var start = S.token;\n        var exprs = [];\n        while (true) {\n            exprs.push(maybe_assign(no_in));\n            if (!commas || !is(\"punc\", \",\")) break;\n            next();\n            commas = true;\n        }\n        return exprs.length == 1 ? exprs[0] : new AST_Sequence({\n            start       : start,\n            expressions : exprs,\n            end         : peek()\n        });\n    };\n\n    function in_loop(cont) {\n        ++S.in_loop;\n        var ret = cont();\n        --S.in_loop;\n        return ret;\n    }\n\n    if (options.expression) {\n        return expression(true);\n    }\n\n    return (function() {\n        var start = S.token;\n        var body = [];\n        S.input.push_directives_stack();\n        if (options.module) S.input.add_directive(\"use strict\");\n        while (!is(\"eof\"))\n            body.push(statement());\n        S.input.pop_directives_stack();\n        var end = prev();\n        var toplevel = options.toplevel;\n        if (toplevel) {\n            toplevel.body = toplevel.body.concat(body);\n            toplevel.end = end;\n        } else {\n            toplevel = new AST_Toplevel({ start: start, body: body, end: end });\n        }\n        return toplevel;\n    })();\n\n}\n\nexport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_identifier_string,\n    is_surrogate_pair_head,\n    is_surrogate_pair_tail,\n    js_error,\n    JS_Parse_Error,\n    parse,\n    PRECEDENCE,\n    RESERVED_WORDS,\n    tokenizer,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    HOP,\n    MAP,\n    noop,\n    string_template,\n} from \"./utils/index.js\";\nimport { parse } from \"./parse.js\";\n\nfunction DEFNODE(type, props, methods, base = AST_Node) {\n    if (!props) props = [];\n    else props = props.split(/\\s+/);\n    var self_props = props;\n    if (base && base.PROPS)\n        props = props.concat(base.PROPS);\n    var code = \"return function AST_\" + type + \"(props){ if (props) { \";\n    for (var i = props.length; --i >= 0;) {\n        code += \"this.\" + props[i] + \" = props.\" + props[i] + \";\";\n    }\n    var proto = base && new base;\n    if (proto && proto.initialize || (methods && methods.initialize))\n        code += \"this.initialize();\";\n    code += \"}}\";\n    var ctor = new Function(code)();\n    if (proto) {\n        ctor.prototype = proto;\n        ctor.BASE = base;\n    }\n    if (base) base.SUBCLASSES.push(ctor);\n    ctor.prototype.CTOR = ctor;\n    ctor.PROPS = props || null;\n    ctor.SELF_PROPS = self_props;\n    ctor.SUBCLASSES = [];\n    if (type) {\n        ctor.prototype.TYPE = ctor.TYPE = type;\n    }\n    if (methods) for (i in methods) if (HOP(methods, i)) {\n        if (i[0] === \"$\") {\n            ctor[i.substr(1)] = methods[i];\n        } else {\n            ctor.prototype[i] = methods[i];\n        }\n    }\n    ctor.DEFMETHOD = function(name, method) {\n        this.prototype[name] = method;\n    };\n    return ctor;\n}\n\nvar AST_Token = DEFNODE(\"Token\", \"type value line col pos endline endcol endpos nlb comments_before comments_after file raw\", {\n}, null);\n\nvar AST_Node = DEFNODE(\"Node\", \"start end\", {\n    _clone: function(deep) {\n        if (deep) {\n            var self = this.clone();\n            return self.transform(new TreeTransformer(function(node) {\n                if (node !== self) {\n                    return node.clone(true);\n                }\n            }));\n        }\n        return new this.CTOR(this);\n    },\n    clone: function(deep) {\n        return this._clone(deep);\n    },\n    $documentation: \"Base class of all AST nodes\",\n    $propdoc: {\n        start: \"[AST_Token] The first token of this node\",\n        end: \"[AST_Token] The last token of this node\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    },\n    walk: function(visitor) {\n        return this._walk(visitor); // not sure the indirection will be any help\n    }\n}, null);\n\nAST_Node.warn_function = null;\nAST_Node.warn = function(txt, props) {\n    if (AST_Node.warn_function)\n        AST_Node.warn_function(string_template(txt, props));\n};\n\n/* -----[ statements ]----- */\n\nvar AST_Statement = DEFNODE(\"Statement\", null, {\n    $documentation: \"Base class of all statements\",\n});\n\nvar AST_Debugger = DEFNODE(\"Debugger\", null, {\n    $documentation: \"Represents a debugger statement\",\n}, AST_Statement);\n\nvar AST_Directive = DEFNODE(\"Directive\", \"value quote\", {\n    $documentation: \"Represents a directive, like \\\"use strict\\\";\",\n    $propdoc: {\n        value: \"[string] The value of this directive as a plain string (it's not an AST_String!)\",\n        quote: \"[string] the original quote character\"\n    },\n}, AST_Statement);\n\nvar AST_SimpleStatement = DEFNODE(\"SimpleStatement\", \"body\", {\n    $documentation: \"A statement consisting of an expression, i.e. a = 1 + 2\",\n    $propdoc: {\n        body: \"[AST_Node] an expression node (should not be instanceof AST_Statement)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n        });\n    }\n}, AST_Statement);\n\nfunction walk_body(node, visitor) {\n    var body = node.body;\n    if (body instanceof AST_Node) {\n        body._walk(visitor);\n    } else for (var i = 0, len = body.length; i < len; i++) {\n        body[i]._walk(visitor);\n    }\n}\n\nfunction clone_block_scope(deep) {\n    var clone = this._clone(deep);\n    if (this.block_scope) {\n        // TODO this is sometimes undefined during compression.\n        // But it should always have a value!\n        clone.block_scope = this.block_scope.clone();\n    }\n    return clone;\n}\n\nvar AST_Block = DEFNODE(\"Block\", \"body block_scope\", {\n    $documentation: \"A body of statements (usually braced)\",\n    $propdoc: {\n        body: \"[AST_Statement*] an array of statements\",\n        block_scope: \"[AST_Scope] the block scope\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            walk_body(this, visitor);\n        });\n    },\n    clone: clone_block_scope\n}, AST_Statement);\n\nvar AST_BlockStatement = DEFNODE(\"BlockStatement\", null, {\n    $documentation: \"A block statement\",\n}, AST_Block);\n\nvar AST_EmptyStatement = DEFNODE(\"EmptyStatement\", null, {\n    $documentation: \"The empty statement (empty block or simply a semicolon)\"\n}, AST_Statement);\n\nvar AST_StatementWithBody = DEFNODE(\"StatementWithBody\", \"body\", {\n    $documentation: \"Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`\",\n    $propdoc: {\n        body: \"[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement\"\n    }\n}, AST_Statement);\n\nvar AST_LabeledStatement = DEFNODE(\"LabeledStatement\", \"label\", {\n    $documentation: \"Statement with a label\",\n    $propdoc: {\n        label: \"[AST_Label] a label definition\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.label._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (deep) {\n            var label = node.label;\n            var def = this.label;\n            node.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_LoopControl\n                    && node.label && node.label.thedef === def) {\n                    node.label.thedef = label;\n                    label.references.push(node);\n                }\n            }));\n        }\n        return node;\n    }\n}, AST_StatementWithBody);\n\nvar AST_IterationStatement = DEFNODE(\"IterationStatement\", \"block_scope\", {\n    $documentation: \"Internal class.  All loops inherit from it.\",\n    $propdoc: {\n        block_scope: \"[AST_Scope] the block scope for this iteration statement.\"\n    },\n    clone: clone_block_scope\n}, AST_StatementWithBody);\n\nvar AST_DWLoop = DEFNODE(\"DWLoop\", \"condition\", {\n    $documentation: \"Base class for do/while statements\",\n    $propdoc: {\n        condition: \"[AST_Node] the loop condition.  Should not be instanceof AST_Statement\"\n    }\n}, AST_IterationStatement);\n\nvar AST_Do = DEFNODE(\"Do\", null, {\n    $documentation: \"A `do` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n            this.condition._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_While = DEFNODE(\"While\", null, {\n    $documentation: \"A `while` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_For = DEFNODE(\"For\", \"init condition step\", {\n    $documentation: \"A `for` statement\",\n    $propdoc: {\n        init: \"[AST_Node?] the `for` initialization code, or null if empty\",\n        condition: \"[AST_Node?] the `for` termination clause, or null if empty\",\n        step: \"[AST_Node?] the `for` update clause, or null if empty\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.init) this.init._walk(visitor);\n            if (this.condition) this.condition._walk(visitor);\n            if (this.step) this.step._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForIn = DEFNODE(\"ForIn\", \"init object\", {\n    $documentation: \"A `for ... in` statement\",\n    $propdoc: {\n        init: \"[AST_Node] the `for/in` initialization code\",\n        object: \"[AST_Node] the object that we're looping through\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.init._walk(visitor);\n            this.object._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForOf = DEFNODE(\"ForOf\", \"await\", {\n    $documentation: \"A `for ... of` statement\",\n}, AST_ForIn);\n\nvar AST_With = DEFNODE(\"With\", \"expression\", {\n    $documentation: \"A `with` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `with` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ scope and functions ]----- */\n\nvar AST_Scope = DEFNODE(\"Scope\", \"variables functions uses_with uses_eval parent_scope enclosed cname\", {\n    $documentation: \"Base class for all statements introducing a lexical scope\",\n    $propdoc: {\n        variables: \"[Map/S] a map of name -> SymbolDef for all variables/functions defined in this scope\",\n        functions: \"[Map/S] like `variables`, but only lists function declarations\",\n        uses_with: \"[boolean/S] tells whether this scope uses the `with` statement\",\n        uses_eval: \"[boolean/S] tells whether this scope contains a direct call to the global `eval`\",\n        parent_scope: \"[AST_Scope?/S] link to the parent scope\",\n        enclosed: \"[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes\",\n        cname: \"[integer/S] current index for mangling variables (used internally by the mangler)\",\n    },\n    get_defun_scope: function() {\n        var self = this;\n        while (self.is_block_scope()) {\n            self = self.parent_scope;\n        }\n        return self;\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (this.variables) node.variables = new Map(this.variables);\n        if (this.functions) node.functions = new Map(this.functions);\n        if (this.enclosed) node.enclosed = this.enclosed.slice();\n        return node;\n    },\n    pinned: function() {\n        return this.uses_eval || this.uses_with;\n    }\n}, AST_Block);\n\nvar AST_Toplevel = DEFNODE(\"Toplevel\", \"globals\", {\n    $documentation: \"The toplevel scope\",\n    $propdoc: {\n        globals: \"[Map/S] a map of name -> SymbolDef for all undeclared names\",\n    },\n    wrap_commonjs: function(name) {\n        var body = this.body;\n        var wrapped_tl = \"(function(exports){'$ORIG';})(typeof \" + name + \"=='undefined'?(\" + name + \"={}):\" + name + \");\";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n        return wrapped_tl;\n    },\n    wrap_enclose: function(args_values) {\n        if (typeof args_values != \"string\") args_values = \"\";\n        var index = args_values.indexOf(\":\");\n        if (index < 0) index = args_values.length;\n        var body = this.body;\n        return parse([\n            \"(function(\",\n            args_values.slice(0, index),\n            '){\"$ORIG\"})(',\n            args_values.slice(index + 1),\n            \")\"\n        ].join(\"\")).transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n    }\n}, AST_Scope);\n\nvar AST_Expansion = DEFNODE(\"Expansion\", \"expression\", {\n    $documentation: \"An expandible argument, such as ...rest, a splat, such as [1,2,...all], or an expansion in a variable declaration, such as var [first, ...rest] = list\",\n    $propdoc: {\n        expression: \"[AST_Node] the thing to be expanded\"\n    },\n    _walk: function(visitor) {\n        var self = this;\n        return visitor._visit(this, function() {\n            self.expression.walk(visitor);\n        });\n    }\n});\n\nvar AST_Lambda = DEFNODE(\"Lambda\", \"name argnames uses_arguments is_generator async\", {\n    $documentation: \"Base class for functions\",\n    $propdoc: {\n        name: \"[AST_SymbolDeclaration?] the name of this function\",\n        argnames: \"[AST_SymbolFunarg|AST_Destructuring|AST_Expansion|AST_DefaultAssign*] array of function arguments, destructurings, or expanding arguments\",\n        uses_arguments: \"[boolean/S] tells whether this function accesses the arguments array\",\n        is_generator: \"[boolean] is this a generator method\",\n        async: \"[boolean] is this method async\",\n    },\n    args_as_names: function () {\n        var out = [];\n        for (var i = 0; i < this.argnames.length; i++) {\n            if (this.argnames[i] instanceof AST_Destructuring) {\n                out = out.concat(this.argnames[i].all_symbols());\n            } else {\n                out.push(this.argnames[i]);\n            }\n        }\n        return out;\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.name) this.name._walk(visitor);\n            var argnames = this.argnames;\n            for (var i = 0, len = argnames.length; i < len; i++) {\n                argnames[i]._walk(visitor);\n            }\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Scope);\n\nvar AST_Accessor = DEFNODE(\"Accessor\", null, {\n    $documentation: \"A setter/getter function.  The `name` property is always null.\"\n}, AST_Lambda);\n\nvar AST_Function = DEFNODE(\"Function\", \"inlined\", {\n    $documentation: \"A function expression\"\n}, AST_Lambda);\n\nvar AST_Arrow = DEFNODE(\"Arrow\", \"inlined\", {\n    $documentation: \"An ES6 Arrow function ((a) => b)\"\n}, AST_Lambda);\n\nvar AST_Defun = DEFNODE(\"Defun\", \"inlined\", {\n    $documentation: \"A function definition\"\n}, AST_Lambda);\n\n/* -----[ DESTRUCTURING ]----- */\nvar AST_Destructuring = DEFNODE(\"Destructuring\", \"names is_array\", {\n    $documentation: \"A destructuring of several names. Used in destructuring assignment and with destructuring function argument names\",\n    $propdoc: {\n        \"names\": \"[AST_Node*] Array of properties or elements\",\n        \"is_array\": \"[Boolean] Whether the destructuring represents an object or array\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.names.forEach(function(name) {\n                name._walk(visitor);\n            });\n        });\n    },\n    all_symbols: function() {\n        var out = [];\n        this.walk(new TreeWalker(function (node) {\n            if (node instanceof AST_Symbol) {\n                out.push(node);\n            }\n            if (node instanceof AST_Expansion) {\n                out.push(node.expression);\n            }\n        }));\n        return out;\n    }\n});\n\nvar AST_PrefixedTemplateString = DEFNODE(\"PrefixedTemplateString\", \"template_string prefix\", {\n    $documentation: \"A templatestring with a prefix, such as String.raw`foobarbaz`\",\n    $propdoc: {\n        template_string: \"[AST_TemplateString] The template string\",\n        prefix: \"[AST_SymbolRef|AST_PropAccess] The prefix, which can be a symbol such as `foo` or a dotted expression such as `String.raw`.\"\n    },\n    _walk: function(visitor) {\n        this.prefix._walk(visitor);\n        this.template_string._walk(visitor);\n    }\n});\n\nvar AST_TemplateString = DEFNODE(\"TemplateString\", \"segments\", {\n    $documentation: \"A template string literal\",\n    $propdoc: {\n        segments: \"[AST_Node*] One or more segments, starting with AST_TemplateSegment. AST_Node may follow AST_TemplateSegment, but each AST_Node must be followed by AST_TemplateSegment.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.segments.forEach(function(seg) {\n                seg._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_TemplateSegment = DEFNODE(\"TemplateSegment\", \"value raw\", {\n    $documentation: \"A segment of a template string literal\",\n    $propdoc: {\n        value: \"Content of the segment\",\n        raw: \"Raw content of the segment\"\n    }\n});\n\n/* -----[ JUMPS ]----- */\n\nvar AST_Jump = DEFNODE(\"Jump\", null, {\n    $documentation: \"Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)\"\n}, AST_Statement);\n\nvar AST_Exit = DEFNODE(\"Exit\", \"value\", {\n    $documentation: \"Base class for “exits” (`return` and `throw`)\",\n    $propdoc: {\n        value: \"[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.value && function() {\n            this.value._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Return = DEFNODE(\"Return\", null, {\n    $documentation: \"A `return` statement\"\n}, AST_Exit);\n\nvar AST_Throw = DEFNODE(\"Throw\", null, {\n    $documentation: \"A `throw` statement\"\n}, AST_Exit);\n\nvar AST_LoopControl = DEFNODE(\"LoopControl\", \"label\", {\n    $documentation: \"Base class for loop control statements (`break` and `continue`)\",\n    $propdoc: {\n        label: \"[AST_LabelRef?] the label, or null if none\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.label && function() {\n            this.label._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Break = DEFNODE(\"Break\", null, {\n    $documentation: \"A `break` statement\"\n}, AST_LoopControl);\n\nvar AST_Continue = DEFNODE(\"Continue\", null, {\n    $documentation: \"A `continue` statement\"\n}, AST_LoopControl);\n\n/* -----[ IF ]----- */\n\nvar AST_If = DEFNODE(\"If\", \"condition alternative\", {\n    $documentation: \"A `if` statement\",\n    $propdoc: {\n        condition: \"[AST_Node] the `if` condition\",\n        alternative: \"[AST_Statement?] the `else` part, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n            if (this.alternative) this.alternative._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ SWITCH ]----- */\n\nvar AST_Switch = DEFNODE(\"Switch\", \"expression\", {\n    $documentation: \"A `switch` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `switch` “discriminant”\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_SwitchBranch = DEFNODE(\"SwitchBranch\", null, {\n    $documentation: \"Base class for `switch` branches\",\n}, AST_Block);\n\nvar AST_Default = DEFNODE(\"Default\", null, {\n    $documentation: \"A `default` switch branch\",\n}, AST_SwitchBranch);\n\nvar AST_Case = DEFNODE(\"Case\", \"expression\", {\n    $documentation: \"A `case` switch branch\",\n    $propdoc: {\n        expression: \"[AST_Node] the `case` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_SwitchBranch);\n\n/* -----[ EXCEPTIONS ]----- */\n\nvar AST_Try = DEFNODE(\"Try\", \"bcatch bfinally\", {\n    $documentation: \"A `try` statement\",\n    $propdoc: {\n        bcatch: \"[AST_Catch?] the catch block, or null if not present\",\n        bfinally: \"[AST_Finally?] the finally block, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            walk_body(this, visitor);\n            if (this.bcatch) this.bcatch._walk(visitor);\n            if (this.bfinally) this.bfinally._walk(visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Catch = DEFNODE(\"Catch\", \"argname\", {\n    $documentation: \"A `catch` node; only makes sense as part of a `try` statement\",\n    $propdoc: {\n        argname: \"[AST_SymbolCatch|AST_Destructuring|AST_Expansion|AST_DefaultAssign] symbol for the exception\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.argname) this.argname._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Finally = DEFNODE(\"Finally\", null, {\n    $documentation: \"A `finally` node; only makes sense as part of a `try` statement\"\n}, AST_Block);\n\n/* -----[ VAR/CONST ]----- */\n\nvar AST_Definitions = DEFNODE(\"Definitions\", \"definitions\", {\n    $documentation: \"Base class for `var` or `const` nodes (variable declarations/initializations)\",\n    $propdoc: {\n        definitions: \"[AST_VarDef*] array of variable definitions\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var definitions = this.definitions;\n            for (var i = 0, len = definitions.length; i < len; i++) {\n                definitions[i]._walk(visitor);\n            }\n        });\n    }\n}, AST_Statement);\n\nvar AST_Var = DEFNODE(\"Var\", null, {\n    $documentation: \"A `var` statement\"\n}, AST_Definitions);\n\nvar AST_Let = DEFNODE(\"Let\", null, {\n    $documentation: \"A `let` statement\"\n}, AST_Definitions);\n\nvar AST_Const = DEFNODE(\"Const\", null, {\n    $documentation: \"A `const` statement\"\n}, AST_Definitions);\n\nvar AST_NameMapping = DEFNODE(\"NameMapping\", \"foreign_name name\", {\n    $documentation: \"The part of the export/import statement that declare names from a module.\",\n    $propdoc: {\n        foreign_name: \"[AST_SymbolExportForeign|AST_SymbolImportForeign] The name being exported/imported (as specified in the module)\",\n        name: \"[AST_SymbolExport|AST_SymbolImport] The name as it is visible to this module.\"\n    },\n    _walk: function (visitor) {\n        return visitor._visit(this, function() {\n            this.foreign_name._walk(visitor);\n            this.name._walk(visitor);\n        });\n    }\n});\n\nvar AST_Import = DEFNODE(\"Import\", \"imported_name imported_names module_name\", {\n    $documentation: \"An `import` statement\",\n    $propdoc: {\n        imported_name: \"[AST_SymbolImport] The name of the variable holding the module's default export.\",\n        imported_names: \"[AST_NameMapping*] The names of non-default imported variables\",\n        module_name: \"[AST_String] String literal describing where this module came from\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.imported_name) {\n                this.imported_name._walk(visitor);\n            }\n            if (this.imported_names) {\n                this.imported_names.forEach(function(name_import) {\n                    name_import._walk(visitor);\n                });\n            }\n            this.module_name._walk(visitor);\n        });\n    }\n});\n\nvar AST_Export = DEFNODE(\"Export\", \"exported_definition exported_value is_default exported_names module_name\", {\n    $documentation: \"An `export` statement\",\n    $propdoc: {\n        exported_definition: \"[AST_Defun|AST_Definitions|AST_DefClass?] An exported definition\",\n        exported_value: \"[AST_Node?] An exported value\",\n        exported_names: \"[AST_NameMapping*?] List of exported names\",\n        module_name: \"[AST_String?] Name of the file to load exports from\",\n        is_default: \"[Boolean] Whether this is the default exported value of this module\"\n    },\n    _walk: function (visitor) {\n        visitor._visit(this, function () {\n            if (this.exported_definition) {\n                this.exported_definition._walk(visitor);\n            }\n            if (this.exported_value) {\n                this.exported_value._walk(visitor);\n            }\n            if (this.exported_names) {\n                this.exported_names.forEach(function(name_export) {\n                    name_export._walk(visitor);\n                });\n            }\n            if (this.module_name) {\n                this.module_name._walk(visitor);\n            }\n        });\n    }\n}, AST_Statement);\n\nvar AST_VarDef = DEFNODE(\"VarDef\", \"name value\", {\n    $documentation: \"A variable declaration; only appears in a AST_Definitions node\",\n    $propdoc: {\n        name: \"[AST_Destructuring|AST_SymbolConst|AST_SymbolLet|AST_SymbolVar] name of the variable\",\n        value: \"[AST_Node?] initializer, or null of there's no initializer\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.name._walk(visitor);\n            if (this.value) this.value._walk(visitor);\n        });\n    }\n});\n\n/* -----[ OTHER ]----- */\n\nvar AST_Call = DEFNODE(\"Call\", \"expression args\", {\n    $documentation: \"A function call expression\",\n    $propdoc: {\n        expression: \"[AST_Node] expression to invoke as function\",\n        args: \"[AST_Node*] array of arguments\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var args = this.args;\n            for (var i = 0, len = args.length; i < len; i++) {\n                args[i]._walk(visitor);\n            }\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_New = DEFNODE(\"New\", null, {\n    $documentation: \"An object instantiation.  Derives from a function call since it has exactly the same properties\"\n}, AST_Call);\n\nvar AST_Sequence = DEFNODE(\"Sequence\", \"expressions\", {\n    $documentation: \"A sequence expression (comma-separated expressions)\",\n    $propdoc: {\n        expressions: \"[AST_Node*] array of expressions (at least two)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expressions.forEach(function(node) {\n                node._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_PropAccess = DEFNODE(\"PropAccess\", \"expression property\", {\n    $documentation: \"Base class for property access expressions, i.e. `a.foo` or `a[\\\"foo\\\"]`\",\n    $propdoc: {\n        expression: \"[AST_Node] the “container” expression\",\n        property: \"[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it's an arbitrary AST_Node\"\n    }\n});\n\nvar AST_Dot = DEFNODE(\"Dot\", \"quote\", {\n    $documentation: \"A dotted property access expression\",\n    $propdoc: {\n        quote: \"[string] the original quote character when transformed from AST_Sub\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Sub = DEFNODE(\"Sub\", null, {\n    $documentation: \"Index-style property access, i.e. `a[\\\"foo\\\"]`\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            this.property._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Unary = DEFNODE(\"Unary\", \"operator expression\", {\n    $documentation: \"Base class for unary expressions\",\n    $propdoc: {\n        operator: \"[string] the operator\",\n        expression: \"[AST_Node] expression that this unary operator applies to\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_UnaryPrefix = DEFNODE(\"UnaryPrefix\", null, {\n    $documentation: \"Unary prefix expression, i.e. `typeof i` or `++i`\"\n}, AST_Unary);\n\nvar AST_UnaryPostfix = DEFNODE(\"UnaryPostfix\", null, {\n    $documentation: \"Unary postfix expression, i.e. `i++`\"\n}, AST_Unary);\n\nvar AST_Binary = DEFNODE(\"Binary\", \"operator left right\", {\n    $documentation: \"Binary expression, i.e. `a + b`\",\n    $propdoc: {\n        left: \"[AST_Node] left-hand side expression\",\n        operator: \"[string] the operator\",\n        right: \"[AST_Node] right-hand side expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.left._walk(visitor);\n            this.right._walk(visitor);\n        });\n    }\n});\n\nvar AST_Conditional = DEFNODE(\"Conditional\", \"condition consequent alternative\", {\n    $documentation: \"Conditional expression using the ternary operator, i.e. `a ? b : c`\",\n    $propdoc: {\n        condition: \"[AST_Node]\",\n        consequent: \"[AST_Node]\",\n        alternative: \"[AST_Node]\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.consequent._walk(visitor);\n            this.alternative._walk(visitor);\n        });\n    }\n});\n\nvar AST_Assign = DEFNODE(\"Assign\", null, {\n    $documentation: \"An assignment expression — `a = b + 5`\",\n}, AST_Binary);\n\nvar AST_DefaultAssign = DEFNODE(\"DefaultAssign\", null, {\n    $documentation: \"A default assignment expression like in `(a = 3) => a`\"\n}, AST_Binary);\n\n/* -----[ LITERALS ]----- */\n\nvar AST_Array = DEFNODE(\"Array\", \"elements\", {\n    $documentation: \"An array literal\",\n    $propdoc: {\n        elements: \"[AST_Node*] array of elements\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var elements = this.elements;\n            for (var i = 0, len = elements.length; i < len; i++) {\n                elements[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_Object = DEFNODE(\"Object\", \"properties\", {\n    $documentation: \"An object literal\",\n    $propdoc: {\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var properties = this.properties;\n            for (var i = 0, len = properties.length; i < len; i++) {\n                properties[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_ObjectProperty = DEFNODE(\"ObjectProperty\", \"key value\", {\n    $documentation: \"Base class for literal object properties\",\n    $propdoc: {\n        key: \"[string|AST_Node] property name. For ObjectKeyVal this is a string. For getters, setters and computed property this is an AST_Node.\",\n        value: \"[AST_Node] property value.  For getters and setters this is an AST_Accessor.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.key instanceof AST_Node)\n                this.key._walk(visitor);\n            this.value._walk(visitor);\n        });\n    }\n});\n\nvar AST_ObjectKeyVal = DEFNODE(\"ObjectKeyVal\", \"quote\", {\n    $documentation: \"A key: value object property\",\n    $propdoc: {\n        quote: \"[string] the original quote character\"\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectSetter = DEFNODE(\"ObjectSetter\", \"quote static\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] whether this is a static setter (classes only)\"\n    },\n    $documentation: \"An object setter property\",\n}, AST_ObjectProperty);\n\nvar AST_ObjectGetter = DEFNODE(\"ObjectGetter\", \"quote static\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] whether this is a static getter (classes only)\"\n    },\n    $documentation: \"An object getter property\",\n}, AST_ObjectProperty);\n\nvar AST_ConciseMethod = DEFNODE(\"ConciseMethod\", \"quote static is_generator async\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] is this method static (classes only)\",\n        is_generator: \"[boolean] is this a generator method\",\n        async: \"[boolean] is this method async\",\n    },\n    $documentation: \"An ES6 concise method inside an object or class\"\n}, AST_ObjectProperty);\n\nvar AST_Class = DEFNODE(\"Class\", \"name extends properties inlined\", {\n    $propdoc: {\n        name: \"[AST_SymbolClass|AST_SymbolDefClass?] optional class name.\",\n        extends: \"[AST_Node]? optional parent class\",\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    $documentation: \"An ES6 class\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.name) {\n                this.name._walk(visitor);\n            }\n            if (this.extends) {\n                this.extends._walk(visitor);\n            }\n            this.properties.forEach(function(prop) {\n                prop._walk(visitor);\n            });\n        });\n    },\n}, AST_Scope);\n\nvar AST_DefClass = DEFNODE(\"DefClass\", null, {\n    $documentation: \"A class definition\",\n}, AST_Class);\n\nvar AST_ClassExpression = DEFNODE(\"ClassExpression\", null, {\n    $documentation: \"A class expression.\"\n}, AST_Class);\n\nvar AST_Symbol = DEFNODE(\"Symbol\", \"scope name thedef\", {\n    $propdoc: {\n        name: \"[string] name of this symbol\",\n        scope: \"[AST_Scope/S] the current scope (not necessarily the definition scope)\",\n        thedef: \"[SymbolDef/S] the definition of this symbol\"\n    },\n    $documentation: \"Base class for all symbols\"\n});\n\nvar AST_NewTarget = DEFNODE(\"NewTarget\", null, {\n    $documentation: \"A reference to new.target\"\n});\n\nvar AST_SymbolDeclaration = DEFNODE(\"SymbolDeclaration\", \"init\", {\n    $documentation: \"A declaration symbol (symbol in var/const, function name or argument, symbol in catch)\",\n}, AST_Symbol);\n\nvar AST_SymbolVar = DEFNODE(\"SymbolVar\", null, {\n    $documentation: \"Symbol defining a variable\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolBlockDeclaration = DEFNODE(\"SymbolBlockDeclaration\", null, {\n    $documentation: \"Base class for block-scoped declaration symbols\"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolConst = DEFNODE(\"SymbolConst\", null, {\n    $documentation: \"A constant declaration\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolLet = DEFNODE(\"SymbolLet\", null, {\n    $documentation: \"A block-scoped `let` declaration\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolFunarg = DEFNODE(\"SymbolFunarg\", null, {\n    $documentation: \"Symbol naming a function argument\",\n}, AST_SymbolVar);\n\nvar AST_SymbolDefun = DEFNODE(\"SymbolDefun\", null, {\n    $documentation: \"Symbol defining a function\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolMethod = DEFNODE(\"SymbolMethod\", null, {\n    $documentation: \"Symbol in an object defining a method\",\n}, AST_Symbol);\n\nvar AST_SymbolLambda = DEFNODE(\"SymbolLambda\", null, {\n    $documentation: \"Symbol naming a function expression\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolDefClass = DEFNODE(\"SymbolDefClass\", null, {\n    $documentation: \"Symbol naming a class's name in a class declaration. Lexically scoped to its containing scope, and accessible within the class.\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolClass = DEFNODE(\"SymbolClass\", null, {\n    $documentation: \"Symbol naming a class's name. Lexically scoped to the class.\"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolCatch = DEFNODE(\"SymbolCatch\", null, {\n    $documentation: \"Symbol naming the exception in catch\",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImport = DEFNODE(\"SymbolImport\", null, {\n    $documentation: \"Symbol referring to an imported name\",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImportForeign = DEFNODE(\"SymbolImportForeign\", null, {\n    $documentation: \"A symbol imported from a module, but it is defined in the other module, and its real name is irrelevant for this module's purposes\",\n}, AST_Symbol);\n\nvar AST_Label = DEFNODE(\"Label\", \"references\", {\n    $documentation: \"Symbol naming a label (declaration)\",\n    $propdoc: {\n        references: \"[AST_LoopControl*] a list of nodes referring to this label\"\n    },\n    initialize: function() {\n        this.references = [];\n        this.thedef = this;\n    }\n}, AST_Symbol);\n\nvar AST_SymbolRef = DEFNODE(\"SymbolRef\", null, {\n    $documentation: \"Reference to some symbol (not definition/declaration)\",\n}, AST_Symbol);\n\nvar AST_SymbolExport = DEFNODE(\"SymbolExport\", null, {\n    $documentation: \"Symbol referring to a name to export\",\n}, AST_SymbolRef);\n\nvar AST_SymbolExportForeign = DEFNODE(\"SymbolExportForeign\", null, {\n    $documentation: \"A symbol exported from this module, but it is used in the other module, and its real name is irrelevant for this module's purposes\",\n}, AST_Symbol);\n\nvar AST_LabelRef = DEFNODE(\"LabelRef\", null, {\n    $documentation: \"Reference to a label symbol\",\n}, AST_Symbol);\n\nvar AST_This = DEFNODE(\"This\", null, {\n    $documentation: \"The `this` symbol\",\n}, AST_Symbol);\n\nvar AST_Super = DEFNODE(\"Super\", null, {\n    $documentation: \"The `super` symbol\",\n}, AST_This);\n\nvar AST_Constant = DEFNODE(\"Constant\", null, {\n    $documentation: \"Base class for all constants\",\n    getValue: function() {\n        return this.value;\n    }\n});\n\nvar AST_String = DEFNODE(\"String\", \"value quote\", {\n    $documentation: \"A string literal\",\n    $propdoc: {\n        value: \"[string] the contents of this string\",\n        quote: \"[string] the original quote character\"\n    }\n}, AST_Constant);\n\nvar AST_Number = DEFNODE(\"Number\", \"value literal\", {\n    $documentation: \"A number literal\",\n    $propdoc: {\n        value: \"[number] the numeric value\",\n        literal: \"[string] numeric value as string (optional)\"\n    }\n}, AST_Constant);\n\nvar AST_BigInt = DEFNODE(\"BigInt\", \"value\", {\n    $documentation: \"A big int literal\",\n    $propdoc: {\n        value: \"[string] big int value\"\n    }\n}, AST_Constant);\n\nvar AST_RegExp = DEFNODE(\"RegExp\", \"value\", {\n    $documentation: \"A regexp literal\",\n    $propdoc: {\n        value: \"[RegExp] the actual regexp\",\n    }\n}, AST_Constant);\n\nvar AST_Atom = DEFNODE(\"Atom\", null, {\n    $documentation: \"Base class for atoms\",\n}, AST_Constant);\n\nvar AST_Null = DEFNODE(\"Null\", null, {\n    $documentation: \"The `null` atom\",\n    value: null\n}, AST_Atom);\n\nvar AST_NaN = DEFNODE(\"NaN\", null, {\n    $documentation: \"The impossible value\",\n    value: 0/0\n}, AST_Atom);\n\nvar AST_Undefined = DEFNODE(\"Undefined\", null, {\n    $documentation: \"The `undefined` value\",\n    value: (function() {}())\n}, AST_Atom);\n\nvar AST_Hole = DEFNODE(\"Hole\", null, {\n    $documentation: \"A hole in an array\",\n    value: (function() {}())\n}, AST_Atom);\n\nvar AST_Infinity = DEFNODE(\"Infinity\", null, {\n    $documentation: \"The `Infinity` value\",\n    value: 1/0\n}, AST_Atom);\n\nvar AST_Boolean = DEFNODE(\"Boolean\", null, {\n    $documentation: \"Base class for booleans\",\n}, AST_Atom);\n\nvar AST_False = DEFNODE(\"False\", null, {\n    $documentation: \"The `false` atom\",\n    value: false\n}, AST_Boolean);\n\nvar AST_True = DEFNODE(\"True\", null, {\n    $documentation: \"The `true` atom\",\n    value: true\n}, AST_Boolean);\n\nvar AST_Await = DEFNODE(\"Await\", \"expression\", {\n    $documentation: \"An `await` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the mandatory expression being awaited\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_Yield = DEFNODE(\"Yield\", \"expression is_star\", {\n    $documentation: \"A `yield` statement\",\n    $propdoc: {\n        expression: \"[AST_Node?] the value returned or thrown by this statement; could be null (representing undefined) but only when is_star is set to false\",\n        is_star: \"[Boolean] Whether this is a yield or yield* statement\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.expression && function() {\n            this.expression._walk(visitor);\n        });\n    }\n});\n\n/* -----[ TreeWalker ]----- */\n\nclass TreeWalker {\n    constructor(callback) {\n        this.visit = callback;\n        this.stack = [];\n        this.directives = Object.create(null);\n    }\n\n    _visit(node, descend) {\n        this.push(node);\n        var ret = this.visit(node, descend ? function() {\n            descend.call(node);\n        } : noop);\n        if (!ret && descend) {\n            descend.call(node);\n        }\n        this.pop();\n        return ret;\n    }\n\n    parent(n) {\n        return this.stack[this.stack.length - 2 - (n || 0)];\n    }\n\n    push(node) {\n        if (node instanceof AST_Lambda) {\n            this.directives = Object.create(this.directives);\n        } else if (node instanceof AST_Directive && !this.directives[node.value]) {\n            this.directives[node.value] = node;\n        } else if (node instanceof AST_Class) {\n            this.directives = Object.create(this.directives);\n            if (!this.directives[\"use strict\"]) {\n                this.directives[\"use strict\"] = node;\n            }\n        }\n        this.stack.push(node);\n    }\n\n    pop() {\n        var node = this.stack.pop();\n        if (node instanceof AST_Lambda || node instanceof AST_Class) {\n            this.directives = Object.getPrototypeOf(this.directives);\n        }\n    }\n\n    self() {\n        return this.stack[this.stack.length - 1];\n    }\n\n    find_parent(type) {\n        var stack = this.stack;\n        for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof type) return x;\n        }\n    }\n\n    has_directive(type) {\n        var dir = this.directives[type];\n        if (dir) return dir;\n        var node = this.stack[this.stack.length - 1];\n        if (node instanceof AST_Scope && node.body) {\n            for (var i = 0; i < node.body.length; ++i) {\n                var st = node.body[i];\n                if (!(st instanceof AST_Directive)) break;\n                if (st.value == type) return st;\n            }\n        }\n    }\n\n    loopcontrol_target(node) {\n        var stack = this.stack;\n        if (node.label) for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_LabeledStatement && x.label.name == node.label.name)\n                return x.body;\n        } else for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_IterationStatement\n                || node instanceof AST_Break && x instanceof AST_Switch)\n                return x;\n        }\n    }\n}\n\n// Tree transformer helpers.\nclass TreeTransformer extends TreeWalker {\n    constructor(before, after) {\n        super();\n        this.before = before;\n        this.after = after;\n    }\n}\n\nexport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Atom,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DWLoop,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Infinity,\n    AST_IterationStatement,\n    AST_Jump,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_NaN,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeTransformer,\n    TreeWalker,\n    walk_body,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    AST_Array,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_Conditional,\n    AST_Definitions,\n    AST_Destructuring,\n    AST_Do,\n    AST_Dot,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_If,\n    AST_Import,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_Node,\n    AST_Object,\n    AST_ObjectProperty,\n    AST_PrefixedTemplateString,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Sub,\n    AST_Switch,\n    AST_TemplateString,\n    AST_Try,\n    AST_Unary,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\nimport {\n    MAP,\n    noop,\n} from \"./utils/index.js\";\n\nfunction def_transform(node, descend) {\n    node.DEFMETHOD(\"transform\", function(tw, in_list) {\n        var x, y;\n        tw.push(this);\n        if (tw.before) x = tw.before(this, descend, in_list);\n        if (x === undefined) {\n            x = this;\n            descend(x, tw);\n            if (tw.after) {\n                y = tw.after(x, in_list);\n                if (y !== undefined) x = y;\n            }\n        }\n        tw.pop();\n        return x;\n    });\n}\n\nfunction do_list(list, tw) {\n    return MAP(list, function(node) {\n        return node.transform(tw, true);\n    });\n}\n\ndef_transform(AST_Node, noop);\n\ndef_transform(AST_LabeledStatement, function(self, tw) {\n    self.label = self.label.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_SimpleStatement, function(self, tw) {\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_Block, function(self, tw) {\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Do, function(self, tw) {\n    self.body = self.body.transform(tw);\n    self.condition = self.condition.transform(tw);\n});\n\ndef_transform(AST_While, function(self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_For, function(self, tw) {\n    if (self.init) self.init = self.init.transform(tw);\n    if (self.condition) self.condition = self.condition.transform(tw);\n    if (self.step) self.step = self.step.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_ForIn, function(self, tw) {\n    self.init = self.init.transform(tw);\n    self.object = self.object.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_With, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_Exit, function(self, tw) {\n    if (self.value) self.value = self.value.transform(tw);\n});\n\ndef_transform(AST_LoopControl, function(self, tw) {\n    if (self.label) self.label = self.label.transform(tw);\n});\n\ndef_transform(AST_If, function(self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.body = self.body.transform(tw);\n    if (self.alternative) self.alternative = self.alternative.transform(tw);\n});\n\ndef_transform(AST_Switch, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Case, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Try, function(self, tw) {\n    self.body = do_list(self.body, tw);\n    if (self.bcatch) self.bcatch = self.bcatch.transform(tw);\n    if (self.bfinally) self.bfinally = self.bfinally.transform(tw);\n});\n\ndef_transform(AST_Catch, function(self, tw) {\n    if (self.argname) self.argname = self.argname.transform(tw);\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Definitions, function(self, tw) {\n    self.definitions = do_list(self.definitions, tw);\n});\n\ndef_transform(AST_VarDef, function(self, tw) {\n    self.name = self.name.transform(tw);\n    if (self.value) self.value = self.value.transform(tw);\n});\n\ndef_transform(AST_Destructuring, function(self, tw) {\n    self.names = do_list(self.names, tw);\n});\n\ndef_transform(AST_Lambda, function(self, tw) {\n    if (self.name) self.name = self.name.transform(tw);\n    self.argnames = do_list(self.argnames, tw);\n    if (self.body instanceof AST_Node) {\n        self.body = self.body.transform(tw);\n    } else {\n        /*\n        console.trace()\n        process.exit(0)\n        */\n        self.body = do_list(self.body, tw);\n    }\n});\n\ndef_transform(AST_Call, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.args = do_list(self.args, tw);\n});\n\ndef_transform(AST_Sequence, function(self, tw) {\n    self.expressions = do_list(self.expressions, tw);\n});\n\ndef_transform(AST_Dot, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Sub, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.property = self.property.transform(tw);\n});\n\ndef_transform(AST_Yield, function(self, tw) {\n    if (self.expression) self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Await, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Unary, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Binary, function(self, tw) {\n    self.left = self.left.transform(tw);\n    self.right = self.right.transform(tw);\n});\n\ndef_transform(AST_Conditional, function(self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.consequent = self.consequent.transform(tw);\n    self.alternative = self.alternative.transform(tw);\n});\n\ndef_transform(AST_Array, function(self, tw) {\n    self.elements = do_list(self.elements, tw);\n});\n\ndef_transform(AST_Object, function(self, tw) {\n    self.properties = do_list(self.properties, tw);\n});\n\ndef_transform(AST_ObjectProperty, function(self, tw) {\n    if (self.key instanceof AST_Node) {\n        self.key = self.key.transform(tw);\n    }\n    self.value = self.value.transform(tw);\n});\n\ndef_transform(AST_Class, function(self, tw) {\n    if (self.name) self.name = self.name.transform(tw);\n    if (self.extends) self.extends = self.extends.transform(tw);\n    self.properties = do_list(self.properties, tw);\n});\n\ndef_transform(AST_Expansion, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_NameMapping, function(self, tw) {\n    self.foreign_name = self.foreign_name.transform(tw);\n    self.name = self.name.transform(tw);\n});\n\ndef_transform(AST_Import, function(self, tw) {\n    if (self.imported_name) self.imported_name = self.imported_name.transform(tw);\n    if (self.imported_names) do_list(self.imported_names, tw);\n    self.module_name = self.module_name.transform(tw);\n});\n\ndef_transform(AST_Export, function(self, tw) {\n    if (self.exported_definition) self.exported_definition = self.exported_definition.transform(tw);\n    if (self.exported_value) self.exported_value = self.exported_value.transform(tw);\n    if (self.exported_names) do_list(self.exported_names, tw);\n    if (self.module_name) self.module_name = self.module_name.transform(tw);\n});\n\ndef_transform(AST_TemplateString, function(self, tw) {\n    self.segments = do_list(self.segments, tw);\n});\n\ndef_transform(AST_PrefixedTemplateString, function(self, tw) {\n    self.prefix = self.prefix.transform(tw);\n    self.template_string = self.template_string.transform(tw);\n});\n\n","import {\n    AST_Binary,\n    AST_Conditional,\n    AST_Dot,\n    AST_Sequence,\n    AST_Statement,\n    AST_Sub,\n    AST_UnaryPostfix,\n    AST_PrefixedTemplateString\n} from \"../ast.js\";\n\n// return true if the node at the top of the stack (that means the\n// innermost node in the current output) is lexically the first in\n// a statement.\nfunction first_in_statement(stack) {\n    let node = stack.parent(-1);\n    for (let i = 0, p; p = stack.parent(i); i++) {\n        if (p instanceof AST_Statement && p.body === node)\n            return true;\n        if ((p instanceof AST_Sequence && p.expressions[0] === node) ||\n            (p.TYPE === \"Call\" && p.expression === node) ||\n            (p instanceof AST_PrefixedTemplateString && p.prefix === node) ||\n            (p instanceof AST_Dot && p.expression === node) ||\n            (p instanceof AST_Sub && p.expression === node) ||\n            (p instanceof AST_Conditional && p.condition === node) ||\n            (p instanceof AST_Binary && p.left === node) ||\n            (p instanceof AST_UnaryPostfix && p.expression === node)\n        ) {\n            node = p;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport { first_in_statement };\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    defaults,\n    makePredicate,\n    noop,\n    regexp_source_fix,\n    return_false,\n    return_true,\n} from \"./utils/index.js\";\nimport { first_in_statement } from \"./utils/first_in_statement.js\";\nimport {\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Jump,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Toplevel,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeWalker,\n} from \"./ast.js\";\nimport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_identifier_string,\n    is_surrogate_pair_head,\n    is_surrogate_pair_tail,\n    PRECEDENCE,\n    RESERVED_WORDS,\n} from \"./parse.js\";\n\nvar EXPECT_DIRECTIVE = /^$|[;{][\\s\\n]*$/;\nconst CODE_LINE_BREAK = 10;\nconst CODE_SPACE = 32;\n\nfunction is_some_comments(comment) {\n    // multiline comment\n    return comment.type == \"comment2\" && /@preserve|@license|@cc_on/i.test(comment.value);\n}\n\nfunction OutputStream(options) {\n\n    var readonly = !options;\n    options = defaults(options, {\n        ascii_only       : false,\n        beautify         : false,\n        braces           : false,\n        comments         : false,\n        ecma             : 5,\n        ie8              : false,\n        indent_level     : 4,\n        indent_start     : 0,\n        inline_script    : true,\n        keep_quoted_props: false,\n        max_line_len     : false,\n        preamble         : null,\n        quote_keys       : false,\n        quote_style      : 0,\n        safari10         : false,\n        semicolons       : true,\n        shebang          : true,\n        shorthand        : undefined,\n        source_map       : null,\n        webkit           : false,\n        width            : 80,\n        wrap_iife        : false,\n    }, true);\n\n    if (options.shorthand === undefined)\n        options.shorthand = options.ecma > 5;\n\n    // Convert comment option to RegExp if neccessary and set up comments filter\n    var comment_filter = return_false; // Default case, throw all comments away\n    if (options.comments) {\n        var comments = options.comments;\n        if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n            var regex_pos = options.comments.lastIndexOf(\"/\");\n            comments = new RegExp(\n                options.comments.substr(1, regex_pos - 1),\n                options.comments.substr(regex_pos + 1)\n            );\n        }\n        if (comments instanceof RegExp) {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments.test(comment.value);\n            };\n        } else if (typeof comments === \"function\") {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments(this, comment);\n            };\n        } else if (comments === \"some\") {\n            comment_filter = is_some_comments;\n        } else { // NOTE includes \"all\" option\n            comment_filter = return_true;\n        }\n    }\n\n    var indentation = 0;\n    var current_col = 0;\n    var current_line = 1;\n    var current_pos = 0;\n    var OUTPUT = \"\";\n    let printed_comments = new WeakSet();\n\n    var to_utf8 = options.ascii_only ? function(str, identifier) {\n        if (options.ecma >= 6) {\n            str = str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]/g, function(ch) {\n                var code = get_full_char_code(ch, 0).toString(16);\n                return \"\\\\u{\" + code + \"}\";\n            });\n        }\n        return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function(ch) {\n            var code = ch.charCodeAt(0).toString(16);\n            if (code.length <= 2 && !identifier) {\n                while (code.length < 2) code = \"0\" + code;\n                return \"\\\\x\" + code;\n            } else {\n                while (code.length < 4) code = \"0\" + code;\n                return \"\\\\u\" + code;\n            }\n        });\n    } : function(str) {\n        var s = \"\";\n        for (var i = 0, len = str.length; i < len; i++) {\n            if (is_surrogate_pair_head(str[i]) && !is_surrogate_pair_tail(str[i + 1])\n                || is_surrogate_pair_tail(str[i]) && !is_surrogate_pair_head(str[i - 1])) {\n                s += \"\\\\u\" + str.charCodeAt(i).toString(16);\n            } else {\n                s += str[i];\n            }\n        }\n        return s;\n    };\n\n    function make_string(str, quote) {\n        var dq = 0, sq = 0;\n        str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g,\n          function(s, i) {\n            switch (s) {\n              case '\"': ++dq; return '\"';\n              case \"'\": ++sq; return \"'\";\n              case \"\\\\\": return \"\\\\\\\\\";\n              case \"\\n\": return \"\\\\n\";\n              case \"\\r\": return \"\\\\r\";\n              case \"\\t\": return \"\\\\t\";\n              case \"\\b\": return \"\\\\b\";\n              case \"\\f\": return \"\\\\f\";\n              case \"\\x0B\": return options.ie8 ? \"\\\\x0B\" : \"\\\\v\";\n              case \"\\u2028\": return \"\\\\u2028\";\n              case \"\\u2029\": return \"\\\\u2029\";\n              case \"\\ufeff\": return \"\\\\ufeff\";\n              case \"\\0\":\n                  return /[0-9]/.test(get_full_char(str, i+1)) ? \"\\\\x00\" : \"\\\\0\";\n            }\n            return s;\n        });\n        function quote_single() {\n            return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n        }\n        function quote_double() {\n            return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n        }\n        function quote_template() {\n            return \"`\" + str.replace(/`/g, \"\\\\`\") + \"`\";\n        }\n        str = to_utf8(str);\n        if (quote === \"`\") return quote_template();\n        switch (options.quote_style) {\n          case 1:\n            return quote_single();\n          case 2:\n            return quote_double();\n          case 3:\n            return quote == \"'\" ? quote_single() : quote_double();\n          default:\n            return dq > sq ? quote_single() : quote_double();\n        }\n    }\n\n    function encode_string(str, quote) {\n        var ret = make_string(str, quote);\n        if (options.inline_script) {\n            ret = ret.replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/$1$2\");\n            ret = ret.replace(/\\x3c!--/g, \"\\\\x3c!--\");\n            ret = ret.replace(/--\\x3e/g, \"--\\\\x3e\");\n        }\n        return ret;\n    }\n\n    function make_name(name) {\n        name = name.toString();\n        name = to_utf8(name, true);\n        return name;\n    }\n\n    function make_indent(back) {\n        return \" \".repeat(options.indent_start + indentation - back * options.indent_level);\n    }\n\n    /* -----[ beautification/minification ]----- */\n\n    var has_parens = false;\n    var might_need_space = false;\n    var might_need_semicolon = false;\n    var might_add_newline = 0;\n    var need_newline_indented = false;\n    var need_space = false;\n    var newline_insert = -1;\n    var last = \"\";\n    var mapping_token, mapping_name, mappings = options.source_map && [];\n\n    var do_add_mapping = mappings ? function() {\n        mappings.forEach(function(mapping) {\n            try {\n                options.source_map.add(\n                    mapping.token.file,\n                    mapping.line, mapping.col,\n                    mapping.token.line, mapping.token.col,\n                    !mapping.name && mapping.token.type == \"name\" ? mapping.token.value : mapping.name\n                );\n            } catch(ex) {\n                mapping.token.file != null && AST_Node.warn(\"Couldn't figure out mapping for {file}:{line},{col} → {cline},{ccol} [{name}]\", {\n                    file: mapping.token.file,\n                    line: mapping.token.line,\n                    col: mapping.token.col,\n                    cline: mapping.line,\n                    ccol: mapping.col,\n                    name: mapping.name || \"\"\n                });\n            }\n        });\n        mappings = [];\n    } : noop;\n\n    var ensure_line_len = options.max_line_len ? function() {\n        if (current_col > options.max_line_len) {\n            if (might_add_newline) {\n                var left = OUTPUT.slice(0, might_add_newline);\n                var right = OUTPUT.slice(might_add_newline);\n                if (mappings) {\n                    var delta = right.length - current_col;\n                    mappings.forEach(function(mapping) {\n                        mapping.line++;\n                        mapping.col += delta;\n                    });\n                }\n                OUTPUT = left + \"\\n\" + right;\n                current_line++;\n                current_pos++;\n                current_col = right.length;\n            }\n            if (current_col > options.max_line_len) {\n                AST_Node.warn(\"Output exceeds {max_line_len} characters\", options);\n            }\n        }\n        if (might_add_newline) {\n            might_add_newline = 0;\n            do_add_mapping();\n        }\n    } : noop;\n\n    var requireSemicolonChars = makePredicate(\"( [ + * / - , . `\");\n\n    function print(str) {\n        str = String(str);\n        var ch = get_full_char(str, 0);\n        if (need_newline_indented && ch) {\n            need_newline_indented = false;\n            if (ch !== \"\\n\") {\n                print(\"\\n\");\n                indent();\n            }\n        }\n        if (need_space && ch) {\n            need_space = false;\n            if (!/[\\s;})]/.test(ch)) {\n                space();\n            }\n        }\n        newline_insert = -1;\n        var prev = last.charAt(last.length - 1);\n        if (might_need_semicolon) {\n            might_need_semicolon = false;\n\n            if (prev === \":\" && ch === \"}\" || (!ch || !\";}\".includes(ch)) && prev !== \";\") {\n                if (options.semicolons || requireSemicolonChars.has(ch)) {\n                    OUTPUT += \";\";\n                    current_col++;\n                    current_pos++;\n                } else {\n                    ensure_line_len();\n                    if (current_col > 0) {\n                        OUTPUT += \"\\n\";\n                        current_pos++;\n                        current_line++;\n                        current_col = 0;\n                    }\n\n                    if (/^\\s+$/.test(str)) {\n                        // reset the semicolon flag, since we didn't print one\n                        // now and might still have to later\n                        might_need_semicolon = true;\n                    }\n                }\n\n                if (!options.beautify)\n                    might_need_space = false;\n            }\n        }\n\n        if (might_need_space) {\n            if ((is_identifier_char(prev)\n                    && (is_identifier_char(ch) || ch == \"\\\\\"))\n                || (ch == \"/\" && ch == prev)\n                || ((ch == \"+\" || ch == \"-\") && ch == last)\n            ) {\n                OUTPUT += \" \";\n                current_col++;\n                current_pos++;\n            }\n            might_need_space = false;\n        }\n\n        if (mapping_token) {\n            mappings.push({\n                token: mapping_token,\n                name: mapping_name,\n                line: current_line,\n                col: current_col\n            });\n            mapping_token = false;\n            if (!might_add_newline) do_add_mapping();\n        }\n\n        OUTPUT += str;\n        has_parens = str[str.length - 1] == \"(\";\n        current_pos += str.length;\n        var a = str.split(/\\r?\\n/), n = a.length - 1;\n        current_line += n;\n        current_col += a[0].length;\n        if (n > 0) {\n            ensure_line_len();\n            current_col = a[n].length;\n        }\n        last = str;\n    }\n\n    var star = function() {\n        print(\"*\");\n    };\n\n    var space = options.beautify ? function() {\n        print(\" \");\n    } : function() {\n        might_need_space = true;\n    };\n\n    var indent = options.beautify ? function(half) {\n        if (options.beautify) {\n            print(make_indent(half ? 0.5 : 0));\n        }\n    } : noop;\n\n    var with_indent = options.beautify ? function(col, cont) {\n        if (col === true) col = next_indent();\n        var save_indentation = indentation;\n        indentation = col;\n        var ret = cont();\n        indentation = save_indentation;\n        return ret;\n    } : function(col, cont) { return cont(); };\n\n    var newline = options.beautify ? function() {\n        if (newline_insert < 0) return print(\"\\n\");\n        if (OUTPUT[newline_insert] != \"\\n\") {\n            OUTPUT = OUTPUT.slice(0, newline_insert) + \"\\n\" + OUTPUT.slice(newline_insert);\n            current_pos++;\n            current_line++;\n        }\n        newline_insert++;\n    } : options.max_line_len ? function() {\n        ensure_line_len();\n        might_add_newline = OUTPUT.length;\n    } : noop;\n\n    var semicolon = options.beautify ? function() {\n        print(\";\");\n    } : function() {\n        might_need_semicolon = true;\n    };\n\n    function force_semicolon() {\n        might_need_semicolon = false;\n        print(\";\");\n    }\n\n    function next_indent() {\n        return indentation + options.indent_level;\n    }\n\n    function with_block(cont) {\n        var ret;\n        print(\"{\");\n        newline();\n        with_indent(next_indent(), function() {\n            ret = cont();\n        });\n        indent();\n        print(\"}\");\n        return ret;\n    }\n\n    function with_parens(cont) {\n        print(\"(\");\n        //XXX: still nice to have that for argument lists\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\")\");\n        return ret;\n    }\n\n    function with_square(cont) {\n        print(\"[\");\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\"]\");\n        return ret;\n    }\n\n    function comma() {\n        print(\",\");\n        space();\n    }\n\n    function colon() {\n        print(\":\");\n        space();\n    }\n\n    var add_mapping = mappings ? function(token, name) {\n        mapping_token = token;\n        mapping_name = name;\n    } : noop;\n\n    function get() {\n        if (might_add_newline) {\n            ensure_line_len();\n        }\n        return OUTPUT;\n    }\n\n    function has_nlb() {\n        let n = OUTPUT.length - 1;\n        while (n >= 0) {\n            const code = OUTPUT.charCodeAt(n);\n            if (code === CODE_LINE_BREAK) {\n                return true;\n            }\n\n            if (code !== CODE_SPACE) {\n                return false;\n            }\n            n--;\n        }\n        return true;\n    }\n\n    function prepend_comments(node) {\n        var self = this;\n        var start = node.start;\n        if (!start) return;\n        var printed_comments = self.printed_comments();\n        if (start.comments_before && printed_comments.has(start.comments_before)) return;\n        var comments = start.comments_before;\n        if (!comments) {\n            comments = start.comments_before = [];\n        }\n        printed_comments.add(comments);\n\n        if (node instanceof AST_Exit && node.value) {\n            var tw = new TreeWalker(function(node) {\n                var parent = tw.parent();\n                if (parent instanceof AST_Exit\n                    || parent instanceof AST_Binary && parent.left === node\n                    || parent.TYPE == \"Call\" && parent.expression === node\n                    || parent instanceof AST_Conditional && parent.condition === node\n                    || parent instanceof AST_Dot && parent.expression === node\n                    || parent instanceof AST_Sequence && parent.expressions[0] === node\n                    || parent instanceof AST_Sub && parent.expression === node\n                    || parent instanceof AST_UnaryPostfix) {\n                    if (!node.start) return;\n                    var text = node.start.comments_before;\n                    if (text && !printed_comments.has(text)) {\n                        printed_comments.add(text);\n                        comments = comments.concat(text);\n                    }\n                } else {\n                    return true;\n                }\n            });\n            tw.push(node);\n            node.value.walk(tw);\n        }\n\n        if (current_pos == 0) {\n            if (comments.length > 0 && options.shebang && comments[0].type === \"comment5\"\n                && !printed_comments.has(comments[0])) {\n                print(\"#!\" + comments.shift().value + \"\\n\");\n                indent();\n            }\n            var preamble = options.preamble;\n            if (preamble) {\n                print(preamble.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g, \"\\n\"));\n            }\n        }\n\n        comments = comments.filter(comment_filter, node).filter(c => !printed_comments.has(c));\n        if (comments.length == 0) return;\n        var last_nlb = has_nlb();\n        comments.forEach(function(c, i) {\n            printed_comments.add(c);\n            if (!last_nlb) {\n                if (c.nlb) {\n                    print(\"\\n\");\n                    indent();\n                    last_nlb = true;\n                } else if (i > 0) {\n                    space();\n                }\n            }\n            if (/comment[134]/.test(c.type)) {\n                print(\"//\" + c.value.replace(/[@#]__PURE__/g, \" \") + \"\\n\");\n                indent();\n                last_nlb = true;\n            } else if (c.type == \"comment2\") {\n                print(\"/*\" + c.value.replace(/[@#]__PURE__/g, \" \") + \"*/\");\n                last_nlb = false;\n            }\n        });\n        if (!last_nlb) {\n            if (start.nlb) {\n                print(\"\\n\");\n                indent();\n            } else {\n                space();\n            }\n        }\n    }\n\n    function append_comments(node, tail) {\n        var self = this;\n        var token = node.end;\n        if (!token) return;\n        var printed_comments = self.printed_comments();\n        var comments = token[tail ? \"comments_before\" : \"comments_after\"];\n        if (!comments || printed_comments.has(comments)) return;\n        if (!(node instanceof AST_Statement || comments.every((c) =>\n            !/comment[134]/.test(c.type)\n        ))) return;\n        printed_comments.add(comments);\n        var insert = OUTPUT.length;\n        comments.filter(comment_filter, node).forEach(function(c, i) {\n            if (printed_comments.has(c)) return;\n            printed_comments.add(c);\n            need_space = false;\n            if (need_newline_indented) {\n                print(\"\\n\");\n                indent();\n                need_newline_indented = false;\n            } else if (c.nlb && (i > 0 || !has_nlb())) {\n                print(\"\\n\");\n                indent();\n            } else if (i > 0 || !tail) {\n                space();\n            }\n            if (/comment[134]/.test(c.type)) {\n                print(\"//\" + c.value.replace(/[@#]__PURE__/g, \" \"));\n                need_newline_indented = true;\n            } else if (c.type == \"comment2\") {\n                print(\"/*\" + c.value.replace(/[@#]__PURE__/g, \" \") + \"*/\");\n                need_space = true;\n            }\n        });\n        if (OUTPUT.length > insert) newline_insert = insert;\n    }\n\n    var stack = [];\n    return {\n        get             : get,\n        toString        : get,\n        indent          : indent,\n        indentation     : function() { return indentation; },\n        current_width   : function() { return current_col - indentation; },\n        should_break    : function() { return options.width && this.current_width() >= options.width; },\n        has_parens      : function() { return has_parens; },\n        newline         : newline,\n        print           : print,\n        star            : star,\n        space           : space,\n        comma           : comma,\n        colon           : colon,\n        last            : function() { return last; },\n        semicolon       : semicolon,\n        force_semicolon : force_semicolon,\n        to_utf8         : to_utf8,\n        print_name      : function(name) { print(make_name(name)); },\n        print_string    : function(str, quote, escape_directive) {\n            var encoded = encode_string(str, quote);\n            if (escape_directive === true && !encoded.includes(\"\\\\\")) {\n                // Insert semicolons to break directive prologue\n                if (!EXPECT_DIRECTIVE.test(OUTPUT)) {\n                    force_semicolon();\n                }\n                force_semicolon();\n            }\n            print(encoded);\n        },\n        print_template_string_chars: function(str) {\n            var encoded = encode_string(str, \"`\").replace(/\\${/g, \"\\\\${\");\n            return print(encoded.substr(1, encoded.length - 2));\n        },\n        encode_string   : encode_string,\n        next_indent     : next_indent,\n        with_indent     : with_indent,\n        with_block      : with_block,\n        with_parens     : with_parens,\n        with_square     : with_square,\n        add_mapping     : add_mapping,\n        option          : function(opt) { return options[opt]; },\n        printed_comments: () => printed_comments,\n        prepend_comments: readonly ? noop : prepend_comments,\n        append_comments : readonly || comment_filter === return_false ? noop : append_comments,\n        line            : function() { return current_line; },\n        col             : function() { return current_col; },\n        pos             : function() { return current_pos; },\n        push_node       : function(node) { stack.push(node); },\n        pop_node        : function() { return stack.pop(); },\n        parent          : function(n) {\n            return stack[stack.length - 2 - (n || 0)];\n        }\n    };\n\n}\n\n/* -----[ code generators ]----- */\n\n(function() {\n\n    /* -----[ utils ]----- */\n\n    function DEFPRINT(nodetype, generator) {\n        nodetype.DEFMETHOD(\"_codegen\", generator);\n    }\n\n    var in_directive = false;\n    var active_scope = null;\n    var use_asm = null;\n\n    AST_Node.DEFMETHOD(\"print\", function(stream, force_parens) {\n        var self = this, generator = self._codegen;\n        if (self instanceof AST_Scope) {\n            active_scope = self;\n        } else if (!use_asm && self instanceof AST_Directive && self.value == \"use asm\") {\n            use_asm = active_scope;\n        }\n        function doit() {\n            stream.prepend_comments(self);\n            self.add_source_map(stream);\n            generator(self, stream);\n            stream.append_comments(self);\n        }\n        stream.push_node(self);\n        if (force_parens || self.needs_parens(stream)) {\n            stream.with_parens(doit);\n        } else {\n            doit();\n        }\n        stream.pop_node();\n        if (self === use_asm) {\n            use_asm = null;\n        }\n    });\n    AST_Node.DEFMETHOD(\"_print\", AST_Node.prototype.print);\n\n    AST_Node.DEFMETHOD(\"print_to_string\", function(options) {\n        var s = OutputStream(options);\n        this.print(s);\n        return s.get();\n    });\n\n    /* -----[ PARENTHESES ]----- */\n\n    function PARENS(nodetype, func) {\n        if (Array.isArray(nodetype)) {\n            nodetype.forEach(function(nodetype) {\n                PARENS(nodetype, func);\n            });\n        } else {\n            nodetype.DEFMETHOD(\"needs_parens\", func);\n        }\n    }\n\n    PARENS(AST_Node, return_false);\n\n    // a function expression needs parens around it when it's provably\n    // the first token to appear in a statement.\n    PARENS(AST_Function, function(output) {\n        if (!output.has_parens() && first_in_statement(output)) {\n            return true;\n        }\n\n        if (output.option(\"webkit\")) {\n            var p = output.parent();\n            if (p instanceof AST_PropAccess && p.expression === this) {\n                return true;\n            }\n        }\n\n        if (output.option(\"wrap_iife\")) {\n            var p = output.parent();\n            return p instanceof AST_Call && p.expression === this;\n        }\n\n        return false;\n    });\n\n    PARENS(AST_Arrow, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this;\n    });\n\n    // same goes for an object literal, because otherwise it would be\n    // interpreted as a block of code.\n    PARENS(AST_Object, function(output) {\n        return !output.has_parens() && first_in_statement(output);\n    });\n\n    PARENS(AST_ClassExpression, first_in_statement);\n\n    PARENS(AST_Unary, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || p instanceof AST_Binary\n                && p.operator === \"**\"\n                && this instanceof AST_UnaryPrefix\n                && p.left === this\n                && this.operator !== \"++\"\n                && this.operator !== \"--\";\n    });\n\n    PARENS(AST_Await, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || output.option(\"safari10\") && p instanceof AST_UnaryPrefix;\n    });\n\n    PARENS(AST_Sequence, function(output) {\n        var p = output.parent();\n        return p instanceof AST_Call                          // (foo, bar)() or foo(1, (2, 3), 4)\n            || p instanceof AST_Unary                         // !(foo, bar, baz)\n            || p instanceof AST_Binary                        // 1 + (2, 3) + 4 ==> 8\n            || p instanceof AST_VarDef                        // var a = (1, 2), b = a + a; ==> b == 4\n            || p instanceof AST_PropAccess                    // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ==> 2\n            || p instanceof AST_Array                         // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]\n            || p instanceof AST_ObjectProperty                // { foo: (1, 2) }.foo ==> 2\n            || p instanceof AST_Conditional                   /* (false, true) ? (a = 10, b = 20) : (c = 30)\n                                                               * ==> 20 (side effect, set a := 10 and b := 20) */\n            || p instanceof AST_Arrow                         // x => (x, x)\n            || p instanceof AST_DefaultAssign                 // x => (x = (0, function(){}))\n            || p instanceof AST_Expansion                     // [...(a, b)]\n            || p instanceof AST_ForOf && this === p.object    // for (e of (foo, bar)) {}\n            || p instanceof AST_Yield                         // yield (foo, bar)\n            || p instanceof AST_Export                        // export default (foo, bar)\n        ;\n    });\n\n    PARENS(AST_Binary, function(output) {\n        var p = output.parent();\n        // (foo && bar)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // typeof (foo && bar)\n        if (p instanceof AST_Unary)\n            return true;\n        // (foo && bar)[\"prop\"], (foo && bar).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // this deals with precedence: 3 * (2 + 1)\n        if (p instanceof AST_Binary) {\n            var po = p.operator, pp = PRECEDENCE[po];\n            var so = this.operator, sp = PRECEDENCE[so];\n            if (pp > sp\n                || (pp == sp\n                    && (this === p.right || po == \"**\"))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_Yield, function(output) {\n        var p = output.parent();\n        // (yield 1) + (yield 2)\n        // a = yield 3\n        if (p instanceof AST_Binary && p.operator !== \"=\")\n            return true;\n        // (yield 1)()\n        // new (yield 1)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (yield 1) ? yield 2 : yield 3\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // -(yield 4)\n        if (p instanceof AST_Unary)\n            return true;\n        // (yield x).foo\n        // (yield x)['foo']\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n    });\n\n    PARENS(AST_PropAccess, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_New && p.expression === this) {\n            // i.e. new (foo.bar().baz)\n            //\n            // if there's one call into this subtree, then we need\n            // parens around it too, otherwise the call will be\n            // interpreted as passing the arguments to the upper New\n            // expression.\n            var parens = false;\n            this.walk(new TreeWalker(function(node) {\n                if (parens || node instanceof AST_Scope) return true;\n                if (node instanceof AST_Call) {\n                    parens = true;\n                    return true;\n                }\n            }));\n            return parens;\n        }\n    });\n\n    PARENS(AST_Call, function(output) {\n        var p = output.parent(), p1;\n        if (p instanceof AST_New && p.expression === this\n            || p instanceof AST_Export && p.is_default && this.expression instanceof AST_Function)\n            return true;\n\n        // workaround for Safari bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=123506\n        return this.expression instanceof AST_Function\n            && p instanceof AST_PropAccess\n            && p.expression === this\n            && (p1 = output.parent(1)) instanceof AST_Assign\n            && p1.left === p;\n    });\n\n    PARENS(AST_New, function(output) {\n        var p = output.parent();\n        if (!need_constructor_parens(this, output)\n            && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)[\"getTime\"]()\n                || p instanceof AST_Call && p.expression === this)) // (new foo)(bar)\n            return true;\n    });\n\n    PARENS(AST_Number, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value < 0 || /^0/.test(make_num(value))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_BigInt, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value.startsWith(\"-\")) {\n                return true;\n            }\n        }\n    });\n\n    PARENS([ AST_Assign, AST_Conditional ], function(output) {\n        var p = output.parent();\n        // !(a = false) → true\n        if (p instanceof AST_Unary)\n            return true;\n        // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n        if (p instanceof AST_Binary && !(p instanceof AST_Assign))\n            return true;\n        // (a = func)() —or— new (a = Object)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (a = foo) ? bar : baz\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // (a = foo)[\"prop\"] —or— (a = foo).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // ({a, b} = {a: 1, b: 2}), a destructuring assignment\n        if (this instanceof AST_Assign && this.left instanceof AST_Destructuring && this.left.is_array === false)\n            return true;\n    });\n\n    /* -----[ PRINTERS ]----- */\n\n    DEFPRINT(AST_Directive, function(self, output) {\n        output.print_string(self.value, self.quote);\n        output.semicolon();\n    });\n\n    DEFPRINT(AST_Expansion, function (self, output) {\n        output.print(\"...\");\n        self.expression.print(output);\n    });\n\n    DEFPRINT(AST_Destructuring, function (self, output) {\n        output.print(self.is_array ? \"[\" : \"{\");\n        var len = self.names.length;\n        self.names.forEach(function (name, i) {\n            if (i > 0) output.comma();\n            name.print(output);\n            // If the final element is a hole, we need to make sure it\n            // doesn't look like a trailing comma, by inserting an actual\n            // trailing comma.\n            if (i == len - 1 && name instanceof AST_Hole) output.comma();\n        });\n        output.print(self.is_array ? \"]\" : \"}\");\n    });\n\n    DEFPRINT(AST_Debugger, function(self, output) {\n        output.print(\"debugger\");\n        output.semicolon();\n    });\n\n    /* -----[ statements ]----- */\n\n    function display_body(body, is_toplevel, output, allow_directives) {\n        var last = body.length - 1;\n        in_directive = allow_directives;\n        body.forEach(function(stmt, i) {\n            if (in_directive === true && !(stmt instanceof AST_Directive ||\n                stmt instanceof AST_EmptyStatement ||\n                (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)\n            )) {\n                in_directive = false;\n            }\n            if (!(stmt instanceof AST_EmptyStatement)) {\n                output.indent();\n                stmt.print(output);\n                if (!(i == last && is_toplevel)) {\n                    output.newline();\n                    if (is_toplevel) output.newline();\n                }\n            }\n            if (in_directive === true &&\n                stmt instanceof AST_SimpleStatement &&\n                stmt.body instanceof AST_String\n            ) {\n                in_directive = false;\n            }\n        });\n        in_directive = false;\n    }\n\n    AST_StatementWithBody.DEFMETHOD(\"_do_print_body\", function(output) {\n        force_statement(this.body, output);\n    });\n\n    DEFPRINT(AST_Statement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    DEFPRINT(AST_Toplevel, function(self, output) {\n        display_body(self.body, true, output, true);\n        output.print(\"\");\n    });\n    DEFPRINT(AST_LabeledStatement, function(self, output) {\n        self.label.print(output);\n        output.colon();\n        self.body.print(output);\n    });\n    DEFPRINT(AST_SimpleStatement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    function print_braced_empty(self, output) {\n        output.print(\"{\");\n        output.with_indent(output.next_indent(), function() {\n            output.append_comments(self, true);\n        });\n        output.print(\"}\");\n    }\n    function print_braced(self, output, allow_directives) {\n        if (self.body.length > 0) {\n            output.with_block(function() {\n                display_body(self.body, false, output, allow_directives);\n            });\n        } else print_braced_empty(self, output);\n    }\n    DEFPRINT(AST_BlockStatement, function(self, output) {\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_EmptyStatement, function(self, output) {\n        output.semicolon();\n    });\n    DEFPRINT(AST_Do, function(self, output) {\n        output.print(\"do\");\n        output.space();\n        make_block(self.body, output);\n        output.space();\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.semicolon();\n    });\n    DEFPRINT(AST_While, function(self, output) {\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_For, function(self, output) {\n        output.print(\"for\");\n        output.space();\n        output.with_parens(function() {\n            if (self.init) {\n                if (self.init instanceof AST_Definitions) {\n                    self.init.print(output);\n                } else {\n                    parenthesize_for_noin(self.init, output, true);\n                }\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.condition) {\n                self.condition.print(output);\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.step) {\n                self.step.print(output);\n            }\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_ForIn, function(self, output) {\n        output.print(\"for\");\n        if (self.await) {\n            output.space();\n            output.print(\"await\");\n        }\n        output.space();\n        output.with_parens(function() {\n            self.init.print(output);\n            output.space();\n            output.print(self instanceof AST_ForOf ? \"of\" : \"in\");\n            output.space();\n            self.object.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_With, function(self, output) {\n        output.print(\"with\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n\n    /* -----[ functions ]----- */\n    AST_Lambda.DEFMETHOD(\"_do_print\", function(output, nokeyword) {\n        var self = this;\n        if (!nokeyword) {\n            if (self.async) {\n                output.print(\"async\");\n                output.space();\n            }\n            output.print(\"function\");\n            if (self.is_generator) {\n                output.star();\n            }\n            if (self.name) {\n                output.space();\n            }\n        }\n        if (self.name instanceof AST_Symbol) {\n            self.name.print(output);\n        } else if (nokeyword && self.name instanceof AST_Node) {\n            output.with_square(function() {\n                self.name.print(output); // Computed method name\n            });\n        }\n        output.with_parens(function() {\n            self.argnames.forEach(function(arg, i) {\n                if (i) output.comma();\n                arg.print(output);\n            });\n        });\n        output.space();\n        print_braced(self, output, true);\n    });\n    DEFPRINT(AST_Lambda, function(self, output) {\n        self._do_print(output);\n    });\n\n    DEFPRINT(AST_PrefixedTemplateString, function(self, output) {\n        var tag = self.prefix;\n        var parenthesize_tag = tag instanceof AST_Lambda\n            || tag instanceof AST_Binary\n            || tag instanceof AST_Conditional\n            || tag instanceof AST_Sequence\n            || tag instanceof AST_Unary\n            || tag instanceof AST_Dot && tag.expression instanceof AST_Object;\n        if (parenthesize_tag) output.print(\"(\");\n        self.prefix.print(output);\n        if (parenthesize_tag) output.print(\")\");\n        self.template_string.print(output);\n    });\n    DEFPRINT(AST_TemplateString, function(self, output) {\n        var is_tagged = output.parent() instanceof AST_PrefixedTemplateString;\n\n        output.print(\"`\");\n        for (var i = 0; i < self.segments.length; i++) {\n            if (!(self.segments[i] instanceof AST_TemplateSegment)) {\n                output.print(\"${\");\n                self.segments[i].print(output);\n                output.print(\"}\");\n            } else if (is_tagged) {\n                output.print(self.segments[i].raw);\n            } else {\n                output.print_template_string_chars(self.segments[i].value);\n            }\n        }\n        output.print(\"`\");\n    });\n\n    AST_Arrow.DEFMETHOD(\"_do_print\", function(output) {\n        var self = this;\n        var parent = output.parent();\n        var needs_parens = (parent instanceof AST_Binary && !(parent instanceof AST_Assign)) ||\n            parent instanceof AST_Unary ||\n            (parent instanceof AST_Call && self === parent.expression);\n        if (needs_parens) { output.print(\"(\"); }\n        if (self.async) {\n            output.print(\"async\");\n            output.space();\n        }\n        if (self.argnames.length === 1 && self.argnames[0] instanceof AST_Symbol) {\n            self.argnames[0].print(output);\n        } else {\n            output.with_parens(function() {\n                self.argnames.forEach(function(arg, i) {\n                    if (i) output.comma();\n                    arg.print(output);\n                });\n            });\n        }\n        output.space();\n        output.print(\"=>\");\n        output.space();\n        if (self.body instanceof AST_Node) {\n            self.body.print(output);\n        } else {\n            print_braced(self, output);\n        }\n        if (needs_parens) { output.print(\")\"); }\n    });\n\n    /* -----[ exits ]----- */\n    AST_Exit.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.value) {\n            output.space();\n            this.value.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Return, function(self, output) {\n        self._do_print(output, \"return\");\n    });\n    DEFPRINT(AST_Throw, function(self, output) {\n        self._do_print(output, \"throw\");\n    });\n\n    /* -----[ yield ]----- */\n\n    DEFPRINT(AST_Yield, function(self, output) {\n        var star = self.is_star ? \"*\" : \"\";\n        output.print(\"yield\" + star);\n        if (self.expression) {\n            output.space();\n            self.expression.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Await, function(self, output) {\n        output.print(\"await\");\n        output.space();\n        var e = self.expression;\n        var parens = !(\n               e instanceof AST_Call\n            || e instanceof AST_SymbolRef\n            || e instanceof AST_PropAccess\n            || e instanceof AST_Unary\n            || e instanceof AST_Constant\n        );\n        if (parens) output.print(\"(\");\n        self.expression.print(output);\n        if (parens) output.print(\")\");\n    });\n\n    /* -----[ loop control ]----- */\n    AST_LoopControl.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.label) {\n            output.space();\n            this.label.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Break, function(self, output) {\n        self._do_print(output, \"break\");\n    });\n    DEFPRINT(AST_Continue, function(self, output) {\n        self._do_print(output, \"continue\");\n    });\n\n    /* -----[ if ]----- */\n    function make_then(self, output) {\n        var b = self.body;\n        if (output.option(\"braces\")\n            || output.option(\"ie8\") && b instanceof AST_Do)\n            return make_block(b, output);\n        // The squeezer replaces \"block\"-s that contain only a single\n        // statement with the statement itself; technically, the AST\n        // is correct, but this can create problems when we output an\n        // IF having an ELSE clause where the THEN clause ends in an\n        // IF *without* an ELSE block (then the outer ELSE would refer\n        // to the inner IF).  This function checks for this case and\n        // adds the block braces if needed.\n        if (!b) return output.force_semicolon();\n        while (true) {\n            if (b instanceof AST_If) {\n                if (!b.alternative) {\n                    make_block(self.body, output);\n                    return;\n                }\n                b = b.alternative;\n            } else if (b instanceof AST_StatementWithBody) {\n                b = b.body;\n            } else break;\n        }\n        force_statement(self.body, output);\n    }\n    DEFPRINT(AST_If, function(self, output) {\n        output.print(\"if\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        if (self.alternative) {\n            make_then(self, output);\n            output.space();\n            output.print(\"else\");\n            output.space();\n            if (self.alternative instanceof AST_If)\n                self.alternative.print(output);\n            else\n                force_statement(self.alternative, output);\n        } else {\n            self._do_print_body(output);\n        }\n    });\n\n    /* -----[ switch ]----- */\n    DEFPRINT(AST_Switch, function(self, output) {\n        output.print(\"switch\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        var last = self.body.length - 1;\n        if (last < 0) print_braced_empty(self, output);\n        else output.with_block(function() {\n            self.body.forEach(function(branch, i) {\n                output.indent(true);\n                branch.print(output);\n                if (i < last && branch.body.length > 0)\n                    output.newline();\n            });\n        });\n    });\n    AST_SwitchBranch.DEFMETHOD(\"_do_print_body\", function(output) {\n        output.newline();\n        this.body.forEach(function(stmt) {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    });\n    DEFPRINT(AST_Default, function(self, output) {\n        output.print(\"default:\");\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_Case, function(self, output) {\n        output.print(\"case\");\n        output.space();\n        self.expression.print(output);\n        output.print(\":\");\n        self._do_print_body(output);\n    });\n\n    /* -----[ exceptions ]----- */\n    DEFPRINT(AST_Try, function(self, output) {\n        output.print(\"try\");\n        output.space();\n        print_braced(self, output);\n        if (self.bcatch) {\n            output.space();\n            self.bcatch.print(output);\n        }\n        if (self.bfinally) {\n            output.space();\n            self.bfinally.print(output);\n        }\n    });\n    DEFPRINT(AST_Catch, function(self, output) {\n        output.print(\"catch\");\n        if (self.argname) {\n            output.space();\n            output.with_parens(function() {\n                self.argname.print(output);\n            });\n        }\n        output.space();\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_Finally, function(self, output) {\n        output.print(\"finally\");\n        output.space();\n        print_braced(self, output);\n    });\n\n    /* -----[ var/const ]----- */\n    AST_Definitions.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        output.space();\n        this.definitions.forEach(function(def, i) {\n            if (i) output.comma();\n            def.print(output);\n        });\n        var p = output.parent();\n        var in_for = p instanceof AST_For || p instanceof AST_ForIn;\n        var output_semicolon = !in_for || p && p.init !== this;\n        if (output_semicolon)\n            output.semicolon();\n    });\n    DEFPRINT(AST_Let, function(self, output) {\n        self._do_print(output, \"let\");\n    });\n    DEFPRINT(AST_Var, function(self, output) {\n        self._do_print(output, \"var\");\n    });\n    DEFPRINT(AST_Const, function(self, output) {\n        self._do_print(output, \"const\");\n    });\n    DEFPRINT(AST_Import, function(self, output) {\n        output.print(\"import\");\n        output.space();\n        if (self.imported_name) {\n            self.imported_name.print(output);\n        }\n        if (self.imported_name && self.imported_names) {\n            output.print(\",\");\n            output.space();\n        }\n        if (self.imported_names) {\n            if (self.imported_names.length === 1 && self.imported_names[0].foreign_name.name === \"*\") {\n                self.imported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.imported_names.forEach(function (name_import, i) {\n                    output.space();\n                    name_import.print(output);\n                    if (i < self.imported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        }\n        if (self.imported_name || self.imported_names) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n        }\n        self.module_name.print(output);\n        output.semicolon();\n    });\n\n    DEFPRINT(AST_NameMapping, function(self, output) {\n        var is_import = output.parent() instanceof AST_Import;\n        var definition = self.name.definition();\n        var names_are_different =\n            (definition && definition.mangled_name || self.name.name) !==\n            self.foreign_name.name;\n        if (names_are_different) {\n            if (is_import) {\n                output.print(self.foreign_name.name);\n            } else {\n                self.name.print(output);\n            }\n            output.space();\n            output.print(\"as\");\n            output.space();\n            if (is_import) {\n                self.name.print(output);\n            } else {\n                output.print(self.foreign_name.name);\n            }\n        } else {\n            self.name.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Export, function(self, output) {\n        output.print(\"export\");\n        output.space();\n        if (self.is_default) {\n            output.print(\"default\");\n            output.space();\n        }\n        if (self.exported_names) {\n            if (self.exported_names.length === 1 && self.exported_names[0].name.name === \"*\") {\n                self.exported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.exported_names.forEach(function(name_export, i) {\n                    output.space();\n                    name_export.print(output);\n                    if (i < self.exported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        } else if (self.exported_value) {\n            self.exported_value.print(output);\n        } else if (self.exported_definition) {\n            self.exported_definition.print(output);\n            if (self.exported_definition instanceof AST_Definitions) return;\n        }\n        if (self.module_name) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n            self.module_name.print(output);\n        }\n        if (self.exported_value\n                && !(self.exported_value instanceof AST_Defun ||\n                    self.exported_value instanceof AST_Function ||\n                    self.exported_value instanceof AST_Class)\n            || self.module_name\n            || self.exported_names\n        ) {\n            output.semicolon();\n        }\n    });\n\n    function parenthesize_for_noin(node, output, noin) {\n        var parens = false;\n        // need to take some precautions here:\n        //    https://github.com/mishoo/UglifyJS2/issues/60\n        if (noin) node.walk(new TreeWalker(function(node) {\n            if (parens || node instanceof AST_Scope) return true;\n            if (node instanceof AST_Binary && node.operator == \"in\") {\n                parens = true;\n                return true;\n            }\n        }));\n        node.print(output, parens);\n    }\n\n    DEFPRINT(AST_VarDef, function(self, output) {\n        self.name.print(output);\n        if (self.value) {\n            output.space();\n            output.print(\"=\");\n            output.space();\n            var p = output.parent(1);\n            var noin = p instanceof AST_For || p instanceof AST_ForIn;\n            parenthesize_for_noin(self.value, output, noin);\n        }\n    });\n\n    /* -----[ other expressions ]----- */\n    DEFPRINT(AST_Call, function(self, output) {\n        self.expression.print(output);\n        if (self instanceof AST_New && !need_constructor_parens(self, output))\n            return;\n        if (self.expression instanceof AST_Call || self.expression instanceof AST_Lambda) {\n            output.add_mapping(self.start);\n        }\n        output.with_parens(function() {\n            self.args.forEach(function(expr, i) {\n                if (i) output.comma();\n                expr.print(output);\n            });\n        });\n    });\n    DEFPRINT(AST_New, function(self, output) {\n        output.print(\"new\");\n        output.space();\n        AST_Call.prototype._codegen(self, output);\n    });\n\n    AST_Sequence.DEFMETHOD(\"_do_print\", function(output) {\n        this.expressions.forEach(function(node, index) {\n            if (index > 0) {\n                output.comma();\n                if (output.should_break()) {\n                    output.newline();\n                    output.indent();\n                }\n            }\n            node.print(output);\n        });\n    });\n    DEFPRINT(AST_Sequence, function(self, output) {\n        self._do_print(output);\n        // var p = output.parent();\n        // if (p instanceof AST_Statement) {\n        //     output.with_indent(output.next_indent(), function(){\n        //         self._do_print(output);\n        //     });\n        // } else {\n        //     self._do_print(output);\n        // }\n    });\n    DEFPRINT(AST_Dot, function(self, output) {\n        var expr = self.expression;\n        expr.print(output);\n        var prop = self.property;\n        if (output.option(\"ie8\") && RESERVED_WORDS.has(prop)) {\n            output.print(\"[\");\n            output.add_mapping(self.end);\n            output.print_string(prop);\n            output.print(\"]\");\n        } else {\n            if (expr instanceof AST_Number && expr.getValue() >= 0) {\n                if (!/[xa-f.)]/i.test(output.last())) {\n                    output.print(\".\");\n                }\n            }\n            output.print(\".\");\n            // the name after dot would be mapped about here.\n            output.add_mapping(self.end);\n            output.print_name(prop);\n        }\n    });\n    DEFPRINT(AST_Sub, function(self, output) {\n        self.expression.print(output);\n        output.print(\"[\");\n        self.property.print(output);\n        output.print(\"]\");\n    });\n    DEFPRINT(AST_UnaryPrefix, function(self, output) {\n        var op = self.operator;\n        output.print(op);\n        if (/^[a-z]/i.test(op)\n            || (/[+-]$/.test(op)\n                && self.expression instanceof AST_UnaryPrefix\n                && /^[+-]/.test(self.expression.operator))) {\n            output.space();\n        }\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPostfix, function(self, output) {\n        self.expression.print(output);\n        output.print(self.operator);\n    });\n    DEFPRINT(AST_Binary, function(self, output) {\n        var op = self.operator;\n        self.left.print(output);\n        if (op[0] == \">\" /* \">>\" \">>>\" \">\" \">=\" */\n            && self.left instanceof AST_UnaryPostfix\n            && self.left.operator == \"--\") {\n            // space is mandatory to avoid outputting -->\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        output.print(op);\n        if ((op == \"<\" || op == \"<<\")\n            && self.right instanceof AST_UnaryPrefix\n            && self.right.operator == \"!\"\n            && self.right.expression instanceof AST_UnaryPrefix\n            && self.right.expression.operator == \"--\") {\n            // space is mandatory to avoid outputting <!--\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        self.right.print(output);\n    });\n    DEFPRINT(AST_Conditional, function(self, output) {\n        self.condition.print(output);\n        output.space();\n        output.print(\"?\");\n        output.space();\n        self.consequent.print(output);\n        output.space();\n        output.colon();\n        self.alternative.print(output);\n    });\n\n    /* -----[ literals ]----- */\n    DEFPRINT(AST_Array, function(self, output) {\n        output.with_square(function() {\n            var a = self.elements, len = a.length;\n            if (len > 0) output.space();\n            a.forEach(function(exp, i) {\n                if (i) output.comma();\n                exp.print(output);\n                // If the final element is a hole, we need to make sure it\n                // doesn't look like a trailing comma, by inserting an actual\n                // trailing comma.\n                if (i === len - 1 && exp instanceof AST_Hole)\n                  output.comma();\n            });\n            if (len > 0) output.space();\n        });\n    });\n    DEFPRINT(AST_Object, function(self, output) {\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.print(\",\");\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else print_braced_empty(self, output);\n    });\n    DEFPRINT(AST_Class, function(self, output) {\n        output.print(\"class\");\n        output.space();\n        if (self.name) {\n            self.name.print(output);\n            output.space();\n        }\n        if (self.extends) {\n            var parens = (\n                   !(self.extends instanceof AST_SymbolRef)\n                && !(self.extends instanceof AST_PropAccess)\n                && !(self.extends instanceof AST_ClassExpression)\n                && !(self.extends instanceof AST_Function)\n            );\n            output.print(\"extends\");\n            if (parens) {\n                output.print(\"(\");\n            } else {\n                output.space();\n            }\n            self.extends.print(output);\n            if (parens) {\n                output.print(\")\");\n            } else {\n                output.space();\n            }\n        }\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else output.print(\"{}\");\n    });\n    DEFPRINT(AST_NewTarget, function(self, output) {\n        output.print(\"new.target\");\n    });\n\n    function print_property_name(key, quote, output) {\n        if (output.option(\"quote_keys\")) {\n            output.print_string(key);\n        } else if (\"\" + +key == key && key >= 0) {\n            output.print(make_num(key));\n        } else if (RESERVED_WORDS.has(key) ? !output.option(\"ie8\") : is_identifier_string(key)) {\n            if (quote && output.option(\"keep_quoted_props\")) {\n                output.print_string(key, quote);\n            } else {\n                output.print_name(key);\n            }\n        } else {\n            output.print_string(key, quote);\n        }\n    }\n\n    DEFPRINT(AST_ObjectKeyVal, function(self, output) {\n        function get_name(self) {\n            var def = self.definition();\n            return def ? def.mangled_name || def.name : self.name;\n        }\n\n        var allowShortHand = output.option(\"shorthand\");\n        if (allowShortHand &&\n            self.value instanceof AST_Symbol &&\n            is_identifier_string(self.key) &&\n            get_name(self.value) === self.key &&\n            !RESERVED_WORDS.has(self.key)\n        ) {\n            print_property_name(self.key, self.quote, output);\n\n        } else if (allowShortHand &&\n            self.value instanceof AST_DefaultAssign &&\n            self.value.left instanceof AST_Symbol &&\n            is_identifier_string(self.key) &&\n            get_name(self.value.left) === self.key\n        ) {\n            print_property_name(self.key, self.quote, output);\n            output.space();\n            output.print(\"=\");\n            output.space();\n            self.value.right.print(output);\n        } else {\n            if (!(self.key instanceof AST_Node)) {\n                print_property_name(self.key, self.quote, output);\n            } else {\n                output.with_square(function() {\n                    self.key.print(output);\n                });\n            }\n            output.colon();\n            self.value.print(output);\n        }\n    });\n    AST_ObjectProperty.DEFMETHOD(\"_print_getter_setter\", function(type, output) {\n        var self = this;\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n        if (type) {\n            output.print(type);\n            output.space();\n        }\n        if (self.key instanceof AST_SymbolMethod) {\n            print_property_name(self.key.name, self.quote, output);\n        } else {\n            output.with_square(function() {\n                self.key.print(output);\n            });\n        }\n        self.value._do_print(output, true);\n    });\n    DEFPRINT(AST_ObjectSetter, function(self, output) {\n        self._print_getter_setter(\"set\", output);\n    });\n    DEFPRINT(AST_ObjectGetter, function(self, output) {\n        self._print_getter_setter(\"get\", output);\n    });\n    DEFPRINT(AST_ConciseMethod, function(self, output) {\n        var type;\n        if (self.is_generator && self.async) {\n            type = \"async*\";\n        } else if (self.is_generator) {\n            type = \"*\";\n        } else if (self.async) {\n            type = \"async\";\n        }\n        self._print_getter_setter(type, output);\n    });\n    AST_Symbol.DEFMETHOD(\"_do_print\", function(output) {\n        var def = this.definition();\n        output.print_name(def ? def.mangled_name || def.name : this.name);\n    });\n    DEFPRINT(AST_Symbol, function (self, output) {\n        self._do_print(output);\n    });\n    DEFPRINT(AST_Hole, noop);\n    DEFPRINT(AST_This, function(self, output) {\n        output.print(\"this\");\n    });\n    DEFPRINT(AST_Super, function(self, output) {\n        output.print(\"super\");\n    });\n    DEFPRINT(AST_Constant, function(self, output) {\n        output.print(self.getValue());\n    });\n    DEFPRINT(AST_String, function(self, output) {\n        output.print_string(self.getValue(), self.quote, in_directive);\n    });\n    DEFPRINT(AST_Number, function(self, output) {\n        if (use_asm && self.start && self.start.raw != null) {\n            output.print(self.start.raw);\n        } else {\n            output.print(make_num(self.getValue()));\n        }\n    });\n    DEFPRINT(AST_BigInt, function(self, output) {\n        output.print(self.getValue() + \"n\");\n    });\n\n    DEFPRINT(AST_RegExp, function(self, output) {\n        var regexp = self.getValue();\n        var str = regexp_source_fix(regexp.toString());\n        str = output.to_utf8(str);\n        output.print(str);\n        var p = output.parent();\n        if (p instanceof AST_Binary && /^in/.test(p.operator) && p.left === self)\n            output.print(\" \");\n    });\n\n    function force_statement(stat, output) {\n        if (output.option(\"braces\")) {\n            make_block(stat, output);\n        } else {\n            if (!stat || stat instanceof AST_EmptyStatement)\n                output.force_semicolon();\n            else\n                stat.print(output);\n        }\n    }\n\n    // self should be AST_New.  decide if we want to show parens or not.\n    function need_constructor_parens(self, output) {\n        // Always print parentheses with arguments\n        if (self.args.length > 0) return true;\n\n        return output.option(\"beautify\");\n    }\n\n    function best_of(a) {\n        var best = a[0], len = best.length;\n        for (var i = 1; i < a.length; ++i) {\n            if (a[i].length < len) {\n                best = a[i];\n                len = best.length;\n            }\n        }\n        return best;\n    }\n\n    function make_num(num) {\n        var str = num.toString(10).replace(/^0\\./, \".\").replace(\"e+\", \"e\");\n        var candidates = [ str ];\n        if (Math.floor(num) === num) {\n            if (num < 0) {\n                candidates.push(\"-0x\" + (-num).toString(16).toLowerCase());\n            } else {\n                candidates.push(\"0x\" + num.toString(16).toLowerCase());\n            }\n        }\n        var match, len, digits;\n        if (match = /^\\.0+/.exec(str)) {\n            len = match[0].length;\n            digits = str.slice(len);\n            candidates.push(digits + \"e-\" + (digits.length + len - 1));\n        } else if (match = /0+$/.exec(str)) {\n            len = match[0].length;\n            candidates.push(str.slice(0, -len) + \"e\" + len);\n        } else if (match = /^(\\d)\\.(\\d+)e(-?\\d+)$/.exec(str)) {\n            candidates.push(match[1] + match[2] + \"e\" + (match[3] - match[2].length));\n        }\n        return best_of(candidates);\n    }\n\n    function make_block(stmt, output) {\n        if (!stmt || stmt instanceof AST_EmptyStatement)\n            output.print(\"{}\");\n        else if (stmt instanceof AST_BlockStatement)\n            stmt.print(output);\n        else output.with_block(function() {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    }\n\n    /* -----[ source map generators ]----- */\n\n    function DEFMAP(nodetype, generator) {\n        nodetype.forEach(function(nodetype) {\n            nodetype.DEFMETHOD(\"add_source_map\", generator);\n        });\n    }\n\n    DEFMAP([\n        // We could easily add info for ALL nodes, but it seems to me that\n        // would be quite wasteful, hence this noop in the base class.\n        AST_Node,\n        // since the label symbol will mark it\n        AST_LabeledStatement,\n        AST_Toplevel,\n    ], noop);\n\n    // XXX: I'm not exactly sure if we need it for all of these nodes,\n    // or if we should add even more.\n    DEFMAP([\n        AST_Array,\n        AST_BlockStatement,\n        AST_Catch,\n        AST_Class,\n        AST_Constant,\n        AST_Debugger,\n        AST_Definitions,\n        AST_Directive,\n        AST_Finally,\n        AST_Jump,\n        AST_Lambda,\n        AST_New,\n        AST_Object,\n        AST_StatementWithBody,\n        AST_Symbol,\n        AST_Switch,\n        AST_SwitchBranch,\n        AST_Try,\n    ], function(output) {\n        output.add_mapping(this.start);\n    });\n\n    DEFMAP([\n        AST_ObjectGetter,\n        AST_ObjectSetter,\n    ], function(output) {\n        output.add_mapping(this.start, this.key.name);\n    });\n\n    DEFMAP([ AST_ObjectProperty ], function(output) {\n        output.add_mapping(this.start, this.key);\n    });\n})();\n\nexport {\n    OutputStream,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    defaults,\n    keep_name,\n    member,\n    mergeSort,\n    push_uniq,\n    return_false,\n    return_this,\n    return_true,\n    string_template,\n} from \"./utils/index.js\";\nimport {\n    AST_Arrow,\n    AST_Block,\n    AST_Call,\n    AST_Class,\n    AST_Conditional,\n    AST_DefClass,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Dot,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_Import,\n    AST_IterationStatement,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_Node,\n    AST_Scope,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_Toplevel,\n    AST_With,\n    TreeWalker,\n} from \"./ast.js\";\nimport {\n    RESERVED_WORDS,\n    js_error,\n} from \"./parse.js\";\n\nfunction SymbolDef(scope, orig, init) {\n    this.name = orig.name;\n    this.orig = [ orig ];\n    this.init = init;\n    this.eliminated = 0;\n    this.scope = scope;\n    this.references = [];\n    this.replaced = 0;\n    this.global = false;\n    this.export = false;\n    this.mangled_name = null;\n    this.undeclared = false;\n    this.id = SymbolDef.next_id++;\n}\n\nSymbolDef.next_id = 1;\n\nvar MASK_EXPORT_DONT_MANGLE = 1 << 0;\nvar MASK_EXPORT_WANT_MANGLE = 1 << 1;\n\nSymbolDef.prototype = {\n    unmangleable: function(options) {\n        if (!options) options = {};\n\n        return this.global && !options.toplevel\n            || (this.export & MASK_EXPORT_DONT_MANGLE)\n            || this.undeclared\n            || !options.eval && this.scope.pinned()\n            || (this.orig[0] instanceof AST_SymbolLambda\n                  || this.orig[0] instanceof AST_SymbolDefun) && keep_name(options.keep_fnames, this.orig[0].name)\n            || this.orig[0] instanceof AST_SymbolMethod\n            || (this.orig[0] instanceof AST_SymbolClass\n                  || this.orig[0] instanceof AST_SymbolDefClass) && keep_name(options.keep_classnames, this.orig[0].name);\n    },\n    mangle: function(options) {\n        var cache = options.cache && options.cache.props;\n        if (this.global && cache && cache.has(this.name)) {\n            this.mangled_name = cache.get(this.name);\n        } else if (!this.mangled_name && !this.unmangleable(options)) {\n            var s = this.scope;\n            var sym = this.orig[0];\n            if (options.ie8 && sym instanceof AST_SymbolLambda)\n                s = s.parent_scope;\n            var def;\n            if (def = this.redefined()) {\n                this.mangled_name = def.mangled_name || def.name;\n            } else\n                this.mangled_name = s.next_mangled(options, this);\n            if (this.global && cache) {\n                cache.set(this.name, this.mangled_name);\n            }\n        }\n    },\n    redefined: function() {\n        return this.defun && this.defun.variables.get(this.name);\n    }\n};\n\nAST_Toplevel.DEFMETHOD(\"figure_out_scope\", function(options) {\n    options = defaults(options, {\n        cache: null,\n        ie8: false,\n        safari10: false,\n    });\n\n    // pass 1: setup scope chaining and handle definitions\n    var self = this;\n    var scope = self.parent_scope = null;\n    var labels = new Map();\n    var defun = null;\n    var in_destructuring = null;\n    var for_scopes = [];\n    var tw = new TreeWalker(function(node, descend) {\n        if (node.is_block_scope()) {\n            var save_scope = scope;\n            node.block_scope = scope = new AST_Scope(node);\n            scope.init_scope_vars(save_scope);\n            if (!(node instanceof AST_Scope)) {\n                scope.uses_with = save_scope.uses_with;\n                scope.uses_eval = save_scope.uses_eval;\n                scope.directives = save_scope.directives;\n            }\n            if (options.safari10) {\n                if (node instanceof AST_For || node instanceof AST_ForIn) {\n                    for_scopes.push(scope);\n                }\n            }\n            descend();\n            scope = save_scope;\n            return true;\n        }\n        if (node instanceof AST_Destructuring) {\n            in_destructuring = node;  // These don't nest\n            descend();\n            in_destructuring = null;\n            return true;\n        }\n        if (node instanceof AST_Scope) {\n            node.init_scope_vars(scope);\n            var save_scope = scope;\n            var save_defun = defun;\n            var save_labels = labels;\n            defun = scope = node;\n            labels = new Map();\n            descend();\n            scope = save_scope;\n            defun = save_defun;\n            labels = save_labels;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (node instanceof AST_LabeledStatement) {\n            var l = node.label;\n            if (labels.has(l.name)) {\n                throw new Error(string_template(\"Label {name} defined twice\", l));\n            }\n            labels.set(l.name, l);\n            descend();\n            labels.delete(l.name);\n            return true;        // no descend again\n        }\n        if (node instanceof AST_With) {\n            for (var s = scope; s; s = s.parent_scope)\n                s.uses_with = true;\n            return;\n        }\n        if (node instanceof AST_Symbol) {\n            node.scope = scope;\n        }\n        if (node instanceof AST_Label) {\n            node.thedef = node;\n            node.references = [];\n        }\n        if (node instanceof AST_SymbolLambda) {\n            defun.def_function(node, node.name == \"arguments\" ? undefined : defun);\n        } else if (node instanceof AST_SymbolDefun) {\n            // Careful here, the scope where this should be defined is\n            // the parent scope.  The reason is that we enter a new\n            // scope when we encounter the AST_Defun node (which is\n            // instanceof AST_Scope) but we get to the symbol a bit\n            // later.\n            mark_export((node.scope = defun.parent_scope.get_defun_scope()).def_function(node, defun), 1);\n        } else if (node instanceof AST_SymbolClass) {\n            mark_export(defun.def_variable(node, defun), 1);\n        } else if (node instanceof AST_SymbolImport) {\n            scope.def_variable(node);\n        } else if (node instanceof AST_SymbolDefClass) {\n            // This deals with the name of the class being available\n            // inside the class.\n            mark_export((node.scope = defun.parent_scope).def_function(node, defun), 1);\n        } else if (node instanceof AST_SymbolVar\n            || node instanceof AST_SymbolLet\n            || node instanceof AST_SymbolConst) {\n            var def;\n            if (node instanceof AST_SymbolBlockDeclaration) {\n                def = scope.def_variable(node, null);\n            } else {\n                def = defun.def_variable(node, node.TYPE == \"SymbolVar\" ? null : undefined);\n            }\n            if (!def.orig.every((sym) => {\n                if (sym === node) return true;\n                if (node instanceof AST_SymbolBlockDeclaration) {\n                    return sym instanceof AST_SymbolLambda;\n                }\n                return !(sym instanceof AST_SymbolLet || sym instanceof AST_SymbolConst);\n            })) {\n                js_error(\n                    node.name + \" redeclared\",\n                    node.start.file,\n                    node.start.line,\n                    node.start.col,\n                    node.start.pos\n                );\n            }\n            if (!(node instanceof AST_SymbolFunarg)) mark_export(def, 2);\n            def.destructuring = in_destructuring;\n            if (defun !== scope) {\n                node.mark_enclosed(options);\n                var def = scope.find_variable(node);\n                if (node.thedef !== def) {\n                    node.thedef = def;\n                    node.reference(options);\n                }\n            }\n        } else if (node instanceof AST_SymbolCatch) {\n            scope.def_variable(node).defun = defun;\n        } else if (node instanceof AST_LabelRef) {\n            var sym = labels.get(node.name);\n            if (!sym) throw new Error(string_template(\"Undefined label {name} [{line},{col}]\", {\n                name: node.name,\n                line: node.start.line,\n                col: node.start.col\n            }));\n            node.thedef = sym;\n        }\n        if (!(scope instanceof AST_Toplevel) && (node instanceof AST_Export || node instanceof AST_Import)) {\n            js_error(\n                node.TYPE + \" statement may only appear at top level\",\n                node.start.file,\n                node.start.line,\n                node.start.col,\n                node.start.pos\n            );\n        }\n\n        function mark_export(def, level) {\n            if (in_destructuring) {\n                var i = 0;\n                do {\n                    level++;\n                } while (tw.parent(i++) !== in_destructuring);\n            }\n            var node = tw.parent(level);\n            if (def.export = node instanceof AST_Export && MASK_EXPORT_DONT_MANGLE) {\n                var exported = node.exported_definition;\n                if ((exported instanceof AST_Defun || exported instanceof AST_DefClass) && node.is_default) {\n                    def.export = MASK_EXPORT_WANT_MANGLE;\n                }\n            }\n        }\n    });\n    self.walk(tw);\n\n    // pass 2: find back references and eval\n    self.globals = new Map();\n    var tw = new TreeWalker(function(node, descend) {\n        if (node instanceof AST_LoopControl && node.label) {\n            node.label.thedef.references.push(node);\n            return true;\n        }\n        if (node instanceof AST_SymbolRef) {\n            var name = node.name;\n            if (name == \"eval\" && tw.parent() instanceof AST_Call) {\n                for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope) {\n                    s.uses_eval = true;\n                }\n            }\n            var sym;\n            if (tw.parent() instanceof AST_NameMapping && tw.parent(1).module_name\n                || !(sym = node.scope.find_variable(name))) {\n                sym = self.def_global(node);\n                if (node instanceof AST_SymbolExport) sym.export = MASK_EXPORT_DONT_MANGLE;\n            } else if (sym.scope instanceof AST_Lambda && name == \"arguments\") {\n                sym.scope.uses_arguments = true;\n            }\n            node.thedef = sym;\n            node.reference(options);\n            if (node.scope.is_block_scope()\n                && !(sym.orig[0] instanceof AST_SymbolBlockDeclaration)) {\n                node.scope = node.scope.get_defun_scope();\n            }\n            return true;\n        }\n        // ensure mangling works if catch reuses a scope variable\n        var def;\n        if (node instanceof AST_SymbolCatch && (def = node.definition().redefined())) {\n            var s = node.scope;\n            while (s) {\n                push_uniq(s.enclosed, def);\n                if (s === def.scope) break;\n                s = s.parent_scope;\n            }\n        }\n    });\n    self.walk(tw);\n\n    // pass 3: work around IE8 and Safari catch scope bugs\n    if (options.ie8 || options.safari10) {\n        self.walk(new TreeWalker(function(node, descend) {\n            if (node instanceof AST_SymbolCatch) {\n                var name = node.name;\n                var refs = node.thedef.references;\n                var scope = node.thedef.defun;\n                var def = scope.find_variable(name) || self.globals.get(name) || scope.def_variable(node);\n                refs.forEach(function(ref) {\n                    ref.thedef = def;\n                    ref.reference(options);\n                });\n                node.thedef = def;\n                node.reference(options);\n                return true;\n            }\n        }));\n    }\n\n    // pass 4: add symbol definitions to loop scopes\n    // Safari/Webkit bug workaround - loop init let variable shadowing argument.\n    // https://github.com/mishoo/UglifyJS2/issues/1753\n    // https://bugs.webkit.org/show_bug.cgi?id=171041\n    if (options.safari10) {\n        for (var i = 0; i < for_scopes.length; i++) {\n            var scope = for_scopes[i];\n            scope.parent_scope.variables.forEach(function(def) {\n                push_uniq(scope.enclosed, def);\n            });\n        }\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"def_global\", function(node) {\n    var globals = this.globals, name = node.name;\n    if (globals.has(name)) {\n        return globals.get(name);\n    } else {\n        var g = new SymbolDef(this, node);\n        g.undeclared = true;\n        g.global = true;\n        globals.set(name, g);\n        return g;\n    }\n});\n\nAST_Scope.DEFMETHOD(\"init_scope_vars\", function(parent_scope) {\n    this.variables = new Map();         // map name to AST_SymbolVar (variables defined in this scope; includes functions)\n    this.functions = new Map();         // map name to AST_SymbolDefun (functions defined in this scope)\n    this.uses_with = false;             // will be set to true if this or some nested scope uses the `with` statement\n    this.uses_eval = false;             // will be set to true if this or nested scope uses the global `eval`\n    this.parent_scope = parent_scope;   // the parent scope\n    this.enclosed = [];                 // a list of variables from this or outer scope(s) that are referenced from this or inner scopes\n    this.cname = -1;                    // the current index for mangling functions/variables\n});\n\nAST_Node.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Class.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Lambda.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Toplevel.DEFMETHOD(\"is_block_scope\", return_false);\nAST_SwitchBranch.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Block.DEFMETHOD(\"is_block_scope\", return_true);\nAST_IterationStatement.DEFMETHOD(\"is_block_scope\", return_true);\n\nAST_Lambda.DEFMETHOD(\"init_scope_vars\", function() {\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n    this.def_variable(new AST_SymbolFunarg({\n        name: \"arguments\",\n        start: this.start,\n        end: this.end\n    }));\n});\n\nAST_Arrow.DEFMETHOD(\"init_scope_vars\", function() {\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n});\n\nAST_Symbol.DEFMETHOD(\"mark_enclosed\", function(options) {\n    var def = this.definition();\n    var s = this.scope;\n    while (s) {\n        push_uniq(s.enclosed, def);\n        if (options.keep_fnames) {\n            s.functions.forEach(function(d) {\n                if (keep_name(options.keep_fnames, d.name)) {\n                    push_uniq(def.scope.enclosed, d);\n                }\n            });\n        }\n        if (s === def.scope) break;\n        s = s.parent_scope;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"reference\", function(options) {\n    this.definition().references.push(this);\n    this.mark_enclosed(options);\n});\n\nAST_Scope.DEFMETHOD(\"find_variable\", function(name) {\n    if (name instanceof AST_Symbol) name = name.name;\n    return this.variables.get(name)\n        || (this.parent_scope && this.parent_scope.find_variable(name));\n});\n\nAST_Scope.DEFMETHOD(\"def_function\", function(symbol, init) {\n    var def = this.def_variable(symbol, init);\n    if (!def.init || def.init instanceof AST_Defun) def.init = init;\n    this.functions.set(symbol.name, def);\n    return def;\n});\n\nAST_Scope.DEFMETHOD(\"def_variable\", function(symbol, init) {\n    var def = this.variables.get(symbol.name);\n    if (def) {\n        def.orig.push(symbol);\n        if (def.init && (def.scope !== symbol.scope || def.init instanceof AST_Function)) {\n            def.init = init;\n        }\n    } else {\n        def = new SymbolDef(this, symbol, init);\n        this.variables.set(symbol.name, def);\n        def.global = !this.parent_scope;\n    }\n    return symbol.thedef = def;\n});\n\nfunction next_mangled(scope, options) {\n    var ext = scope.enclosed;\n    out: while (true) {\n        var m = base54(++scope.cname);\n        if (RESERVED_WORDS.has(m)) continue; // skip over \"do\"\n\n        // https://github.com/mishoo/UglifyJS2/issues/242 -- do not\n        // shadow a name reserved from mangling.\n        if (member(m, options.reserved)) continue;\n\n        // we must ensure that the mangled name does not shadow a name\n        // from some parent scope that is referenced in this or in\n        // inner scopes.\n        for (var i = ext.length; --i >= 0;) {\n            var sym = ext[i];\n            var name = sym.mangled_name || (sym.unmangleable(options) && sym.name);\n            if (m == name) continue out;\n        }\n        return m;\n    }\n}\n\nAST_Scope.DEFMETHOD(\"next_mangled\", function(options) {\n    return next_mangled(this, options);\n});\n\nAST_Toplevel.DEFMETHOD(\"next_mangled\", function(options) {\n    var name;\n    do {\n        name = next_mangled(this, options);\n    } while (this.mangled_names.has(name));\n    return name;\n});\n\nAST_Function.DEFMETHOD(\"next_mangled\", function(options, def) {\n    // #179, #326\n    // in Safari strict mode, something like (function x(x){...}) is a syntax error;\n    // a function expression's argument cannot shadow the function expression's name\n\n    var tricky_def = def.orig[0] instanceof AST_SymbolFunarg && this.name && this.name.definition();\n\n    // the function's mangled_name is null when keep_fnames is true\n    var tricky_name = tricky_def ? tricky_def.mangled_name || tricky_def.name : null;\n\n    while (true) {\n        var name = next_mangled(this, options);\n        if (!tricky_name || tricky_name != name)\n            return name;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"unmangleable\", function(options) {\n    var def = this.definition();\n    return !def || def.unmangleable(options);\n});\n\n// labels are always mangleable\nAST_Label.DEFMETHOD(\"unmangleable\", return_false);\n\nAST_Symbol.DEFMETHOD(\"unreferenced\", function() {\n    return !this.definition().references.length && !this.scope.pinned();\n});\n\nAST_Symbol.DEFMETHOD(\"definition\", function() {\n    return this.thedef;\n});\n\nAST_Symbol.DEFMETHOD(\"global\", function() {\n    return this.definition().global;\n});\n\nAST_Toplevel.DEFMETHOD(\"_default_mangler_options\", function(options) {\n    options = defaults(options, {\n        eval        : false,\n        ie8         : false,\n        keep_classnames: false,\n        keep_fnames : false,\n        module      : false,\n        reserved    : [],\n        toplevel    : false,\n    });\n    if (options[\"module\"]) {\n        options.toplevel = true;\n    }\n    if (!Array.isArray(options.reserved)) options.reserved = [];\n    // Never mangle arguments\n    push_uniq(options.reserved, \"arguments\");\n    return options;\n});\n\nAST_Toplevel.DEFMETHOD(\"mangle_names\", function(options) {\n    options = this._default_mangler_options(options);\n\n    // We only need to mangle declaration nodes.  Special logic wired\n    // into the code generator will display the mangled name if it's\n    // present (and for AST_SymbolRef-s it'll use the mangled name of\n    // the AST_SymbolDeclaration that it points to).\n    var lname = -1;\n    var to_mangle = [];\n\n    var mangled_names = this.mangled_names = new Set();\n    if (options.cache) {\n        this.globals.forEach(collect);\n        if (options.cache.props) {\n            options.cache.props.forEach(function(mangled_name) {\n                mangled_names.add(mangled_name);\n            });\n        }\n    }\n\n    var tw = new TreeWalker(function(node, descend) {\n        if (node instanceof AST_LabeledStatement) {\n            // lname is incremented when we get to the AST_Label\n            var save_nesting = lname;\n            descend();\n            lname = save_nesting;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (node instanceof AST_Scope) {\n            node.variables.forEach(collect);\n            return;\n        }\n        if (node.is_block_scope()) {\n            node.block_scope.variables.forEach(collect);\n            return;\n        }\n        if (node instanceof AST_Label) {\n            var name;\n            do name = base54(++lname); while (RESERVED_WORDS.has(name));\n            node.mangled_name = name;\n            return true;\n        }\n        if (!(options.ie8 || options.safari10) && node instanceof AST_SymbolCatch) {\n            to_mangle.push(node.definition());\n            return;\n        }\n    });\n    this.walk(tw);\n    to_mangle.forEach(function(def) { def.mangle(options); });\n\n    function collect(symbol) {\n        if (!member(symbol.name, options.reserved)) {\n            if (!(symbol.export & MASK_EXPORT_DONT_MANGLE)) {\n                to_mangle.push(symbol);\n            }\n        }\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"find_colliding_names\", function(options) {\n    var cache = options.cache && options.cache.props;\n    var avoid = new Set();\n    options.reserved.forEach(to_avoid);\n    this.globals.forEach(add_def);\n    this.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Scope) node.variables.forEach(add_def);\n        if (node instanceof AST_SymbolCatch) add_def(node.definition());\n    }));\n    return avoid;\n\n    function to_avoid(name) {\n        avoid.add(name);\n    }\n\n    function add_def(def) {\n        var name = def.name;\n        if (def.global && cache && cache.has(name)) name = cache.get(name);\n        else if (!def.unmangleable(options)) return;\n        to_avoid(name);\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"expand_names\", function(options) {\n    base54.reset();\n    base54.sort();\n    options = this._default_mangler_options(options);\n    var avoid = this.find_colliding_names(options);\n    var cname = 0;\n    this.globals.forEach(rename);\n    this.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Scope) node.variables.forEach(rename);\n        if (node instanceof AST_SymbolCatch) rename(node.definition());\n    }));\n\n    function next_name() {\n        var name;\n        do {\n            name = base54(cname++);\n        } while (avoid.has(name) || RESERVED_WORDS.has(name));\n        return name;\n    }\n\n    function rename(def) {\n        if (def.global && options.cache) return;\n        if (def.unmangleable(options)) return;\n        if (member(def.name, options.reserved)) return;\n        var d = def.redefined();\n        def.name = d ? d.name : next_name();\n        def.orig.forEach(function(sym) {\n            sym.name = def.name;\n        });\n        def.references.forEach(function(sym) {\n            sym.name = def.name;\n        });\n    }\n});\n\nAST_Node.DEFMETHOD(\"tail_node\", return_this);\nAST_Sequence.DEFMETHOD(\"tail_node\", function() {\n    return this.expressions[this.expressions.length - 1];\n});\n\nAST_Toplevel.DEFMETHOD(\"compute_char_frequency\", function(options) {\n    options = this._default_mangler_options(options);\n    try {\n        AST_Node.prototype.print = function(stream, force_parens) {\n            this._print(stream, force_parens);\n            if (this instanceof AST_Symbol && !this.unmangleable(options)) {\n                base54.consider(this.name, -1);\n            } else if (options.properties) {\n                if (this instanceof AST_Dot) {\n                    base54.consider(this.property, -1);\n                } else if (this instanceof AST_Sub) {\n                    skip_string(this.property);\n                }\n            }\n        };\n        base54.consider(this.print_to_string(), 1);\n    } finally {\n        AST_Node.prototype.print = AST_Node.prototype._print;\n    }\n    base54.sort();\n\n    function skip_string(node) {\n        if (node instanceof AST_String) {\n            base54.consider(node.value, -1);\n        } else if (node instanceof AST_Conditional) {\n            skip_string(node.consequent);\n            skip_string(node.alternative);\n        } else if (node instanceof AST_Sequence) {\n            skip_string(node.tail_node());\n        }\n    }\n});\n\nvar base54 = (function() {\n    var leading = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_\".split(\"\");\n    var digits = \"0123456789\".split(\"\");\n    var chars, frequency;\n    function reset() {\n        frequency = new Map();\n        leading.forEach(function(ch) {\n            frequency.set(ch, 0);\n        });\n        digits.forEach(function(ch) {\n            frequency.set(ch, 0);\n        });\n    }\n    base54.consider = function(str, delta) {\n        for (var i = str.length; --i >= 0;) {\n            frequency.set(str[i], frequency.get(str[i]) + delta);\n        }\n    };\n    function compare(a, b) {\n        return frequency.get(b) - frequency.get(a);\n    }\n    base54.sort = function() {\n        chars = mergeSort(leading, compare).concat(mergeSort(digits, compare));\n    };\n    base54.reset = reset;\n    reset();\n    function base54(num) {\n        var ret = \"\", base = 54;\n        num++;\n        do {\n            num--;\n            ret += chars[num % base];\n            num = Math.floor(num / base);\n            base = 64;\n        } while (num > 0);\n        return ret;\n    }\n    return base54;\n})();\n\nexport {\n    base54,\n    SymbolDef,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    defaults,\n    HOP,\n    keep_name,\n    makePredicate,\n    map_add,\n    MAP,\n    member,\n    noop,\n    remove,\n    return_false,\n    return_null,\n    return_this,\n    return_true,\n    string_template,\n} from \"../utils/index.js\";\nimport { first_in_statement, } from \"../utils/first_in_statement.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DWLoop,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Infinity,\n    AST_IterationStatement,\n    AST_Jump,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NaN,\n    AST_New,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_String,\n    AST_Sub,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolFunarg,\n    AST_SymbolLambda,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeTransformer,\n    TreeWalker,\n    walk_body,\n} from \"../ast.js\";\nimport {\n    is_identifier_string,\n    JS_Parse_Error,\n    parse,\n    PRECEDENCE,\n} from \"../parse.js\";\nimport { OutputStream } from \"../output.js\";\nimport {\n    base54,\n    SymbolDef,\n} from \"../scope.js\";\n\nclass Compressor extends TreeWalker {\n    constructor(options, false_by_default) {\n        super();\n        if (options.defaults !== undefined && !options.defaults) false_by_default = true;\n        this.options = defaults(options, {\n            arguments     : false,\n            arrows        : !false_by_default,\n            booleans      : !false_by_default,\n            booleans_as_integers : false,\n            collapse_vars : !false_by_default,\n            comparisons   : !false_by_default,\n            computed_props: !false_by_default,\n            conditionals  : !false_by_default,\n            dead_code     : !false_by_default,\n            defaults      : true,\n            directives    : !false_by_default,\n            drop_console  : false,\n            drop_debugger : !false_by_default,\n            ecma          : 5,\n            evaluate      : !false_by_default,\n            expression    : false,\n            global_defs   : false,\n            hoist_funs    : false,\n            hoist_props   : !false_by_default,\n            hoist_vars    : false,\n            ie8           : false,\n            if_return     : !false_by_default,\n            inline        : !false_by_default,\n            join_vars     : !false_by_default,\n            keep_classnames: false,\n            keep_fargs    : true,\n            keep_fnames   : false,\n            keep_infinity : false,\n            loops         : !false_by_default,\n            module        : false,\n            negate_iife   : !false_by_default,\n            passes        : 1,\n            properties    : !false_by_default,\n            pure_getters  : !false_by_default && \"strict\",\n            pure_funcs    : null,\n            reduce_funcs  : !false_by_default,\n            reduce_vars   : !false_by_default,\n            sequences     : !false_by_default,\n            side_effects  : !false_by_default,\n            switches      : !false_by_default,\n            top_retain    : null,\n            toplevel      : !!(options && options[\"top_retain\"]),\n            typeofs       : !false_by_default,\n            unsafe        : false,\n            unsafe_arrows : false,\n            unsafe_comps  : false,\n            unsafe_Function: false,\n            unsafe_math   : false,\n            unsafe_methods: false,\n            unsafe_proto  : false,\n            unsafe_regexp : false,\n            unsafe_undefined: false,\n            unused        : !false_by_default,\n            warnings      : false,\n        }, true);\n        var global_defs = this.options[\"global_defs\"];\n        if (typeof global_defs == \"object\") for (var key in global_defs) {\n            if (key[0] === \"@\" && HOP(global_defs, key)) {\n                global_defs[key.slice(1)] = parse(global_defs[key], {\n                    expression: true\n                });\n            }\n        }\n        if (this.options[\"inline\"] === true) this.options[\"inline\"] = 3;\n        var pure_funcs = this.options[\"pure_funcs\"];\n        if (typeof pure_funcs == \"function\") {\n            this.pure_funcs = pure_funcs;\n        } else {\n            this.pure_funcs = pure_funcs ? function(node) {\n                return !pure_funcs.includes(node.expression.print_to_string());\n            } : return_true;\n        }\n        var top_retain = this.options[\"top_retain\"];\n        if (top_retain instanceof RegExp) {\n            this.top_retain = function(def) {\n                return top_retain.test(def.name);\n            };\n        } else if (typeof top_retain == \"function\") {\n            this.top_retain = top_retain;\n        } else if (top_retain) {\n            if (typeof top_retain == \"string\") {\n                top_retain = top_retain.split(/,/);\n            }\n            this.top_retain = function(def) {\n                return top_retain.includes(def.name);\n            };\n        }\n        if (this.options[\"module\"]) {\n            this.directives[\"use strict\"] = true;\n            this.options[\"toplevel\"] = true;\n        }\n        var toplevel = this.options[\"toplevel\"];\n        this.toplevel = typeof toplevel == \"string\" ? {\n            funcs: /funcs/.test(toplevel),\n            vars: /vars/.test(toplevel)\n        } : {\n            funcs: toplevel,\n            vars: toplevel\n        };\n        var sequences = this.options[\"sequences\"];\n        this.sequences_limit = sequences == 1 ? 800 : sequences | 0;\n        this.warnings_produced = {};\n    }\n\n    option(key) {\n        return this.options[key];\n    }\n\n    exposed(def) {\n        if (def.export) return true;\n        if (def.global) for (var i = 0, len = def.orig.length; i < len; i++)\n            if (!this.toplevel[def.orig[i] instanceof AST_SymbolDefun ? \"funcs\" : \"vars\"])\n                return true;\n        return false;\n    }\n\n    in_boolean_context() {\n        if (!this.option(\"booleans\")) return false;\n        var self = this.self();\n        for (var i = 0, p; p = this.parent(i); i++) {\n            if (p instanceof AST_SimpleStatement\n                || p instanceof AST_Conditional && p.condition === self\n                || p instanceof AST_DWLoop && p.condition === self\n                || p instanceof AST_For && p.condition === self\n                || p instanceof AST_If && p.condition === self\n                || p instanceof AST_UnaryPrefix && p.operator == \"!\" && p.expression === self) {\n                return true;\n            }\n            if (p instanceof AST_Binary && (p.operator == \"&&\" || p.operator == \"||\")\n                || p instanceof AST_Conditional\n                || p.tail_node() === self) {\n                self = p;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    compress(node) {\n        node = node.resolve_defines(this);\n        if (this.option(\"expression\")) {\n            node.process_expression(true);\n        }\n        var passes = +this.options.passes || 1;\n        var min_count = 1 / 0;\n        var stopping = false;\n        var mangle = { ie8: this.option(\"ie8\") };\n        for (var pass = 0; pass < passes; pass++) {\n            node.figure_out_scope(mangle);\n            if (pass === 0 && this.option(\"drop_console\")) {\n                // must be run before reduce_vars and compress pass\n                node = node.drop_console();\n            }\n            if (pass > 0 || this.option(\"reduce_vars\"))\n                node.reset_opt_flags(this);\n            node = node.transform(this);\n            if (passes > 1) {\n                var count = 0;\n                node.walk(new TreeWalker(function() {\n                    count++;\n                }));\n                this.info(\"pass \" + pass + \": last_count: \" + min_count + \", count: \" + count);\n                if (count < min_count) {\n                    min_count = count;\n                    stopping = false;\n                } else if (stopping) {\n                    break;\n                } else {\n                    stopping = true;\n                }\n            }\n        }\n        if (this.option(\"expression\")) {\n            node.process_expression(false);\n        }\n        return node;\n    }\n\n    info() {\n        if (this.options.warnings == \"verbose\") {\n            AST_Node.warn.apply(AST_Node, arguments);\n        }\n    }\n\n    warn(text, props) {\n        if (this.options.warnings) {\n            // only emit unique warnings\n            var message = string_template(text, props);\n            if (!(message in this.warnings_produced)) {\n                this.warnings_produced[message] = true;\n                AST_Node.warn.apply(AST_Node, arguments);\n            }\n        }\n    }\n\n    clear_warnings() {\n        this.warnings_produced = {};\n    }\n    before(node, descend, in_list) {\n        if (node._squeezed) return node;\n        var was_scope = false;\n        if (node instanceof AST_Scope) {\n            node = node.hoist_properties(this);\n            node = node.hoist_declarations(this);\n            was_scope = true;\n        }\n        // Before https://github.com/mishoo/UglifyJS2/pull/1602 AST_Node.optimize()\n        // would call AST_Node.transform() if a different instance of AST_Node is\n        // produced after def_optimize().\n        // This corrupts TreeWalker.stack, which cause AST look-ups to malfunction.\n        // Migrate and defer all children's AST_Node.transform() to below, which\n        // will now happen after this parent AST_Node has been properly substituted\n        // thus gives a consistent AST snapshot.\n        descend(node, this);\n        // Existing code relies on how AST_Node.optimize() worked, and omitting the\n        // following replacement call would result in degraded efficiency of both\n        // output and performance.\n        descend(node, this);\n        var opt = node.optimize(this);\n        if (was_scope && opt instanceof AST_Scope) {\n            opt.drop_unused(this);\n            descend(opt, this);\n        }\n        if (opt === node) opt._squeezed = true;\n        return opt;\n    }\n}\n\n(function() {\n\n    function def_optimize(node, optimizer) {\n        node.DEFMETHOD(\"optimize\", function(compressor) {\n            var self = this;\n            if (self._optimized) return self;\n            if (compressor.has_directive(\"use asm\")) return self;\n            var opt = optimizer(self, compressor);\n            opt._optimized = true;\n            return opt;\n        });\n    }\n\n    def_optimize(AST_Node, function(self, compressor) {\n        return self;\n    });\n\n    AST_Toplevel.DEFMETHOD(\"drop_console\", function() {\n        return this.transform(new TreeTransformer(function(self) {\n            if (self.TYPE == \"Call\") {\n                var exp = self.expression;\n                if (exp instanceof AST_PropAccess) {\n                    var name = exp.expression;\n                    while (name.expression) {\n                        name = name.expression;\n                    }\n                    if (is_undeclared_ref(name) && name.name == \"console\") {\n                        return make_node(AST_Undefined, self);\n                    }\n                }\n            }\n        }));\n    });\n\n    AST_Node.DEFMETHOD(\"equivalent_to\", function(node) {\n        return this.TYPE == node.TYPE && this.print_to_string() == node.print_to_string();\n    });\n\n    AST_Scope.DEFMETHOD(\"process_expression\", function(insert, compressor) {\n        var self = this;\n        var tt = new TreeTransformer(function(node) {\n            if (insert && node instanceof AST_SimpleStatement) {\n                return make_node(AST_Return, node, {\n                    value: node.body\n                });\n            }\n            if (!insert && node instanceof AST_Return) {\n                if (compressor) {\n                    var value = node.value && node.value.drop_side_effect_free(compressor, true);\n                    return value ? make_node(AST_SimpleStatement, node, {\n                        body: value\n                    }) : make_node(AST_EmptyStatement, node);\n                }\n                return make_node(AST_SimpleStatement, node, {\n                    body: node.value || make_node(AST_UnaryPrefix, node, {\n                        operator: \"void\",\n                        expression: make_node(AST_Number, node, {\n                            value: 0\n                        })\n                    })\n                });\n            }\n            if (node instanceof AST_Class || node instanceof AST_Lambda && node !== self) {\n                return node;\n            }\n            if (node instanceof AST_Block) {\n                var index = node.body.length - 1;\n                if (index >= 0) {\n                    node.body[index] = node.body[index].transform(tt);\n                }\n            } else if (node instanceof AST_If) {\n                node.body = node.body.transform(tt);\n                if (node.alternative) {\n                    node.alternative = node.alternative.transform(tt);\n                }\n            } else if (node instanceof AST_With) {\n                node.body = node.body.transform(tt);\n            }\n            return node;\n        });\n        self.transform(tt);\n    });\n\n    function read_property(obj, key) {\n        key = get_value(key);\n        if (key instanceof AST_Node) return;\n        var value;\n        if (obj instanceof AST_Array) {\n            var elements = obj.elements;\n            if (key == \"length\") return make_node_from_constant(elements.length, obj);\n            if (typeof key == \"number\" && key in elements) value = elements[key];\n        } else if (obj instanceof AST_Object) {\n            key = \"\" + key;\n            var props = obj.properties;\n            for (var i = props.length; --i >= 0;) {\n                var prop = props[i];\n                if (!(prop instanceof AST_ObjectKeyVal)) return;\n                if (!value && props[i].key === key) value = props[i].value;\n            }\n        }\n        return value instanceof AST_SymbolRef && value.fixed_value() || value;\n    }\n\n    function is_modified(compressor, tw, node, value, level, immutable) {\n        var parent = tw.parent(level);\n        var lhs = is_lhs(node, parent);\n        if (lhs) return lhs;\n        if (!immutable\n            && parent instanceof AST_Call\n            && parent.expression === node\n            && !(value instanceof AST_Arrow)\n            && !(value instanceof AST_Class)\n            && !parent.is_expr_pure(compressor)\n            && (!(value instanceof AST_Function)\n                || !(parent instanceof AST_New) && value.contains_this())) {\n            return true;\n        }\n        if (parent instanceof AST_Array) {\n            return is_modified(compressor, tw, parent, parent, level + 1);\n        }\n        if (parent instanceof AST_ObjectKeyVal && node === parent.value) {\n            var obj = tw.parent(level + 1);\n            return is_modified(compressor, tw, obj, obj, level + 2);\n        }\n        if (parent instanceof AST_PropAccess && parent.expression === node) {\n            var prop = read_property(value, parent.property);\n            return !immutable && is_modified(compressor, tw, parent, prop, level + 1);\n        }\n    }\n\n    (function(def_reduce_vars) {\n        def_reduce_vars(AST_Node, noop);\n\n        function reset_def(compressor, def) {\n            def.assignments = 0;\n            def.chained = false;\n            def.direct_access = false;\n            def.escaped = false;\n            if (def.scope.pinned()) {\n                def.fixed = false;\n            } else if (def.orig[0] instanceof AST_SymbolConst || !compressor.exposed(def)) {\n                def.fixed = def.init;\n            } else {\n                def.fixed = false;\n            }\n            def.recursive_refs = 0;\n            def.references = [];\n            def.should_replace = undefined;\n            def.single_use = undefined;\n        }\n\n        function reset_variables(tw, compressor, node) {\n            node.variables.forEach(function(def) {\n                reset_def(compressor, def);\n                if (def.fixed === null) {\n                    def.safe_ids = tw.safe_ids;\n                    mark(tw, def, true);\n                } else if (def.fixed) {\n                    tw.loop_ids.set(def.id, tw.in_loop);\n                    mark(tw, def, true);\n                }\n            });\n        }\n\n        function reset_block_variables(compressor, node) {\n            if (node.block_scope) node.block_scope.variables.forEach(function(def) {\n                reset_def(compressor, def);\n            });\n        }\n\n        function push(tw) {\n            tw.safe_ids = Object.create(tw.safe_ids);\n        }\n\n        function pop(tw) {\n            tw.safe_ids = Object.getPrototypeOf(tw.safe_ids);\n        }\n\n        function mark(tw, def, safe) {\n            tw.safe_ids[def.id] = safe;\n        }\n\n        function safe_to_read(tw, def) {\n            if (def.single_use == \"m\") return false;\n            if (tw.safe_ids[def.id]) {\n                if (def.fixed == null) {\n                    var orig = def.orig[0];\n                    if (orig instanceof AST_SymbolFunarg || orig.name == \"arguments\") return false;\n                    def.fixed = make_node(AST_Undefined, orig);\n                }\n                return true;\n            }\n            return def.fixed instanceof AST_Defun;\n        }\n\n        function safe_to_assign(tw, def, scope, value) {\n            if (def.fixed === undefined) return true;\n            if (def.fixed === null && def.safe_ids) {\n                def.safe_ids[def.id] = false;\n                delete def.safe_ids;\n                return true;\n            }\n            if (!HOP(tw.safe_ids, def.id)) return false;\n            if (!safe_to_read(tw, def)) return false;\n            if (def.fixed === false) return false;\n            if (def.fixed != null && (!value || def.references.length > def.assignments)) return false;\n            if (def.fixed instanceof AST_Defun) {\n                return value instanceof AST_Node && def.fixed.parent_scope === scope;\n            }\n            return def.orig.every((sym) => {\n                return !(sym instanceof AST_SymbolConst\n                    || sym instanceof AST_SymbolDefun\n                    || sym instanceof AST_SymbolLambda);\n            });\n        }\n\n        function ref_once(tw, compressor, def) {\n            return compressor.option(\"unused\")\n                && !def.scope.pinned()\n                && def.references.length - def.recursive_refs == 1\n                && tw.loop_ids.get(def.id) === tw.in_loop;\n        }\n\n        function is_immutable(value) {\n            if (!value) return false;\n            return value.is_constant()\n                || value instanceof AST_Lambda\n                || value instanceof AST_This;\n        }\n\n        function mark_escaped(tw, d, scope, node, value, level, depth) {\n            var parent = tw.parent(level);\n            if (value) {\n                if (value.is_constant()) return;\n                if (value instanceof AST_ClassExpression) return;\n            }\n            if (parent instanceof AST_Assign && parent.operator == \"=\" && node === parent.right\n                || parent instanceof AST_Call && (node !== parent.expression || parent instanceof AST_New)\n                || parent instanceof AST_Exit && node === parent.value && node.scope !== d.scope\n                || parent instanceof AST_VarDef && node === parent.value\n                || parent instanceof AST_Yield && node === parent.value && node.scope !== d.scope) {\n                if (depth > 1 && !(value && value.is_constant_expression(scope))) depth = 1;\n                if (!d.escaped || d.escaped > depth) d.escaped = depth;\n                return;\n            } else if (parent instanceof AST_Array\n                || parent instanceof AST_Await\n                || parent instanceof AST_Binary && lazy_op.has(parent.operator)\n                || parent instanceof AST_Conditional && node !== parent.condition\n                || parent instanceof AST_Expansion\n                || parent instanceof AST_Sequence && node === parent.tail_node()) {\n                mark_escaped(tw, d, scope, parent, parent, level + 1, depth);\n            } else if (parent instanceof AST_ObjectKeyVal && node === parent.value) {\n                var obj = tw.parent(level + 1);\n                mark_escaped(tw, d, scope, obj, obj, level + 2, depth);\n            } else if (parent instanceof AST_PropAccess && node === parent.expression) {\n                value = read_property(value, parent.property);\n                mark_escaped(tw, d, scope, parent, value, level + 1, depth + 1);\n                if (value) return;\n            }\n            if (level > 0) return;\n            if (parent instanceof AST_Sequence && node !== parent.tail_node()) return;\n            if (parent instanceof AST_SimpleStatement) return;\n            d.direct_access = true;\n        }\n\n        var suppressor = new TreeWalker(function(node) {\n            if (!(node instanceof AST_Symbol)) return;\n            var d = node.definition();\n            if (!d) return;\n            if (node instanceof AST_SymbolRef) d.references.push(node);\n            d.fixed = false;\n        });\n        def_reduce_vars(AST_Accessor, function(tw, descend, compressor) {\n            push(tw);\n            reset_variables(tw, compressor, this);\n            descend();\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Arrow, mark_func_expr);\n        def_reduce_vars(AST_Assign, function(tw, descend, compressor) {\n            var node = this;\n            if (node.left instanceof AST_Destructuring) {\n                node.left.walk(suppressor);\n                return;\n            }\n            var sym = node.left;\n            if (!(sym instanceof AST_SymbolRef)) return;\n            var d = sym.definition();\n            var safe = safe_to_assign(tw, d, sym.scope, node.right);\n            d.assignments++;\n            if (!safe) return;\n            var fixed = d.fixed;\n            if (!fixed && node.operator != \"=\") return;\n            var eq = node.operator == \"=\";\n            var value = eq ? node.right : node;\n            if (is_modified(compressor, tw, node, value, 0)) return;\n            d.references.push(sym);\n            if (!eq) d.chained = true;\n            d.fixed = eq ? function() {\n                return node.right;\n            } : function() {\n                return make_node(AST_Binary, node, {\n                    operator: node.operator.slice(0, -1),\n                    left: fixed instanceof AST_Node ? fixed : fixed(),\n                    right: node.right\n                });\n            };\n            mark(tw, d, false);\n            node.right.walk(tw);\n            mark(tw, d, true);\n            mark_escaped(tw, d, sym.scope, node, value, 0, 1);\n            return true;\n        });\n        def_reduce_vars(AST_Binary, function(tw) {\n            if (!lazy_op.has(this.operator)) return;\n            this.left.walk(tw);\n            push(tw);\n            this.right.walk(tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Block, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n        });\n        def_reduce_vars(AST_Case, function(tw) {\n            push(tw);\n            this.expression.walk(tw);\n            pop(tw);\n            push(tw);\n            walk_body(this, tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_ClassExpression, function(tw, descend) {\n            this.inlined = false;\n            push(tw);\n            descend();\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Conditional, function(tw) {\n            this.condition.walk(tw);\n            push(tw);\n            this.consequent.walk(tw);\n            pop(tw);\n            push(tw);\n            this.alternative.walk(tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Default, function(tw, descend) {\n            push(tw);\n            descend();\n            pop(tw);\n            return true;\n        });\n\n        function mark_def_node(tw, descend, compressor) {\n            this.inlined = false;\n            var save_ids = tw.safe_ids;\n            tw.safe_ids = Object.create(null);\n            reset_variables(tw, compressor, this);\n            descend();\n            tw.safe_ids = save_ids;\n            return true;\n        }\n\n        def_reduce_vars(AST_DefClass, mark_def_node);\n        def_reduce_vars(AST_Defun, mark_def_node);\n        def_reduce_vars(AST_Do, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            this.body.walk(tw);\n            if (has_break_or_continue(this)) {\n                pop(tw);\n                push(tw);\n            }\n            this.condition.walk(tw);\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n        def_reduce_vars(AST_For, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            if (this.init) this.init.walk(tw);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            if (this.condition) this.condition.walk(tw);\n            this.body.walk(tw);\n            if (this.step) {\n                if (has_break_or_continue(this)) {\n                    pop(tw);\n                    push(tw);\n                }\n                this.step.walk(tw);\n            }\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n        def_reduce_vars(AST_ForIn, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            this.init.walk(suppressor);\n            this.object.walk(tw);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            this.body.walk(tw);\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n\n        function mark_func_expr(tw, descend, compressor) {\n            var node = this;\n            node.inlined = false;\n            push(tw);\n            reset_variables(tw, compressor, node);\n            if (node.uses_arguments) {\n                descend();\n                pop(tw);\n                return;\n            }\n            var iife;\n            if (!node.name\n                && (iife = tw.parent()) instanceof AST_Call\n                && iife.expression === node) {\n                // Virtually turn IIFE parameters into variable definitions:\n                //   (function(a,b) {...})(c,d) => (function() {var a=c,b=d; ...})()\n                // So existing transformation rules can work on them.\n                node.argnames.forEach(function(arg, i) {\n                    if (!arg.definition) return;\n                    var d = arg.definition();\n                    // Avoid setting fixed when there's more than one origin for a variable value\n                    if (d.orig.length > 1) return;\n                    if (d.fixed === undefined && (!node.uses_arguments || tw.has_directive(\"use strict\"))) {\n                        d.fixed = function() {\n                            return iife.args[i] || make_node(AST_Undefined, iife);\n                        };\n                        tw.loop_ids.set(d.id, tw.in_loop);\n                        mark(tw, d, true);\n                    } else {\n                        d.fixed = false;\n                    }\n                });\n            }\n            descend();\n            pop(tw);\n            return true;\n        }\n\n        def_reduce_vars(AST_Function, mark_func_expr);\n        def_reduce_vars(AST_If, function(tw) {\n            this.condition.walk(tw);\n            push(tw);\n            this.body.walk(tw);\n            pop(tw);\n            if (this.alternative) {\n                push(tw);\n                this.alternative.walk(tw);\n                pop(tw);\n            }\n            return true;\n        });\n        def_reduce_vars(AST_LabeledStatement, function(tw) {\n            push(tw);\n            this.body.walk(tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_SymbolCatch, function() {\n            this.definition().fixed = false;\n        });\n        def_reduce_vars(AST_SymbolRef, function(tw, descend, compressor) {\n            var d = this.definition();\n            d.references.push(this);\n            if (d.references.length == 1\n                && !d.fixed\n                && d.orig[0] instanceof AST_SymbolDefun) {\n                tw.loop_ids.set(d.id, tw.in_loop);\n            }\n            var value;\n            if (d.fixed === undefined || !safe_to_read(tw, d)) {\n                d.fixed = false;\n            } else if (d.fixed) {\n                value = this.fixed_value();\n                if (value instanceof AST_Lambda && recursive_ref(tw, d)) {\n                    d.recursive_refs++;\n                } else if (value && !compressor.exposed(d) && ref_once(tw, compressor, d)) {\n                    d.single_use = value instanceof AST_Lambda && !value.pinned()\n                        || value instanceof AST_Class\n                        || d.scope === this.scope && value.is_constant_expression();\n                } else {\n                    d.single_use = false;\n                }\n                if (is_modified(compressor, tw, this, value, 0, is_immutable(value))) {\n                    if (d.single_use) {\n                        d.single_use = \"m\";\n                    } else {\n                        d.fixed = false;\n                    }\n                }\n            }\n            mark_escaped(tw, d, this.scope, this, value, 0, 1);\n        });\n        def_reduce_vars(AST_Toplevel, function(tw, descend, compressor) {\n            this.globals.forEach(function(def) {\n                reset_def(compressor, def);\n            });\n            reset_variables(tw, compressor, this);\n        });\n        def_reduce_vars(AST_Try, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            push(tw);\n            walk_body(this, tw);\n            pop(tw);\n            if (this.bcatch) {\n                push(tw);\n                this.bcatch.walk(tw);\n                pop(tw);\n            }\n            if (this.bfinally) this.bfinally.walk(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Unary, function(tw, descend) {\n            var node = this;\n            if (node.operator !== \"++\" && node.operator !== \"--\") return;\n            var exp = node.expression;\n            if (!(exp instanceof AST_SymbolRef)) return;\n            var d = exp.definition();\n            var safe = safe_to_assign(tw, d, exp.scope, true);\n            d.assignments++;\n            if (!safe) return;\n            var fixed = d.fixed;\n            if (!fixed) return;\n            d.references.push(exp);\n            d.chained = true;\n            d.fixed = function() {\n                return make_node(AST_Binary, node, {\n                    operator: node.operator.slice(0, -1),\n                    left: make_node(AST_UnaryPrefix, node, {\n                        operator: \"+\",\n                        expression: fixed instanceof AST_Node ? fixed : fixed()\n                    }),\n                    right: make_node(AST_Number, node, {\n                        value: 1\n                    })\n                });\n            };\n            mark(tw, d, true);\n            return true;\n        });\n        def_reduce_vars(AST_VarDef, function(tw, descend) {\n            var node = this;\n            if (node.name instanceof AST_Destructuring) {\n                node.name.walk(suppressor);\n                return;\n            }\n            var d = node.name.definition();\n            if (node.value) {\n                if (safe_to_assign(tw, d, node.name.scope, node.value)) {\n                    d.fixed = function() {\n                        return node.value;\n                    };\n                    tw.loop_ids.set(d.id, tw.in_loop);\n                    mark(tw, d, false);\n                    descend();\n                    mark(tw, d, true);\n                    return true;\n                } else {\n                    d.fixed = false;\n                }\n            }\n        });\n        def_reduce_vars(AST_While, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            descend();\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"reduce_vars\", func);\n    });\n\n    AST_Toplevel.DEFMETHOD(\"reset_opt_flags\", function(compressor) {\n        var self = this;\n        var reduce_vars = compressor.option(\"reduce_vars\");\n        var tw = new TreeWalker(function(node, descend) {\n            node._squeezed = false;\n            node._optimized = false;\n            if (reduce_vars) {\n                if (compressor.top_retain) {\n                    if (tw.parent() === self)\n                        node._top = true;\n                    else\n                        delete node._top;\n                }\n                return node.reduce_vars(tw, descend, compressor);\n            }\n        });\n        // Stack of look-up tables to keep track of whether a `SymbolDef` has been\n        // properly assigned before use:\n        // - `push()` & `pop()` when visiting conditional branches\n        // - backup & restore via `save_ids` when visiting out-of-order sections\n        tw.safe_ids = Object.create(null);\n        tw.in_loop = null;\n        tw.loop_ids = new Map();\n        self.walk(tw);\n    });\n\n    AST_Symbol.DEFMETHOD(\"fixed_value\", function() {\n        var fixed = this.definition().fixed;\n        if (!fixed || fixed instanceof AST_Node) return fixed;\n        return fixed();\n    });\n\n    AST_SymbolRef.DEFMETHOD(\"is_immutable\", function() {\n        var orig = this.definition().orig;\n        return orig.length == 1 && orig[0] instanceof AST_SymbolLambda;\n    });\n\n    function is_func_expr(node) {\n        return node instanceof AST_Arrow || node instanceof AST_Function;\n    }\n\n    function is_lhs_read_only(lhs) {\n        if (lhs instanceof AST_This) return true;\n        if (lhs instanceof AST_SymbolRef) return lhs.definition().orig[0] instanceof AST_SymbolLambda;\n        if (lhs instanceof AST_PropAccess) {\n            lhs = lhs.expression;\n            if (lhs instanceof AST_SymbolRef) {\n                if (lhs.is_immutable()) return false;\n                lhs = lhs.fixed_value();\n            }\n            if (!lhs) return true;\n            if (lhs instanceof AST_RegExp) return false;\n            if (lhs instanceof AST_Constant) return true;\n            return is_lhs_read_only(lhs);\n        }\n        return false;\n    }\n\n    function is_ref_of(ref, type) {\n        if (!(ref instanceof AST_SymbolRef)) return false;\n        var orig = ref.definition().orig;\n        for (var i = orig.length; --i >= 0;) {\n            if (orig[i] instanceof type) return true;\n        }\n    }\n\n    function find_variable(compressor, name) {\n        var scope, i = 0;\n        while (scope = compressor.parent(i++)) {\n            if (scope instanceof AST_Scope) break;\n            if (scope instanceof AST_Catch && scope.argname) {\n                scope = scope.argname.definition().scope;\n                break;\n            }\n        }\n        return scope.find_variable(name);\n    }\n\n    function make_node(ctor, orig, props) {\n        if (!props) props = {};\n        if (orig) {\n            if (!props.start) props.start = orig.start;\n            if (!props.end) props.end = orig.end;\n        }\n        return new ctor(props);\n    }\n\n    function make_sequence(orig, expressions) {\n        if (expressions.length == 1) return expressions[0];\n        return make_node(AST_Sequence, orig, {\n            expressions: expressions.reduce(merge_sequence, [])\n        });\n    }\n\n    function make_node_from_constant(val, orig) {\n        switch (typeof val) {\n          case \"string\":\n            return make_node(AST_String, orig, {\n                value: val\n            });\n          case \"number\":\n            if (isNaN(val)) return make_node(AST_NaN, orig);\n            if (isFinite(val)) {\n                return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                    operator: \"-\",\n                    expression: make_node(AST_Number, orig, { value: -val })\n                }) : make_node(AST_Number, orig, { value: val });\n            }\n            return val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                operator: \"-\",\n                expression: make_node(AST_Infinity, orig)\n            }) : make_node(AST_Infinity, orig);\n          case \"boolean\":\n            return make_node(val ? AST_True : AST_False, orig);\n          case \"undefined\":\n            return make_node(AST_Undefined, orig);\n          default:\n            if (val === null) {\n                return make_node(AST_Null, orig, { value: null });\n            }\n            if (val instanceof RegExp) {\n                return make_node(AST_RegExp, orig, { value: val });\n            }\n            throw new Error(string_template(\"Can't handle constant of type: {type}\", {\n                type: typeof val\n            }));\n        }\n    }\n\n    // we shouldn't compress (1,func)(something) to\n    // func(something) because that changes the meaning of\n    // the func (becomes lexical instead of global).\n    function maintain_this_binding(parent, orig, val) {\n        if (parent instanceof AST_UnaryPrefix && parent.operator == \"delete\"\n            || parent instanceof AST_Call && parent.expression === orig\n                && (val instanceof AST_PropAccess || val instanceof AST_SymbolRef && val.name == \"eval\")) {\n            return make_sequence(orig, [ make_node(AST_Number, orig, { value: 0 }), val ]);\n        }\n        return val;\n    }\n\n    function merge_sequence(array, node) {\n        if (node instanceof AST_Sequence) {\n            array.push.apply(array, node.expressions);\n        } else {\n            array.push(node);\n        }\n        return array;\n    }\n\n    function as_statement_array(thing) {\n        if (thing === null) return [];\n        if (thing instanceof AST_BlockStatement) return thing.body;\n        if (thing instanceof AST_EmptyStatement) return [];\n        if (thing instanceof AST_Statement) return [ thing ];\n        throw new Error(\"Can't convert thing to statement array\");\n    }\n\n    function is_empty(thing) {\n        if (thing === null) return true;\n        if (thing instanceof AST_EmptyStatement) return true;\n        if (thing instanceof AST_BlockStatement) return thing.body.length == 0;\n        return false;\n    }\n\n    function can_be_evicted_from_block(node) {\n        return !(\n            node instanceof AST_DefClass ||\n            node instanceof AST_Defun ||\n            node instanceof AST_Let ||\n            node instanceof AST_Const ||\n            node instanceof AST_Export ||\n            node instanceof AST_Import\n        );\n    }\n\n    function loop_body(x) {\n        if (x instanceof AST_IterationStatement) {\n            return x.body instanceof AST_BlockStatement ? x.body : x;\n        }\n        return x;\n    }\n\n    function is_iife_call(node) {\n        if (node.TYPE != \"Call\") return false;\n        return node.expression instanceof AST_Function || is_iife_call(node.expression);\n    }\n\n    function is_undeclared_ref(node) {\n        return node instanceof AST_SymbolRef && node.definition().undeclared;\n    }\n\n    var global_names = makePredicate(\"Array Boolean clearInterval clearTimeout console Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error escape eval EvalError Function isFinite isNaN JSON Math Number parseFloat parseInt RangeError ReferenceError RegExp Object setInterval setTimeout String SyntaxError TypeError unescape URIError\");\n    AST_SymbolRef.DEFMETHOD(\"is_declared\", function(compressor) {\n        return !this.definition().undeclared\n            || compressor.option(\"unsafe\") && global_names.has(this.name);\n    });\n\n    var identifier_atom = makePredicate(\"Infinity NaN undefined\");\n    function is_identifier_atom(node) {\n        return node instanceof AST_Infinity\n            || node instanceof AST_NaN\n            || node instanceof AST_Undefined;\n    }\n\n    function tighten_body(statements, compressor) {\n        var in_loop, in_try;\n        var scope = compressor.find_parent(AST_Scope).get_defun_scope();\n        find_loop_scope_try();\n        var CHANGED, max_iter = 10;\n        do {\n            CHANGED = false;\n            eliminate_spurious_blocks(statements);\n            if (compressor.option(\"dead_code\")) {\n                eliminate_dead_code(statements, compressor);\n            }\n            if (compressor.option(\"if_return\")) {\n                handle_if_return(statements, compressor);\n            }\n            if (compressor.sequences_limit > 0) {\n                sequencesize(statements, compressor);\n                sequencesize_2(statements, compressor);\n            }\n            if (compressor.option(\"join_vars\")) {\n                join_consecutive_vars(statements);\n            }\n            if (compressor.option(\"collapse_vars\")) {\n                collapse(statements, compressor);\n            }\n        } while (CHANGED && max_iter-- > 0);\n\n        function find_loop_scope_try() {\n            var node = compressor.self(), level = 0;\n            do {\n                if (node instanceof AST_Catch || node instanceof AST_Finally) {\n                    level++;\n                } else if (node instanceof AST_IterationStatement) {\n                    in_loop = true;\n                } else if (node instanceof AST_Scope) {\n                    scope = node;\n                    break;\n                } else if (node instanceof AST_Try) {\n                    in_try = true;\n                }\n            } while (node = compressor.parent(level++));\n        }\n\n        // Search from right to left for assignment-like expressions:\n        // - `var a = x;`\n        // - `a = x;`\n        // - `++a`\n        // For each candidate, scan from left to right for first usage, then try\n        // to fold assignment into the site for compression.\n        // Will not attempt to collapse assignments into or past code blocks\n        // which are not sequentially executed, e.g. loops and conditionals.\n        function collapse(statements, compressor) {\n            if (scope.pinned()) return statements;\n            var args;\n            var candidates = [];\n            var stat_index = statements.length;\n            var scanner = new TreeTransformer(function(node, descend) {\n                if (abort) return node;\n                // Skip nodes before `candidate` as quickly as possible\n                if (!hit) {\n                    if (node !== hit_stack[hit_index]) return node;\n                    hit_index++;\n                    if (hit_index < hit_stack.length) return handle_custom_scan_order(node);\n                    hit = true;\n                    stop_after = find_stop(node, 0);\n                    if (stop_after === node) abort = true;\n                    return node;\n                }\n                // Stop immediately if these node types are encountered\n                var parent = scanner.parent();\n                if (node instanceof AST_Assign && node.operator != \"=\" && lhs.equivalent_to(node.left)\n                    || node instanceof AST_Await\n                    || node instanceof AST_Call && lhs instanceof AST_PropAccess && lhs.equivalent_to(node.expression)\n                    || node instanceof AST_Debugger\n                    || node instanceof AST_Destructuring\n                    || node instanceof AST_Expansion\n                       && node.expression instanceof AST_Symbol\n                       && node.expression.definition().references.length > 1\n                    || node instanceof AST_IterationStatement && !(node instanceof AST_For)\n                    || node instanceof AST_LoopControl\n                    || node instanceof AST_Try\n                    || node instanceof AST_With\n                    || node instanceof AST_Yield\n                    || node instanceof AST_Export\n                    || parent instanceof AST_For && node !== parent.init\n                    || !replace_all\n                        && (node instanceof AST_SymbolRef && !node.is_declared(compressor))) {\n                    abort = true;\n                    return node;\n                }\n                // Stop only if candidate is found within conditional branches\n                if (!stop_if_hit && (!lhs_local || !replace_all)\n                    && (parent instanceof AST_Binary && lazy_op.has(parent.operator) && parent.left !== node\n                        || parent instanceof AST_Conditional && parent.condition !== node\n                        || parent instanceof AST_If && parent.condition !== node)) {\n                    stop_if_hit = parent;\n                }\n                // Replace variable with assignment when found\n                if (can_replace\n                    && !(node instanceof AST_SymbolDeclaration)\n                    && lhs.equivalent_to(node)) {\n                    if (stop_if_hit) {\n                        abort = true;\n                        return node;\n                    }\n                    if (is_lhs(node, parent)) {\n                        if (value_def) replaced++;\n                        return node;\n                    } else {\n                        replaced++;\n                        if (value_def && candidate instanceof AST_VarDef) return node;\n                    }\n                    CHANGED = abort = true;\n                    compressor.info(\"Collapsing {name} [{file}:{line},{col}]\", {\n                        name: node.print_to_string(),\n                        file: node.start.file,\n                        line: node.start.line,\n                        col: node.start.col\n                    });\n                    if (candidate instanceof AST_UnaryPostfix) {\n                        return make_node(AST_UnaryPrefix, candidate, candidate);\n                    }\n                    if (candidate instanceof AST_VarDef) {\n                        var def = candidate.name.definition();\n                        var value = candidate.value;\n                        if (def.references.length - def.replaced == 1 && !compressor.exposed(def)) {\n                            def.replaced++;\n                            if (funarg && is_identifier_atom(value)) {\n                                return value.transform(compressor);\n                            } else {\n                                return maintain_this_binding(parent, node, value);\n                            }\n                        }\n                        return make_node(AST_Assign, candidate, {\n                            operator: \"=\",\n                            left: make_node(AST_SymbolRef, candidate.name, candidate.name),\n                            right: value\n                        });\n                    }\n                    candidate.write_only = false;\n                    return candidate;\n                }\n                // These node types have child nodes that execute sequentially,\n                // but are otherwise not safe to scan into or beyond them.\n                var sym;\n                if (node instanceof AST_Call\n                    || node instanceof AST_Exit\n                        && (side_effects || lhs instanceof AST_PropAccess || may_modify(lhs))\n                    || node instanceof AST_PropAccess\n                        && (side_effects || node.expression.may_throw_on_access(compressor))\n                    || node instanceof AST_SymbolRef\n                        && (lvalues.get(node.name) || side_effects && may_modify(node))\n                    || node instanceof AST_VarDef && node.value\n                        && (lvalues.has(node.name.name) || side_effects && may_modify(node.name))\n                    || (sym = is_lhs(node.left, node))\n                        && (sym instanceof AST_PropAccess || lvalues.has(sym.name))\n                    || may_throw\n                        && (in_try ? node.has_side_effects(compressor) : side_effects_external(node))) {\n                    stop_after = node;\n                    if (node instanceof AST_Scope) abort = true;\n                }\n                return handle_custom_scan_order(node);\n            }, function(node) {\n                if (abort) return;\n                if (stop_after === node) abort = true;\n                if (stop_if_hit === node) stop_if_hit = null;\n            });\n            var multi_replacer = new TreeTransformer(function(node) {\n                if (abort) return node;\n                // Skip nodes before `candidate` as quickly as possible\n                if (!hit) {\n                    if (node !== hit_stack[hit_index]) return node;\n                    hit_index++;\n                    if (hit_index < hit_stack.length) return;\n                    hit = true;\n                    return node;\n                }\n                // Replace variable when found\n                if (node instanceof AST_SymbolRef\n                    && node.name == def.name) {\n                    if (!--replaced) abort = true;\n                    if (is_lhs(node, multi_replacer.parent())) return node;\n                    def.replaced++;\n                    value_def.replaced--;\n                    return candidate.value;\n                }\n                // Skip (non-executed) functions and (leading) default case in switch statements\n                if (node instanceof AST_Default || node instanceof AST_Scope) return node;\n            });\n            while (--stat_index >= 0) {\n                // Treat parameters as collapsible in IIFE, i.e.\n                //   function(a, b){ ... }(x());\n                // would be translated into equivalent assignments:\n                //   var a = x(), b = undefined;\n                if (stat_index == 0 && compressor.option(\"unused\")) extract_args();\n                // Find collapsible assignments\n                var hit_stack = [];\n                extract_candidates(statements[stat_index]);\n                while (candidates.length > 0) {\n                    hit_stack = candidates.pop();\n                    var hit_index = 0;\n                    var candidate = hit_stack[hit_stack.length - 1];\n                    var value_def = null;\n                    var stop_after = null;\n                    var stop_if_hit = null;\n                    var lhs = get_lhs(candidate);\n                    if (!lhs || is_lhs_read_only(lhs) || lhs.has_side_effects(compressor)) continue;\n                    // Locate symbols which may execute code outside of scanning range\n                    var lvalues = get_lvalues(candidate);\n                    var lhs_local = is_lhs_local(lhs);\n                    if (lhs instanceof AST_SymbolRef) lvalues.set(lhs.name, false);\n                    var side_effects = value_has_side_effects(candidate);\n                    var replace_all = replace_all_symbols();\n                    var may_throw = candidate.may_throw(compressor);\n                    var funarg = candidate.name instanceof AST_SymbolFunarg;\n                    var hit = funarg;\n                    var abort = false, replaced = 0, can_replace = !args || !hit;\n                    if (!can_replace) {\n                        for (var j = compressor.self().argnames.lastIndexOf(candidate.name) + 1; !abort && j < args.length; j++) {\n                            args[j].transform(scanner);\n                        }\n                        can_replace = true;\n                    }\n                    for (var i = stat_index; !abort && i < statements.length; i++) {\n                        statements[i].transform(scanner);\n                    }\n                    if (value_def) {\n                        var def = candidate.name.definition();\n                        if (abort && def.references.length - def.replaced > replaced) replaced = false;\n                        else {\n                            abort = false;\n                            hit_index = 0;\n                            hit = funarg;\n                            for (var i = stat_index; !abort && i < statements.length; i++) {\n                                statements[i].transform(multi_replacer);\n                            }\n                            value_def.single_use = false;\n                        }\n                    }\n                    if (replaced && !remove_candidate(candidate)) statements.splice(stat_index, 1);\n                }\n            }\n\n            function handle_custom_scan_order(node) {\n                // Skip (non-executed) functions\n                if (node instanceof AST_Scope) return node;\n                // Scan case expressions first in a switch statement\n                if (node instanceof AST_Switch) {\n                    node.expression = node.expression.transform(scanner);\n                    for (var i = 0, len = node.body.length; !abort && i < len; i++) {\n                        var branch = node.body[i];\n                        if (branch instanceof AST_Case) {\n                            if (!hit) {\n                                if (branch !== hit_stack[hit_index]) continue;\n                                hit_index++;\n                            }\n                            branch.expression = branch.expression.transform(scanner);\n                            if (!replace_all) break;\n                        }\n                    }\n                    abort = true;\n                    return node;\n                }\n            }\n\n            function has_overlapping_symbol(fn, arg, fn_strict) {\n                var found = false, scan_this = !(fn instanceof AST_Arrow);\n                arg.walk(new TreeWalker(function(node, descend) {\n                    if (found) return true;\n                    if (node instanceof AST_SymbolRef && fn.variables.has(node.name)) {\n                        var s = node.definition().scope;\n                        if (s !== scope) while (s = s.parent_scope) {\n                            if (s === scope) return true;\n                        }\n                        return found = true;\n                    }\n                    if ((fn_strict || scan_this) && node instanceof AST_This) {\n                        return found = true;\n                    }\n                    if (node instanceof AST_Scope && !(node instanceof AST_Arrow)) {\n                        var prev = scan_this;\n                        scan_this = false;\n                        descend();\n                        scan_this = prev;\n                        return true;\n                    }\n                }));\n                return found;\n            }\n\n            function extract_args() {\n                var iife, fn = compressor.self();\n                if (is_func_expr(fn)\n                    && !fn.name\n                    && !fn.uses_arguments\n                    && !fn.pinned()\n                    && (iife = compressor.parent()) instanceof AST_Call\n                    && iife.expression === fn\n                    && iife.args.every((arg) =>\n                        !(arg instanceof AST_Expansion)\n                    )) {\n                    var fn_strict = compressor.has_directive(\"use strict\");\n                    if (fn_strict && !member(fn_strict, fn.body)) fn_strict = false;\n                    var len = fn.argnames.length;\n                    args = iife.args.slice(len);\n                    var names = new Set();\n                    for (var i = len; --i >= 0;) {\n                        var sym = fn.argnames[i];\n                        var arg = iife.args[i];\n                        args.unshift(make_node(AST_VarDef, sym, {\n                            name: sym,\n                            value: arg\n                        }));\n                        if (names.has(sym.name)) continue;\n                        names.add(sym.name);\n                        if (sym instanceof AST_Expansion) {\n                            var elements = iife.args.slice(i);\n                            if (elements.every((arg) =>\n                                !has_overlapping_symbol(fn, arg, fn_strict)\n                            )) {\n                                candidates.unshift([ make_node(AST_VarDef, sym, {\n                                    name: sym.expression,\n                                    value: make_node(AST_Array, iife, {\n                                        elements: elements\n                                    })\n                                }) ]);\n                            }\n                        } else {\n                            if (!arg) {\n                                arg = make_node(AST_Undefined, sym).transform(compressor);\n                            } else if (arg instanceof AST_Lambda && arg.pinned()\n                                || has_overlapping_symbol(fn, arg, fn_strict)) {\n                                arg = null;\n                            }\n                            if (arg) candidates.unshift([ make_node(AST_VarDef, sym, {\n                                name: sym,\n                                value: arg\n                            }) ]);\n                        }\n                    }\n                }\n            }\n\n            function extract_candidates(expr) {\n                hit_stack.push(expr);\n                if (expr instanceof AST_Assign) {\n                    if (!expr.left.has_side_effects(compressor)) {\n                        candidates.push(hit_stack.slice());\n                    }\n                    extract_candidates(expr.right);\n                } else if (expr instanceof AST_Binary) {\n                    extract_candidates(expr.left);\n                    extract_candidates(expr.right);\n                } else if (expr instanceof AST_Call) {\n                    extract_candidates(expr.expression);\n                    expr.args.forEach(extract_candidates);\n                } else if (expr instanceof AST_Case) {\n                    extract_candidates(expr.expression);\n                } else if (expr instanceof AST_Conditional) {\n                    extract_candidates(expr.condition);\n                    extract_candidates(expr.consequent);\n                    extract_candidates(expr.alternative);\n                } else if (expr instanceof AST_Definitions\n                    && (compressor.option(\"unused\") || !(expr instanceof AST_Const))) {\n                    var len = expr.definitions.length;\n                    // limit number of trailing variable definitions for consideration\n                    var i = len - 200;\n                    if (i < 0) i = 0;\n                    for (; i < len; i++) {\n                        extract_candidates(expr.definitions[i]);\n                    }\n                } else if (expr instanceof AST_DWLoop) {\n                    extract_candidates(expr.condition);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                } else if (expr instanceof AST_Exit) {\n                    if (expr.value) extract_candidates(expr.value);\n                } else if (expr instanceof AST_For) {\n                    if (expr.init) extract_candidates(expr.init);\n                    if (expr.condition) extract_candidates(expr.condition);\n                    if (expr.step) extract_candidates(expr.step);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                } else if (expr instanceof AST_ForIn) {\n                    extract_candidates(expr.object);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                } else if (expr instanceof AST_If) {\n                    extract_candidates(expr.condition);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                    if (expr.alternative && !(expr.alternative instanceof AST_Block)) {\n                        extract_candidates(expr.alternative);\n                    }\n                } else if (expr instanceof AST_Sequence) {\n                    expr.expressions.forEach(extract_candidates);\n                } else if (expr instanceof AST_SimpleStatement) {\n                    extract_candidates(expr.body);\n                } else if (expr instanceof AST_Switch) {\n                    extract_candidates(expr.expression);\n                    expr.body.forEach(extract_candidates);\n                } else if (expr instanceof AST_Unary) {\n                    if (expr.operator == \"++\" || expr.operator == \"--\") {\n                        candidates.push(hit_stack.slice());\n                    }\n                } else if (expr instanceof AST_VarDef) {\n                    if (expr.value) {\n                        candidates.push(hit_stack.slice());\n                        extract_candidates(expr.value);\n                    }\n                }\n                hit_stack.pop();\n            }\n\n            function find_stop(node, level, write_only) {\n                var parent = scanner.parent(level);\n                if (parent instanceof AST_Assign) {\n                    if (write_only\n                        && !(parent.left instanceof AST_PropAccess\n                            || lvalues.has(parent.left.name))) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_Binary) {\n                    if (write_only && (!lazy_op.has(parent.operator) || parent.left === node)) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_Call) return node;\n                if (parent instanceof AST_Case) return node;\n                if (parent instanceof AST_Conditional) {\n                    if (write_only && parent.condition === node) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_Definitions) {\n                    return find_stop(parent, level + 1, true);\n                }\n                if (parent instanceof AST_Exit) {\n                    return write_only ? find_stop(parent, level + 1, write_only) : node;\n                }\n                if (parent instanceof AST_If) {\n                    if (write_only && parent.condition === node) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_IterationStatement) return node;\n                if (parent instanceof AST_Sequence) {\n                    return find_stop(parent, level + 1, parent.tail_node() !== node);\n                }\n                if (parent instanceof AST_SimpleStatement) {\n                    return find_stop(parent, level + 1, true);\n                }\n                if (parent instanceof AST_Switch) return node;\n                if (parent instanceof AST_VarDef) return node;\n                return null;\n            }\n\n            function mangleable_var(var_def) {\n                var value = var_def.value;\n                if (!(value instanceof AST_SymbolRef)) return;\n                if (value.name == \"arguments\") return;\n                var def = value.definition();\n                if (def.undeclared) return;\n                return value_def = def;\n            }\n\n            function get_lhs(expr) {\n                if (expr instanceof AST_VarDef && expr.name instanceof AST_SymbolDeclaration) {\n                    var def = expr.name.definition();\n                    if (!member(expr.name, def.orig)) return;\n                    var referenced = def.references.length - def.replaced;\n                    if (!referenced) return;\n                    var declared = def.orig.length - def.eliminated;\n                    if (declared > 1 && !(expr.name instanceof AST_SymbolFunarg)\n                        || (referenced > 1 ? mangleable_var(expr) : !compressor.exposed(def))) {\n                        return make_node(AST_SymbolRef, expr.name, expr.name);\n                    }\n                } else {\n                    var lhs = expr[expr instanceof AST_Assign ? \"left\" : \"expression\"];\n                    return !is_ref_of(lhs, AST_SymbolConst) && lhs;\n                }\n            }\n\n            function get_rvalue(expr) {\n                return expr[expr instanceof AST_Assign ? \"right\" : \"value\"];\n            }\n\n            function get_lvalues(expr) {\n                var lvalues = new Map();\n                if (expr instanceof AST_Unary) return lvalues;\n                var tw = new TreeWalker(function(node, descend) {\n                    var sym = node;\n                    while (sym instanceof AST_PropAccess) sym = sym.expression;\n                    if (sym instanceof AST_SymbolRef || sym instanceof AST_This) {\n                        lvalues.set(sym.name, lvalues.get(sym.name) || is_modified(compressor, tw, node, node, 0));\n                    }\n                });\n                get_rvalue(expr).walk(tw);\n                return lvalues;\n            }\n\n            function remove_candidate(expr) {\n                if (expr.name instanceof AST_SymbolFunarg) {\n                    var iife = compressor.parent(), argnames = compressor.self().argnames;\n                    var index = argnames.indexOf(expr.name);\n                    if (index < 0) {\n                        iife.args.length = Math.min(iife.args.length, argnames.length - 1);\n                    } else {\n                        var args = iife.args;\n                        if (args[index]) args[index] = make_node(AST_Number, args[index], {\n                            value: 0\n                        });\n                    }\n                    return true;\n                }\n                var found = false;\n                return statements[stat_index].transform(new TreeTransformer(function(node, descend, in_list) {\n                    if (found) return node;\n                    if (node === expr || node.body === expr) {\n                        found = true;\n                        if (node instanceof AST_VarDef) {\n                            node.value = null;\n                            return node;\n                        }\n                        return in_list ? MAP.skip : null;\n                    }\n                }, function(node) {\n                    if (node instanceof AST_Sequence) switch (node.expressions.length) {\n                      case 0: return null;\n                      case 1: return node.expressions[0];\n                    }\n                }));\n            }\n\n            function is_lhs_local(lhs) {\n                while (lhs instanceof AST_PropAccess) lhs = lhs.expression;\n                return lhs instanceof AST_SymbolRef\n                    && lhs.definition().scope === scope\n                    && !(in_loop\n                        && (lvalues.has(lhs.name)\n                            || candidate instanceof AST_Unary\n                            || candidate instanceof AST_Assign && candidate.operator != \"=\"));\n            }\n\n            function value_has_side_effects(expr) {\n                if (expr instanceof AST_Unary) return false;\n                return get_rvalue(expr).has_side_effects(compressor);\n            }\n\n            function replace_all_symbols() {\n                if (side_effects) return false;\n                if (value_def) return true;\n                if (lhs instanceof AST_SymbolRef) {\n                    var def = lhs.definition();\n                    if (def.references.length - def.replaced == (candidate instanceof AST_VarDef ? 1 : 2)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            function may_modify(sym) {\n                if (!sym.definition) return true; // AST_Destructuring\n                var def = sym.definition();\n                if (def.orig.length == 1 && def.orig[0] instanceof AST_SymbolDefun) return false;\n                if (def.scope.get_defun_scope() !== scope) return true;\n                return !def.references.every((ref) => {\n                    var s = ref.scope.get_defun_scope();\n                    // \"block\" scope within AST_Catch\n                    if (s.TYPE == \"Scope\") s = s.parent_scope;\n                    return s === scope;\n                });\n            }\n\n            function side_effects_external(node, lhs) {\n                if (node instanceof AST_Assign) return side_effects_external(node.left, true);\n                if (node instanceof AST_Unary) return side_effects_external(node.expression, true);\n                if (node instanceof AST_VarDef) return node.value && side_effects_external(node.value);\n                if (lhs) {\n                    if (node instanceof AST_Dot) return side_effects_external(node.expression, true);\n                    if (node instanceof AST_Sub) return side_effects_external(node.expression, true);\n                    if (node instanceof AST_SymbolRef) return node.definition().scope !== scope;\n                }\n                return false;\n            }\n        }\n\n        function eliminate_spurious_blocks(statements) {\n            var seen_dirs = [];\n            for (var i = 0; i < statements.length;) {\n                var stat = statements[i];\n                if (stat instanceof AST_BlockStatement && stat.body.every(can_be_evicted_from_block)) {\n                    CHANGED = true;\n                    eliminate_spurious_blocks(stat.body);\n                    statements.splice(i, 1, ...stat.body);\n                    i += stat.body.length;\n                } else if (stat instanceof AST_EmptyStatement) {\n                    CHANGED = true;\n                    statements.splice(i, 1);\n                } else if (stat instanceof AST_Directive) {\n                    if (seen_dirs.indexOf(stat.value) < 0) {\n                        i++;\n                        seen_dirs.push(stat.value);\n                    } else {\n                        CHANGED = true;\n                        statements.splice(i, 1);\n                    }\n                } else i++;\n            }\n        }\n\n        function handle_if_return(statements, compressor) {\n            var self = compressor.self();\n            var multiple_if_returns = has_multiple_if_returns(statements);\n            var in_lambda = self instanceof AST_Lambda;\n            for (var i = statements.length; --i >= 0;) {\n                var stat = statements[i];\n                var j = next_index(i);\n                var next = statements[j];\n\n                if (in_lambda && !next && stat instanceof AST_Return) {\n                    if (!stat.value) {\n                        CHANGED = true;\n                        statements.splice(i, 1);\n                        continue;\n                    }\n                    if (stat.value instanceof AST_UnaryPrefix && stat.value.operator == \"void\") {\n                        CHANGED = true;\n                        statements[i] = make_node(AST_SimpleStatement, stat, {\n                            body: stat.value.expression\n                        });\n                        continue;\n                    }\n                }\n\n                if (stat instanceof AST_If) {\n                    var ab = aborts(stat.body);\n                    if (can_merge_flow(ab)) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.condition = stat.condition.negate(compressor);\n                        var body = as_statement_array_with_return(stat.body, ab);\n                        stat.body = make_node(AST_BlockStatement, stat, {\n                            body: as_statement_array(stat.alternative).concat(extract_functions())\n                        });\n                        stat.alternative = make_node(AST_BlockStatement, stat, {\n                            body: body\n                        });\n                        statements[i] = stat.transform(compressor);\n                        continue;\n                    }\n\n                    var ab = aborts(stat.alternative);\n                    if (can_merge_flow(ab)) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.body = make_node(AST_BlockStatement, stat.body, {\n                            body: as_statement_array(stat.body).concat(extract_functions())\n                        });\n                        var body = as_statement_array_with_return(stat.alternative, ab);\n                        stat.alternative = make_node(AST_BlockStatement, stat.alternative, {\n                            body: body\n                        });\n                        statements[i] = stat.transform(compressor);\n                        continue;\n                    }\n                }\n\n                if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                    var value = stat.body.value;\n                    //---\n                    // pretty silly case, but:\n                    // if (foo()) return; return; ==> foo(); return;\n                    if (!value && !stat.alternative\n                        && (in_lambda && !next || next instanceof AST_Return && !next.value)) {\n                        CHANGED = true;\n                        statements[i] = make_node(AST_SimpleStatement, stat.condition, {\n                            body: stat.condition\n                        });\n                        continue;\n                    }\n                    //---\n                    // if (foo()) return x; return y; ==> return foo() ? x : y;\n                    if (value && !stat.alternative && next instanceof AST_Return && next.value) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = next;\n                        statements[i] = stat.transform(compressor);\n                        statements.splice(j, 1);\n                        continue;\n                    }\n                    //---\n                    // if (foo()) return x; [ return ; ] ==> return foo() ? x : undefined;\n                    if (value && !stat.alternative\n                        && (!next && in_lambda && multiple_if_returns\n                            || next instanceof AST_Return)) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = next || make_node(AST_Return, stat, {\n                            value: null\n                        });\n                        statements[i] = stat.transform(compressor);\n                        if (next) statements.splice(j, 1);\n                        continue;\n                    }\n                    //---\n                    // if (a) return b; if (c) return d; e; ==> return a ? b : c ? d : void e;\n                    //\n                    // if sequences is not enabled, this can lead to an endless loop (issue #866).\n                    // however, with sequences on this helps producing slightly better output for\n                    // the example code.\n                    var prev = statements[prev_index(i)];\n                    if (compressor.option(\"sequences\") && in_lambda && !stat.alternative\n                        && prev instanceof AST_If && prev.body instanceof AST_Return\n                        && next_index(j) == statements.length && next instanceof AST_SimpleStatement) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = make_node(AST_BlockStatement, next, {\n                            body: [\n                                next,\n                                make_node(AST_Return, next, {\n                                    value: null\n                                })\n                            ]\n                        });\n                        statements[i] = stat.transform(compressor);\n                        statements.splice(j, 1);\n                        continue;\n                    }\n                }\n            }\n\n            function has_multiple_if_returns(statements) {\n                var n = 0;\n                for (var i = statements.length; --i >= 0;) {\n                    var stat = statements[i];\n                    if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                        if (++n > 1) return true;\n                    }\n                }\n                return false;\n            }\n\n            function is_return_void(value) {\n                return !value || value instanceof AST_UnaryPrefix && value.operator == \"void\";\n            }\n\n            function can_merge_flow(ab) {\n                if (!ab) return false;\n                for (var j = i + 1, len = statements.length; j < len; j++) {\n                    var stat = statements[j];\n                    if (stat instanceof AST_Const || stat instanceof AST_Let) return false;\n                }\n                var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab) : null;\n                return ab instanceof AST_Return && in_lambda && is_return_void(ab.value)\n                    || ab instanceof AST_Continue && self === loop_body(lct)\n                    || ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct;\n            }\n\n            function extract_functions() {\n                var tail = statements.slice(i + 1);\n                statements.length = i + 1;\n                return tail.filter(function(stat) {\n                    if (stat instanceof AST_Defun) {\n                        statements.push(stat);\n                        return false;\n                    }\n                    return true;\n                });\n            }\n\n            function as_statement_array_with_return(node, ab) {\n                var body = as_statement_array(node).slice(0, -1);\n                if (ab.value) {\n                    body.push(make_node(AST_SimpleStatement, ab.value, {\n                        body: ab.value.expression\n                    }));\n                }\n                return body;\n            }\n\n            function next_index(i) {\n                for (var j = i + 1, len = statements.length; j < len; j++) {\n                    var stat = statements[j];\n                    if (!(stat instanceof AST_Var && declarations_only(stat))) {\n                        break;\n                    }\n                }\n                return j;\n            }\n\n            function prev_index(i) {\n                for (var j = i; --j >= 0;) {\n                    var stat = statements[j];\n                    if (!(stat instanceof AST_Var && declarations_only(stat))) {\n                        break;\n                    }\n                }\n                return j;\n            }\n        }\n\n        function eliminate_dead_code(statements, compressor) {\n            var has_quit;\n            var self = compressor.self();\n            for (var i = 0, n = 0, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                if (stat instanceof AST_LoopControl) {\n                    var lct = compressor.loopcontrol_target(stat);\n                    if (stat instanceof AST_Break\n                            && !(lct instanceof AST_IterationStatement)\n                            && loop_body(lct) === self\n                        || stat instanceof AST_Continue\n                            && loop_body(lct) === self) {\n                        if (stat.label) {\n                            remove(stat.label.thedef.references, stat);\n                        }\n                    } else {\n                        statements[n++] = stat;\n                    }\n                } else {\n                    statements[n++] = stat;\n                }\n                if (aborts(stat)) {\n                    has_quit = statements.slice(i + 1);\n                    break;\n                }\n            }\n            statements.length = n;\n            CHANGED = n != len;\n            if (has_quit) has_quit.forEach(function(stat) {\n                extract_declarations_from_unreachable_code(compressor, stat, statements);\n            });\n        }\n\n        function declarations_only(node) {\n            return node.definitions.every((var_def) =>\n                !var_def.value\n            );\n        }\n\n        function sequencesize(statements, compressor) {\n            if (statements.length < 2) return;\n            var seq = [], n = 0;\n            function push_seq() {\n                if (!seq.length) return;\n                var body = make_sequence(seq[0], seq);\n                statements[n++] = make_node(AST_SimpleStatement, body, { body: body });\n                seq = [];\n            }\n            for (var i = 0, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                if (stat instanceof AST_SimpleStatement) {\n                    if (seq.length >= compressor.sequences_limit) push_seq();\n                    var body = stat.body;\n                    if (seq.length > 0) body = body.drop_side_effect_free(compressor);\n                    if (body) merge_sequence(seq, body);\n                } else if (stat instanceof AST_Definitions && declarations_only(stat)\n                    || stat instanceof AST_Defun) {\n                    statements[n++] = stat;\n                } else {\n                    push_seq();\n                    statements[n++] = stat;\n                }\n            }\n            push_seq();\n            statements.length = n;\n            if (n != len) CHANGED = true;\n        }\n\n        function to_simple_statement(block, decls) {\n            if (!(block instanceof AST_BlockStatement)) return block;\n            var stat = null;\n            for (var i = 0, len = block.body.length; i < len; i++) {\n                var line = block.body[i];\n                if (line instanceof AST_Var && declarations_only(line)) {\n                    decls.push(line);\n                } else if (stat) {\n                    return false;\n                } else {\n                    stat = line;\n                }\n            }\n            return stat;\n        }\n\n        function sequencesize_2(statements, compressor) {\n            function cons_seq(right) {\n                n--;\n                CHANGED = true;\n                var left = prev.body;\n                return make_sequence(left, [ left, right ]).transform(compressor);\n            }\n            var n = 0, prev;\n            for (var i = 0; i < statements.length; i++) {\n                var stat = statements[i];\n                if (prev) {\n                    if (stat instanceof AST_Exit) {\n                        stat.value = cons_seq(stat.value || make_node(AST_Undefined, stat).transform(compressor));\n                    } else if (stat instanceof AST_For) {\n                        if (!(stat.init instanceof AST_Definitions)) {\n                            var abort = false;\n                            prev.body.walk(new TreeWalker(function(node) {\n                                if (abort || node instanceof AST_Scope) return true;\n                                if (node instanceof AST_Binary && node.operator == \"in\") {\n                                    abort = true;\n                                    return true;\n                                }\n                            }));\n                            if (!abort) {\n                                if (stat.init) stat.init = cons_seq(stat.init);\n                                else {\n                                    stat.init = prev.body;\n                                    n--;\n                                    CHANGED = true;\n                                }\n                            }\n                        }\n                    } else if (stat instanceof AST_ForIn) {\n                        if (!(stat.init instanceof AST_Const) && !(stat.init instanceof AST_Let)) {\n                            stat.object = cons_seq(stat.object);\n                        }\n                    } else if (stat instanceof AST_If) {\n                        stat.condition = cons_seq(stat.condition);\n                    } else if (stat instanceof AST_Switch) {\n                        stat.expression = cons_seq(stat.expression);\n                    } else if (stat instanceof AST_With) {\n                        stat.expression = cons_seq(stat.expression);\n                    }\n                }\n                if (compressor.option(\"conditionals\") && stat instanceof AST_If) {\n                    var decls = [];\n                    var body = to_simple_statement(stat.body, decls);\n                    var alt = to_simple_statement(stat.alternative, decls);\n                    if (body !== false && alt !== false && decls.length > 0) {\n                        var len = decls.length;\n                        decls.push(make_node(AST_If, stat, {\n                            condition: stat.condition,\n                            body: body || make_node(AST_EmptyStatement, stat.body),\n                            alternative: alt\n                        }));\n                        decls.unshift(n, 1);\n                        [].splice.apply(statements, decls);\n                        i += len;\n                        n += len + 1;\n                        prev = null;\n                        CHANGED = true;\n                        continue;\n                    }\n                }\n                statements[n++] = stat;\n                prev = stat instanceof AST_SimpleStatement ? stat : null;\n            }\n            statements.length = n;\n        }\n\n        function join_object_assignments(defn, body) {\n            if (!(defn instanceof AST_Definitions)) return;\n            var def = defn.definitions[defn.definitions.length - 1];\n            if (!(def.value instanceof AST_Object)) return;\n            var exprs;\n            if (body instanceof AST_Assign) {\n                exprs = [ body ];\n            } else if (body instanceof AST_Sequence) {\n                exprs = body.expressions.slice();\n            }\n            if (!exprs) return;\n            var trimmed = false;\n            do {\n                var node = exprs[0];\n                if (!(node instanceof AST_Assign)) break;\n                if (node.operator != \"=\") break;\n                if (!(node.left instanceof AST_PropAccess)) break;\n                var sym = node.left.expression;\n                if (!(sym instanceof AST_SymbolRef)) break;\n                if (def.name.name != sym.name) break;\n                if (!node.right.is_constant_expression(scope)) break;\n                var prop = node.left.property;\n                if (prop instanceof AST_Node) {\n                    prop = prop.evaluate(compressor);\n                }\n                if (prop instanceof AST_Node) break;\n                prop = \"\" + prop;\n                var diff = compressor.option(\"ecma\") < 6\n                    && compressor.has_directive(\"use strict\") ? function(node) {\n                    return node.key != prop && (node.key && node.key.name != prop);\n                } : function(node) {\n                    return node.key && node.key.name != prop;\n                };\n                if (!def.value.properties.every(diff)) break;\n                var p = def.value.properties.filter(function (p) { return p.key === prop; })[0];\n                if (!p) {\n                    def.value.properties.push(make_node(AST_ObjectKeyVal, node, {\n                        key: prop,\n                        value: node.right\n                    }));\n                } else {\n                    p.value = new AST_Sequence({\n                        start: p.start,\n                        expressions: [p.value.clone(), node.right.clone()],\n                        end: p.end\n                    });\n                }\n                exprs.shift();\n                trimmed = true;\n            } while (exprs.length);\n            return trimmed && exprs;\n        }\n\n        function join_consecutive_vars(statements) {\n            var defs;\n            for (var i = 0, j = -1, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                var prev = statements[j];\n                if (stat instanceof AST_Definitions) {\n                    if (prev && prev.TYPE == stat.TYPE) {\n                        prev.definitions = prev.definitions.concat(stat.definitions);\n                        CHANGED = true;\n                    } else if (defs && defs.TYPE == stat.TYPE && declarations_only(stat)) {\n                        defs.definitions = defs.definitions.concat(stat.definitions);\n                        CHANGED = true;\n                    } else {\n                        statements[++j] = stat;\n                        defs = stat;\n                    }\n                } else if (stat instanceof AST_Exit) {\n                    stat.value = extract_object_assignments(stat.value);\n                } else if (stat instanceof AST_For) {\n                    var exprs = join_object_assignments(prev, stat.init);\n                    if (exprs) {\n                        CHANGED = true;\n                        stat.init = exprs.length ? make_sequence(stat.init, exprs) : null;\n                        statements[++j] = stat;\n                    } else if (prev instanceof AST_Var && (!stat.init || stat.init.TYPE == prev.TYPE)) {\n                        if (stat.init) {\n                            prev.definitions = prev.definitions.concat(stat.init.definitions);\n                        }\n                        stat.init = prev;\n                        statements[j] = stat;\n                        CHANGED = true;\n                    } else if (defs && stat.init && defs.TYPE == stat.init.TYPE && declarations_only(stat.init)) {\n                        defs.definitions = defs.definitions.concat(stat.init.definitions);\n                        stat.init = null;\n                        statements[++j] = stat;\n                        CHANGED = true;\n                    } else {\n                        statements[++j] = stat;\n                    }\n                } else if (stat instanceof AST_ForIn) {\n                    stat.object = extract_object_assignments(stat.object);\n                } else if (stat instanceof AST_If) {\n                    stat.condition = extract_object_assignments(stat.condition);\n                } else if (stat instanceof AST_SimpleStatement) {\n                    var exprs = join_object_assignments(prev, stat.body);\n                    if (exprs) {\n                        CHANGED = true;\n                        if (!exprs.length) continue;\n                        stat.body = make_sequence(stat.body, exprs);\n                    }\n                    statements[++j] = stat;\n                } else if (stat instanceof AST_Switch) {\n                    stat.expression = extract_object_assignments(stat.expression);\n                } else if (stat instanceof AST_With) {\n                    stat.expression = extract_object_assignments(stat.expression);\n                } else {\n                    statements[++j] = stat;\n                }\n            }\n            statements.length = j + 1;\n\n            function extract_object_assignments(value) {\n                statements[++j] = stat;\n                var exprs = join_object_assignments(prev, value);\n                if (exprs) {\n                    CHANGED = true;\n                    if (exprs.length) {\n                        return make_sequence(value, exprs);\n                    } else if (value instanceof AST_Sequence) {\n                        return value.tail_node().left;\n                    } else {\n                        return value.left;\n                    }\n                }\n                return value;\n            }\n        }\n    }\n\n    function extract_declarations_from_unreachable_code(compressor, stat, target) {\n        if (!(stat instanceof AST_Defun)) {\n            compressor.warn(\"Dropping unreachable code [{file}:{line},{col}]\", stat.start);\n        }\n        stat.walk(new TreeWalker(function(node) {\n            if (node instanceof AST_Var) {\n                compressor.warn(\"Declarations in unreachable code! [{file}:{line},{col}]\", node.start);\n                node.remove_initializers();\n                target.push(node);\n                return true;\n            }\n            if (node instanceof AST_Defun && (node === stat || !compressor.has_directive(\"use strict\"))) {\n                target.push(node === stat ? node : make_node(AST_Var, node, {\n                    definitions: [\n                        make_node(AST_VarDef, node, {\n                            name: make_node(AST_SymbolVar, node.name, node.name),\n                            value: null\n                        })\n                    ]\n                }));\n                return true;\n            }\n            if (node instanceof AST_Scope) {\n                return true;\n            }\n        }));\n    }\n\n    function get_value(key) {\n        if (key instanceof AST_Constant) {\n            return key.getValue();\n        }\n        if (key instanceof AST_UnaryPrefix\n            && key.operator == \"void\"\n            && key.expression instanceof AST_Constant) {\n            return;\n        }\n        return key;\n    }\n\n    function is_undefined(node, compressor) {\n        return node.is_undefined\n            || node instanceof AST_Undefined\n            || node instanceof AST_UnaryPrefix\n                && node.operator == \"void\"\n                && !node.expression.has_side_effects(compressor);\n    }\n\n    // may_throw_on_access()\n    // returns true if this node may be null, undefined or contain `AST_Accessor`\n    (function(def_may_throw_on_access) {\n        AST_Node.DEFMETHOD(\"may_throw_on_access\", function(compressor) {\n            return !compressor.option(\"pure_getters\")\n                || this._dot_throw(compressor);\n        });\n\n        function is_strict(compressor) {\n            return /strict/.test(compressor.option(\"pure_getters\"));\n        }\n\n        def_may_throw_on_access(AST_Node, is_strict);\n        def_may_throw_on_access(AST_Null, return_true);\n        def_may_throw_on_access(AST_Undefined, return_true);\n        def_may_throw_on_access(AST_Constant, return_false);\n        def_may_throw_on_access(AST_Array, return_false);\n        def_may_throw_on_access(AST_Object, function(compressor) {\n            if (!is_strict(compressor)) return false;\n            for (var i = this.properties.length; --i >=0;)\n                if (this.properties[i]._dot_throw(compressor)) return true;\n            return false;\n        });\n        def_may_throw_on_access(AST_ObjectProperty, return_false);\n        def_may_throw_on_access(AST_ObjectGetter, return_true);\n        def_may_throw_on_access(AST_Expansion, function(compressor) {\n            return this.expression._dot_throw(compressor);\n        });\n        def_may_throw_on_access(AST_Function, return_false);\n        def_may_throw_on_access(AST_Arrow, return_false);\n        def_may_throw_on_access(AST_UnaryPostfix, return_false);\n        def_may_throw_on_access(AST_UnaryPrefix, function() {\n            return this.operator == \"void\";\n        });\n        def_may_throw_on_access(AST_Binary, function(compressor) {\n            return (this.operator == \"&&\" || this.operator == \"||\")\n                && (this.left._dot_throw(compressor) || this.right._dot_throw(compressor));\n        });\n        def_may_throw_on_access(AST_Assign, function(compressor) {\n            return this.operator == \"=\"\n                && this.right._dot_throw(compressor);\n        });\n        def_may_throw_on_access(AST_Conditional, function(compressor) {\n            return this.consequent._dot_throw(compressor)\n                || this.alternative._dot_throw(compressor);\n        });\n        def_may_throw_on_access(AST_Dot, function(compressor) {\n            if (!is_strict(compressor)) return false;\n            if (this.expression instanceof AST_Function && this.property == \"prototype\") return false;\n            return true;\n        });\n        def_may_throw_on_access(AST_Sequence, function(compressor) {\n            return this.tail_node()._dot_throw(compressor);\n        });\n        def_may_throw_on_access(AST_SymbolRef, function(compressor) {\n            if (this.is_undefined) return true;\n            if (!is_strict(compressor)) return false;\n            if (is_undeclared_ref(this) && this.is_declared(compressor)) return false;\n            if (this.is_immutable()) return false;\n            var fixed = this.fixed_value();\n            return !fixed || fixed._dot_throw(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"_dot_throw\", func);\n    });\n\n    /* -----[ boolean/negation helpers ]----- */\n\n    // methods to determine whether an expression has a boolean result type\n    (function(def_is_boolean) {\n        const unary_bool = makePredicate(\"! delete\");\n        const binary_bool = makePredicate(\"in instanceof == != === !== < <= >= >\");\n        def_is_boolean(AST_Node, return_false);\n        def_is_boolean(AST_UnaryPrefix, function() {\n            return unary_bool.has(this.operator);\n        });\n        def_is_boolean(AST_Binary, function() {\n            return binary_bool.has(this.operator)\n                || lazy_op.has(this.operator)\n                    && this.left.is_boolean()\n                    && this.right.is_boolean();\n        });\n        def_is_boolean(AST_Conditional, function() {\n            return this.consequent.is_boolean() && this.alternative.is_boolean();\n        });\n        def_is_boolean(AST_Assign, function() {\n            return this.operator == \"=\" && this.right.is_boolean();\n        });\n        def_is_boolean(AST_Sequence, function() {\n            return this.tail_node().is_boolean();\n        });\n        def_is_boolean(AST_True, return_true);\n        def_is_boolean(AST_False, return_true);\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_boolean\", func);\n    });\n\n    // methods to determine if an expression has a numeric result type\n    (function(def_is_number) {\n        def_is_number(AST_Node, return_false);\n        def_is_number(AST_Number, return_true);\n        var unary = makePredicate(\"+ - ~ ++ --\");\n        def_is_number(AST_Unary, function() {\n            return unary.has(this.operator);\n        });\n        var binary = makePredicate(\"- * / % & | ^ << >> >>>\");\n        def_is_number(AST_Binary, function(compressor) {\n            return binary.has(this.operator) || this.operator == \"+\"\n                && this.left.is_number(compressor)\n                && this.right.is_number(compressor);\n        });\n        def_is_number(AST_Assign, function(compressor) {\n            return binary.has(this.operator.slice(0, -1))\n                || this.operator == \"=\" && this.right.is_number(compressor);\n        });\n        def_is_number(AST_Sequence, function(compressor) {\n            return this.tail_node().is_number(compressor);\n        });\n        def_is_number(AST_Conditional, function(compressor) {\n            return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_number\", func);\n    });\n\n    // methods to determine if an expression has a string result type\n    (function(def_is_string) {\n        def_is_string(AST_Node, return_false);\n        def_is_string(AST_String, return_true);\n        def_is_string(AST_TemplateString, function() {\n            return this.segments.length === 1;\n        });\n        def_is_string(AST_UnaryPrefix, function() {\n            return this.operator == \"typeof\";\n        });\n        def_is_string(AST_Binary, function(compressor) {\n            return this.operator == \"+\" &&\n                (this.left.is_string(compressor) || this.right.is_string(compressor));\n        });\n        def_is_string(AST_Assign, function(compressor) {\n            return (this.operator == \"=\" || this.operator == \"+=\") && this.right.is_string(compressor);\n        });\n        def_is_string(AST_Sequence, function(compressor) {\n            return this.tail_node().is_string(compressor);\n        });\n        def_is_string(AST_Conditional, function(compressor) {\n            return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_string\", func);\n    });\n\n    var lazy_op = makePredicate(\"&& ||\");\n    var unary_side_effects = makePredicate(\"delete ++ --\");\n\n    function is_lhs(node, parent) {\n        if (parent instanceof AST_Unary && unary_side_effects.has(parent.operator)) return parent.expression;\n        if (parent instanceof AST_Assign && parent.left === node) return node;\n    }\n\n    (function(def_find_defs) {\n        function to_node(value, orig) {\n            if (value instanceof AST_Node) return make_node(value.CTOR, orig, value);\n            if (Array.isArray(value)) return make_node(AST_Array, orig, {\n                elements: value.map(function(value) {\n                    return to_node(value, orig);\n                })\n            });\n            if (value && typeof value == \"object\") {\n                var props = [];\n                for (var key in value) if (HOP(value, key)) {\n                    props.push(make_node(AST_ObjectKeyVal, orig, {\n                        key: key,\n                        value: to_node(value[key], orig)\n                    }));\n                }\n                return make_node(AST_Object, orig, {\n                    properties: props\n                });\n            }\n            return make_node_from_constant(value, orig);\n        }\n\n        function warn(compressor, node) {\n            compressor.warn(\"global_defs \" + node.print_to_string() + \" redefined [{file}:{line},{col}]\", node.start);\n        }\n\n        AST_Toplevel.DEFMETHOD(\"resolve_defines\", function(compressor) {\n            if (!compressor.option(\"global_defs\")) return this;\n            this.figure_out_scope({ ie8: compressor.option(\"ie8\") });\n            return this.transform(new TreeTransformer(function(node) {\n                var def = node._find_defs(compressor, \"\");\n                if (!def) return;\n                var level = 0, child = node, parent;\n                while (parent = this.parent(level++)) {\n                    if (!(parent instanceof AST_PropAccess)) break;\n                    if (parent.expression !== child) break;\n                    child = parent;\n                }\n                if (is_lhs(child, parent)) {\n                    warn(compressor, node);\n                    return;\n                }\n                return def;\n            }));\n        });\n        def_find_defs(AST_Node, noop);\n        def_find_defs(AST_Dot, function(compressor, suffix) {\n            return this.expression._find_defs(compressor, \".\" + this.property + suffix);\n        });\n        def_find_defs(AST_SymbolDeclaration, function(compressor) {\n            if (!this.global()) return;\n            if (HOP(compressor.option(\"global_defs\"), this.name)) warn(compressor, this);\n        });\n        def_find_defs(AST_SymbolRef, function(compressor, suffix) {\n            if (!this.global()) return;\n            var defines = compressor.option(\"global_defs\");\n            var name = this.name + suffix;\n            if (HOP(defines, name)) return to_node(defines[name], this);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"_find_defs\", func);\n    });\n\n    function best_of_expression(ast1, ast2) {\n        return ast1.print_to_string().length >\n            ast2.print_to_string().length\n            ? ast2 : ast1;\n    }\n\n    function best_of_statement(ast1, ast2) {\n        return best_of_expression(make_node(AST_SimpleStatement, ast1, {\n            body: ast1\n        }), make_node(AST_SimpleStatement, ast2, {\n            body: ast2\n        })).body;\n    }\n\n    function best_of(compressor, ast1, ast2) {\n        return (first_in_statement(compressor) ? best_of_statement : best_of_expression)(ast1, ast2);\n    }\n\n    function convert_to_predicate(obj) {\n        for (var key of Object.keys(obj)) {\n            obj[key] = makePredicate(obj[key]);\n        }\n    }\n\n    var object_fns = [\n        \"constructor\",\n        \"toString\",\n        \"valueOf\",\n    ];\n    var native_fns = {\n        Array: [\n            \"indexOf\",\n            \"join\",\n            \"lastIndexOf\",\n            \"slice\",\n        ].concat(object_fns),\n        Boolean: object_fns,\n        Function: object_fns,\n        Number: [\n            \"toExponential\",\n            \"toFixed\",\n            \"toPrecision\",\n        ].concat(object_fns),\n        Object: object_fns,\n        RegExp: [\n            \"test\",\n        ].concat(object_fns),\n        String: [\n            \"charAt\",\n            \"charCodeAt\",\n            \"concat\",\n            \"indexOf\",\n            \"italics\",\n            \"lastIndexOf\",\n            \"match\",\n            \"replace\",\n            \"search\",\n            \"slice\",\n            \"split\",\n            \"substr\",\n            \"substring\",\n            \"toLowerCase\",\n            \"toUpperCase\",\n            \"trim\",\n        ].concat(object_fns),\n    };\n    convert_to_predicate(native_fns);\n    var static_fns = {\n        Array: [\n            \"isArray\",\n        ],\n        Math: [\n            \"abs\",\n            \"acos\",\n            \"asin\",\n            \"atan\",\n            \"ceil\",\n            \"cos\",\n            \"exp\",\n            \"floor\",\n            \"log\",\n            \"round\",\n            \"sin\",\n            \"sqrt\",\n            \"tan\",\n            \"atan2\",\n            \"pow\",\n            \"max\",\n            \"min\",\n        ],\n        Number: [\n            \"isFinite\",\n            \"isNaN\",\n        ],\n        Object: [\n            \"create\",\n            \"getOwnPropertyDescriptor\",\n            \"getOwnPropertyNames\",\n            \"getPrototypeOf\",\n            \"isExtensible\",\n            \"isFrozen\",\n            \"isSealed\",\n            \"keys\",\n        ],\n        String: [\n            \"fromCharCode\",\n        ],\n    };\n    convert_to_predicate(static_fns);\n\n    // methods to evaluate a constant expression\n    (function(def_eval) {\n        // If the node has been successfully reduced to a constant,\n        // then its value is returned; otherwise the element itself\n        // is returned.\n        // They can be distinguished as constant value is never a\n        // descendant of AST_Node.\n        AST_Node.DEFMETHOD(\"evaluate\", function(compressor) {\n            if (!compressor.option(\"evaluate\")) return this;\n            var val = this._eval(compressor, 1);\n            if (!val || val instanceof RegExp) return val;\n            if (typeof val == \"function\" || typeof val == \"object\") return this;\n            return val;\n        });\n        var unaryPrefix = makePredicate(\"! ~ - + void\");\n        AST_Node.DEFMETHOD(\"is_constant\", function() {\n            // Accomodate when compress option evaluate=false\n            // as well as the common constant expressions !0 and -1\n            if (this instanceof AST_Constant) {\n                return !(this instanceof AST_RegExp);\n            } else {\n                return this instanceof AST_UnaryPrefix\n                    && this.expression instanceof AST_Constant\n                    && unaryPrefix.has(this.operator);\n            }\n        });\n        def_eval(AST_Statement, function() {\n            throw new Error(string_template(\"Cannot evaluate a statement [{file}:{line},{col}]\", this.start));\n        });\n        def_eval(AST_Lambda, return_this);\n        def_eval(AST_Class, return_this);\n        def_eval(AST_Node, return_this);\n        def_eval(AST_Constant, function() {\n            return this.getValue();\n        });\n        def_eval(AST_TemplateString, function() {\n            if (this.segments.length !== 1) return this;\n            return this.segments[0].value;\n        });\n        def_eval(AST_Function, function(compressor) {\n            if (compressor.option(\"unsafe\")) {\n                var fn = function() {};\n                fn.node = this;\n                fn.toString = function() {\n                    return this.node.print_to_string();\n                };\n                return fn;\n            }\n            return this;\n        });\n        def_eval(AST_Array, function(compressor, depth) {\n            if (compressor.option(\"unsafe\")) {\n                var elements = [];\n                for (var i = 0, len = this.elements.length; i < len; i++) {\n                    var element = this.elements[i];\n                    var value = element._eval(compressor, depth);\n                    if (element === value) return this;\n                    elements.push(value);\n                }\n                return elements;\n            }\n            return this;\n        });\n        def_eval(AST_Object, function(compressor, depth) {\n            if (compressor.option(\"unsafe\")) {\n                var val = {};\n                for (var i = 0, len = this.properties.length; i < len; i++) {\n                    var prop = this.properties[i];\n                    if (prop instanceof AST_Expansion) return this;\n                    var key = prop.key;\n                    if (key instanceof AST_Symbol) {\n                        key = key.name;\n                    } else if (key instanceof AST_Node) {\n                        key = key._eval(compressor, depth);\n                        if (key === prop.key) return this;\n                    }\n                    if (typeof Object.prototype[key] === \"function\") {\n                        return this;\n                    }\n                    if (prop.value instanceof AST_Function) continue;\n                    val[key] = prop.value._eval(compressor, depth);\n                    if (val[key] === prop.value) return this;\n                }\n                return val;\n            }\n            return this;\n        });\n        var non_converting_unary = makePredicate(\"! typeof void\");\n        def_eval(AST_UnaryPrefix, function(compressor, depth) {\n            var e = this.expression;\n            // Function would be evaluated to an array and so typeof would\n            // incorrectly return 'object'. Hence making is a special case.\n            if (compressor.option(\"typeofs\")\n                && this.operator == \"typeof\"\n                && (e instanceof AST_Lambda\n                    || e instanceof AST_SymbolRef\n                        && e.fixed_value() instanceof AST_Lambda)) {\n                return typeof function() {};\n            }\n            if (!non_converting_unary.has(this.operator)) depth++;\n            e = e._eval(compressor, depth);\n            if (e === this.expression) return this;\n            switch (this.operator) {\n              case \"!\": return !e;\n              case \"typeof\":\n                // typeof <RegExp> returns \"object\" or \"function\" on different platforms\n                // so cannot evaluate reliably\n                if (e instanceof RegExp) return this;\n                return typeof e;\n              case \"void\": return void e;\n              case \"~\": return ~e;\n              case \"-\": return -e;\n              case \"+\": return +e;\n            }\n            return this;\n        });\n        var non_converting_binary = makePredicate(\"&& || === !==\");\n        def_eval(AST_Binary, function(compressor, depth) {\n            if (!non_converting_binary.has(this.operator)) depth++;\n            var left = this.left._eval(compressor, depth);\n            if (left === this.left) return this;\n            var right = this.right._eval(compressor, depth);\n            if (right === this.right) return this;\n            var result;\n            switch (this.operator) {\n              case \"&&\"  : result = left &&  right; break;\n              case \"||\"  : result = left ||  right; break;\n              case \"|\"   : result = left |   right; break;\n              case \"&\"   : result = left &   right; break;\n              case \"^\"   : result = left ^   right; break;\n              case \"+\"   : result = left +   right; break;\n              case \"*\"   : result = left *   right; break;\n              case \"**\"  : result = Math.pow(left, right); break;\n              case \"/\"   : result = left /   right; break;\n              case \"%\"   : result = left %   right; break;\n              case \"-\"   : result = left -   right; break;\n              case \"<<\"  : result = left <<  right; break;\n              case \">>\"  : result = left >>  right; break;\n              case \">>>\" : result = left >>> right; break;\n              case \"==\"  : result = left ==  right; break;\n              case \"===\" : result = left === right; break;\n              case \"!=\"  : result = left !=  right; break;\n              case \"!==\" : result = left !== right; break;\n              case \"<\"   : result = left <   right; break;\n              case \"<=\"  : result = left <=  right; break;\n              case \">\"   : result = left >   right; break;\n              case \">=\"  : result = left >=  right; break;\n              default:\n                  return this;\n            }\n            if (isNaN(result) && compressor.find_parent(AST_With)) {\n                // leave original expression as is\n                return this;\n            }\n            return result;\n        });\n        def_eval(AST_Conditional, function(compressor, depth) {\n            var condition = this.condition._eval(compressor, depth);\n            if (condition === this.condition) return this;\n            var node = condition ? this.consequent : this.alternative;\n            var value = node._eval(compressor, depth);\n            return value === node ? this : value;\n        });\n        def_eval(AST_SymbolRef, function(compressor, depth) {\n            var fixed = this.fixed_value();\n            if (!fixed) return this;\n            var value;\n            if (HOP(fixed, \"_eval\")) {\n                value = fixed._eval();\n            } else {\n                this._eval = return_this;\n                value = fixed._eval(compressor, depth);\n                delete this._eval;\n                if (value === fixed) return this;\n                fixed._eval = function() {\n                    return value;\n                };\n            }\n            if (value && typeof value == \"object\") {\n                var escaped = this.definition().escaped;\n                if (escaped && depth > escaped) return this;\n            }\n            return value;\n        });\n        var global_objs = {\n            Array: Array,\n            Math: Math,\n            Number: Number,\n            Object: Object,\n            String: String,\n        };\n        var static_values = {\n            Math: [\n                \"E\",\n                \"LN10\",\n                \"LN2\",\n                \"LOG2E\",\n                \"LOG10E\",\n                \"PI\",\n                \"SQRT1_2\",\n                \"SQRT2\",\n            ],\n            Number: [\n                \"MAX_VALUE\",\n                \"MIN_VALUE\",\n                \"NaN\",\n                \"NEGATIVE_INFINITY\",\n                \"POSITIVE_INFINITY\",\n            ],\n        };\n        convert_to_predicate(static_values);\n        def_eval(AST_PropAccess, function(compressor, depth) {\n            if (compressor.option(\"unsafe\")) {\n                var key = this.property;\n                if (key instanceof AST_Node) {\n                    key = key._eval(compressor, depth);\n                    if (key === this.property) return this;\n                }\n                var exp = this.expression;\n                var val;\n                if (is_undeclared_ref(exp)) {\n\n                    var aa;\n                    var first_arg = exp.name === \"hasOwnProperty\"\n                        && key === \"call\"\n                        && (aa = compressor.parent() && compressor.parent().args)\n                        && (aa && aa[0]\n                        && aa[0].evaluate(compressor));\n\n                    first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;\n\n                    if (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared) {\n                        return this.clone();\n                    }\n                    var static_value = static_values[exp.name];\n                    if (!static_value || !static_value.has(key)) return this;\n                    val = global_objs[exp.name];\n                } else {\n                    val = exp._eval(compressor, depth + 1);\n                    if (!val || val === exp || !HOP(val, key)) return this;\n                    if (typeof val == \"function\") switch (key) {\n                      case \"name\":\n                        return val.node.name ? val.node.name.name : \"\";\n                      case \"length\":\n                        return val.node.argnames.length;\n                      default:\n                        return this;\n                    }\n                }\n                return val[key];\n            }\n            return this;\n        });\n        def_eval(AST_Call, function(compressor, depth) {\n            var exp = this.expression;\n            if (compressor.option(\"unsafe\") && exp instanceof AST_PropAccess) {\n                var key = exp.property;\n                if (key instanceof AST_Node) {\n                    key = key._eval(compressor, depth);\n                    if (key === exp.property) return this;\n                }\n                var val;\n                var e = exp.expression;\n                if (is_undeclared_ref(e)) {\n                    var first_arg =\n                        e.name === \"hasOwnProperty\" &&\n                        key === \"call\" &&\n                        (this.args[0] && this.args[0].evaluate(compressor));\n\n                    first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;\n\n                    if ((first_arg == null || first_arg.thedef && first_arg.thedef.undeclared)) {\n                        return this.clone();\n                    }\n                    var static_fn = static_fns[e.name];\n                    if (!static_fn || !static_fn.has(key)) return this;\n                    val = global_objs[e.name];\n                } else {\n                    val = e._eval(compressor, depth + 1);\n                    if (val === e || !val) return this;\n                    var native_fn = native_fns[val.constructor.name];\n                    if (!native_fn || !native_fn.has(key)) return this;\n                }\n                var args = [];\n                for (var i = 0, len = this.args.length; i < len; i++) {\n                    var arg = this.args[i];\n                    var value = arg._eval(compressor, depth);\n                    if (arg === value) return this;\n                    args.push(value);\n                }\n                try {\n                    return val[key].apply(val, args);\n                } catch (ex) {\n                    compressor.warn(\"Error evaluating {code} [{file}:{line},{col}]\", {\n                        code: this.print_to_string(),\n                        file: this.start.file,\n                        line: this.start.line,\n                        col: this.start.col\n                    });\n                }\n            }\n            return this;\n        });\n        def_eval(AST_New, return_this);\n    })(function(node, func) {\n        node.DEFMETHOD(\"_eval\", func);\n    });\n\n    // method to negate an expression\n    (function(def_negate) {\n        function basic_negation(exp) {\n            return make_node(AST_UnaryPrefix, exp, {\n                operator: \"!\",\n                expression: exp\n            });\n        }\n        function best(orig, alt, first_in_statement) {\n            var negated = basic_negation(orig);\n            if (first_in_statement) {\n                var stat = make_node(AST_SimpleStatement, alt, {\n                    body: alt\n                });\n                return best_of_expression(negated, stat) === stat ? alt : negated;\n            }\n            return best_of_expression(negated, alt);\n        }\n        def_negate(AST_Node, function() {\n            return basic_negation(this);\n        });\n        def_negate(AST_Statement, function() {\n            throw new Error(\"Cannot negate a statement\");\n        });\n        def_negate(AST_Function, function() {\n            return basic_negation(this);\n        });\n        def_negate(AST_Arrow, function() {\n            return basic_negation(this);\n        });\n        def_negate(AST_UnaryPrefix, function() {\n            if (this.operator == \"!\")\n                return this.expression;\n            return basic_negation(this);\n        });\n        def_negate(AST_Sequence, function(compressor) {\n            var expressions = this.expressions.slice();\n            expressions.push(expressions.pop().negate(compressor));\n            return make_sequence(this, expressions);\n        });\n        def_negate(AST_Conditional, function(compressor, first_in_statement) {\n            var self = this.clone();\n            self.consequent = self.consequent.negate(compressor);\n            self.alternative = self.alternative.negate(compressor);\n            return best(this, self, first_in_statement);\n        });\n        def_negate(AST_Binary, function(compressor, first_in_statement) {\n            var self = this.clone(), op = this.operator;\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (op) {\n                  case \"<=\" : self.operator = \">\"  ; return self;\n                  case \"<\"  : self.operator = \">=\" ; return self;\n                  case \">=\" : self.operator = \"<\"  ; return self;\n                  case \">\"  : self.operator = \"<=\" ; return self;\n                }\n            }\n            switch (op) {\n              case \"==\" : self.operator = \"!=\"; return self;\n              case \"!=\" : self.operator = \"==\"; return self;\n              case \"===\": self.operator = \"!==\"; return self;\n              case \"!==\": self.operator = \"===\"; return self;\n              case \"&&\":\n                self.operator = \"||\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n              case \"||\":\n                self.operator = \"&&\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n            }\n            return basic_negation(this);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"negate\", function(compressor, first_in_statement) {\n            return func.call(this, compressor, first_in_statement);\n        });\n    });\n\n    var global_pure_fns = makePredicate(\"Boolean decodeURI decodeURIComponent Date encodeURI encodeURIComponent Error escape EvalError isFinite isNaN Number Object parseFloat parseInt RangeError ReferenceError String SyntaxError TypeError unescape URIError\");\n    AST_Call.DEFMETHOD(\"is_expr_pure\", function(compressor) {\n        if (compressor.option(\"unsafe\")) {\n            var expr = this.expression;\n            var first_arg = (this.args && this.args[0] && this.args[0].evaluate(compressor));\n            if (\n                expr.expression && expr.expression.name === \"hasOwnProperty\" &&\n                (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared)\n            ) {\n                return false;\n            }\n            if (is_undeclared_ref(expr) && global_pure_fns.has(expr.name)) return true;\n            if (expr instanceof AST_Dot\n                && is_undeclared_ref(expr.expression)\n                && static_fns.hasOwnProperty(expr.expression.name)\n                && static_fns[expr.expression.name].has(expr.property)) {\n                return true;\n            }\n        }\n        return this.pure || !compressor.pure_funcs(this);\n    });\n    AST_Node.DEFMETHOD(\"is_call_pure\", return_false);\n    AST_Dot.DEFMETHOD(\"is_call_pure\", function(compressor) {\n        if (!compressor.option(\"unsafe\")) return;\n        const expr = this.expression;\n        let map;\n        if (expr instanceof AST_Array) {\n            map = native_fns.Array;\n        } else if (expr.is_boolean()) {\n            map = native_fns.Boolean;\n        } else if (expr.is_number(compressor)) {\n            map = native_fns.Number;\n        } else if (expr instanceof AST_RegExp) {\n            map = native_fns.RegExp;\n        } else if (expr.is_string(compressor)) {\n            map = native_fns.String;\n        } else if (!this.may_throw_on_access(compressor)) {\n            map = native_fns.Object;\n        }\n        return map && map.has(this.property);\n    });\n\n    // determine if expression has side effects\n    (function(def_has_side_effects) {\n        def_has_side_effects(AST_Node, return_true);\n\n        def_has_side_effects(AST_EmptyStatement, return_false);\n        def_has_side_effects(AST_Constant, return_false);\n        def_has_side_effects(AST_This, return_false);\n\n        function any(list, compressor) {\n            for (var i = list.length; --i >= 0;)\n                if (list[i].has_side_effects(compressor))\n                    return true;\n            return false;\n        }\n\n        def_has_side_effects(AST_Block, function(compressor) {\n            return any(this.body, compressor);\n        });\n        def_has_side_effects(AST_Call, function(compressor) {\n            if (!this.is_expr_pure(compressor)\n                && (!this.expression.is_call_pure(compressor)\n                    || this.expression.has_side_effects(compressor))) {\n                return true;\n            }\n            return any(this.args, compressor);\n        });\n        def_has_side_effects(AST_Switch, function(compressor) {\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def_has_side_effects(AST_Case, function(compressor) {\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def_has_side_effects(AST_Try, function(compressor) {\n            return any(this.body, compressor)\n                || this.bcatch && this.bcatch.has_side_effects(compressor)\n                || this.bfinally && this.bfinally.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_If, function(compressor) {\n            return this.condition.has_side_effects(compressor)\n                || this.body && this.body.has_side_effects(compressor)\n                || this.alternative && this.alternative.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_LabeledStatement, function(compressor) {\n            return this.body.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_SimpleStatement, function(compressor) {\n            return this.body.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Lambda, return_false);\n        def_has_side_effects(AST_Class, return_false);\n        def_has_side_effects(AST_DefClass, return_true);\n        def_has_side_effects(AST_Binary, function(compressor) {\n            return this.left.has_side_effects(compressor)\n                || this.right.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Assign, return_true);\n        def_has_side_effects(AST_Conditional, function(compressor) {\n            return this.condition.has_side_effects(compressor)\n                || this.consequent.has_side_effects(compressor)\n                || this.alternative.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Unary, function(compressor) {\n            return unary_side_effects.has(this.operator)\n                || this.expression.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_SymbolRef, function(compressor) {\n            return !this.is_declared(compressor);\n        });\n        def_has_side_effects(AST_SymbolDeclaration, return_false);\n        def_has_side_effects(AST_Object, function(compressor) {\n            return any(this.properties, compressor);\n        });\n        def_has_side_effects(AST_ObjectProperty, function(compressor) {\n            if (this.key instanceof AST_ObjectKeyVal &&\n                    this.key.has_side_effects(compressor))\n                return true;\n            return this.value.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Array, function(compressor) {\n            return any(this.elements, compressor);\n        });\n        def_has_side_effects(AST_Dot, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Sub, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.has_side_effects(compressor)\n                || this.property.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Sequence, function(compressor) {\n            return any(this.expressions, compressor);\n        });\n        def_has_side_effects(AST_Definitions, function(compressor) {\n            return any(this.definitions, compressor);\n        });\n        def_has_side_effects(AST_VarDef, function(compressor) {\n            return this.value;\n        });\n        def_has_side_effects(AST_TemplateSegment, return_false);\n        def_has_side_effects(AST_TemplateString, function(compressor) {\n            return any(this.segments, compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"has_side_effects\", func);\n    });\n\n    // determine if expression may throw\n    (function(def_may_throw) {\n        def_may_throw(AST_Node, return_true);\n\n        def_may_throw(AST_Class, return_false);\n        def_may_throw(AST_Constant, return_false);\n        def_may_throw(AST_EmptyStatement, return_false);\n        def_may_throw(AST_Lambda, return_false);\n        def_may_throw(AST_SymbolDeclaration, return_false);\n        def_may_throw(AST_This, return_false);\n\n        function any(list, compressor) {\n            for (var i = list.length; --i >= 0;)\n                if (list[i].may_throw(compressor))\n                    return true;\n            return false;\n        }\n\n        def_may_throw(AST_Array, function(compressor) {\n            return any(this.elements, compressor);\n        });\n        def_may_throw(AST_Assign, function(compressor) {\n            if (this.right.may_throw(compressor)) return true;\n            if (!compressor.has_directive(\"use strict\")\n                && this.operator == \"=\"\n                && this.left instanceof AST_SymbolRef) {\n                return false;\n            }\n            return this.left.may_throw(compressor);\n        });\n        def_may_throw(AST_Binary, function(compressor) {\n            return this.left.may_throw(compressor)\n                || this.right.may_throw(compressor);\n        });\n        def_may_throw(AST_Block, function(compressor) {\n            return any(this.body, compressor);\n        });\n        def_may_throw(AST_Call, function(compressor) {\n            if (any(this.args, compressor)) return true;\n            if (this.is_expr_pure(compressor)) return false;\n            if (this.expression.may_throw(compressor)) return true;\n            return !(this.expression instanceof AST_Lambda)\n                || any(this.expression.body, compressor);\n        });\n        def_may_throw(AST_Case, function(compressor) {\n            return this.expression.may_throw(compressor)\n                || any(this.body, compressor);\n        });\n        def_may_throw(AST_Conditional, function(compressor) {\n            return this.condition.may_throw(compressor)\n                || this.consequent.may_throw(compressor)\n                || this.alternative.may_throw(compressor);\n        });\n        def_may_throw(AST_Definitions, function(compressor) {\n            return any(this.definitions, compressor);\n        });\n        def_may_throw(AST_Dot, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.may_throw(compressor);\n        });\n        def_may_throw(AST_If, function(compressor) {\n            return this.condition.may_throw(compressor)\n                || this.body && this.body.may_throw(compressor)\n                || this.alternative && this.alternative.may_throw(compressor);\n        });\n        def_may_throw(AST_LabeledStatement, function(compressor) {\n            return this.body.may_throw(compressor);\n        });\n        def_may_throw(AST_Object, function(compressor) {\n            return any(this.properties, compressor);\n        });\n        def_may_throw(AST_ObjectProperty, function(compressor) {\n            return this.value.may_throw(compressor);\n        });\n        def_may_throw(AST_Return, function(compressor) {\n            return this.value && this.value.may_throw(compressor);\n        });\n        def_may_throw(AST_Sequence, function(compressor) {\n            return any(this.expressions, compressor);\n        });\n        def_may_throw(AST_SimpleStatement, function(compressor) {\n            return this.body.may_throw(compressor);\n        });\n        def_may_throw(AST_Sub, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.may_throw(compressor)\n                || this.property.may_throw(compressor);\n        });\n        def_may_throw(AST_Switch, function(compressor) {\n            return this.expression.may_throw(compressor)\n                || any(this.body, compressor);\n        });\n        def_may_throw(AST_SymbolRef, function(compressor) {\n            return !this.is_declared(compressor);\n        });\n        def_may_throw(AST_Try, function(compressor) {\n            return this.bcatch ? this.bcatch.may_throw(compressor) : any(this.body, compressor)\n                || this.bfinally && this.bfinally.may_throw(compressor);\n        });\n        def_may_throw(AST_Unary, function(compressor) {\n            if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef)\n                return false;\n            return this.expression.may_throw(compressor);\n        });\n        def_may_throw(AST_VarDef, function(compressor) {\n            if (!this.value) return false;\n            return this.value.may_throw(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"may_throw\", func);\n    });\n\n    // determine if expression is constant\n    (function(def_is_constant_expression) {\n        function all_refs_local(scope) {\n            var self = this;\n            var result = true;\n            self.walk(new TreeWalker(function(node) {\n                if (!result) return true;\n                if (node instanceof AST_SymbolRef) {\n                    if (self.inlined) {\n                        result = false;\n                        return true;\n                    }\n                    var def = node.definition();\n                    if (member(def, self.enclosed)\n                        && !self.variables.has(def.name)) {\n                        if (scope) {\n                            var scope_def = scope.find_variable(node);\n                            if (def.undeclared ? !scope_def : scope_def === def) {\n                                result = \"f\";\n                                return true;\n                            }\n                        }\n                        result = false;\n                    }\n                    return true;\n                }\n                if (node instanceof AST_This && self instanceof AST_Arrow) {\n                    result = false;\n                    return true;\n                }\n            }));\n            return result;\n        }\n\n        def_is_constant_expression(AST_Node, return_false);\n        def_is_constant_expression(AST_Constant, return_true);\n        def_is_constant_expression(AST_Class, function(scope) {\n            var self = this;\n            if (self.extends && !self.extends.is_constant_expression(scope)) {\n                return false;\n            }\n            return all_refs_local.call(self, scope);\n        });\n        def_is_constant_expression(AST_Lambda, all_refs_local);\n        def_is_constant_expression(AST_Unary, function() {\n            return this.expression.is_constant_expression();\n        });\n        def_is_constant_expression(AST_Binary, function() {\n            return this.left.is_constant_expression() && this.right.is_constant_expression();\n        });\n        def_is_constant_expression(AST_Array, function() {\n            return this.elements.every((l) => l.is_constant_expression());\n        });\n        def_is_constant_expression(AST_Object, function() {\n            return this.properties.every((l) => l.is_constant_expression());\n        });\n        def_is_constant_expression(AST_ObjectProperty, function() {\n            return !(this.key instanceof AST_Node) && this.value.is_constant_expression();\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_constant_expression\", func);\n    });\n\n    // tell me if a statement aborts\n    function aborts(thing) {\n        return thing && thing.aborts();\n    }\n    (function(def) {\n        def(AST_Statement, return_null);\n        def(AST_Jump, return_this);\n        function block_aborts() {\n            for (var i = 0; i < this.body.length; i++) {\n                if (aborts(this.body[i])) {\n                    return this.body[i];\n                }\n            }\n            return null;\n        }\n        def(AST_Import, function() { return null; });\n        def(AST_BlockStatement, block_aborts);\n        def(AST_SwitchBranch, block_aborts);\n        def(AST_If, function() {\n            return this.alternative && aborts(this.body) && aborts(this.alternative) && this;\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"aborts\", func);\n    });\n\n    /* -----[ optimizers ]----- */\n\n    var directives = [\"use asm\", \"use strict\"];\n    def_optimize(AST_Directive, function(self, compressor) {\n        if (compressor.option(\"directives\")\n            && (!member(self.value, directives) || compressor.has_directive(self.value) !== self)) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    def_optimize(AST_Debugger, function(self, compressor) {\n        if (compressor.option(\"drop_debugger\"))\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    def_optimize(AST_LabeledStatement, function(self, compressor) {\n        if (self.body instanceof AST_Break\n            && compressor.loopcontrol_target(self.body) === self.body) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self.label.references.length == 0 ? self.body : self;\n    });\n\n    def_optimize(AST_Block, function(self, compressor) {\n        tighten_body(self.body, compressor);\n        return self;\n    });\n\n    function can_be_extracted_from_if_block(node) {\n        return !(\n            node instanceof AST_Const ||\n            node instanceof AST_Let ||\n            node instanceof AST_Class\n        );\n    }\n\n    def_optimize(AST_BlockStatement, function(self, compressor) {\n        tighten_body(self.body, compressor);\n        switch (self.body.length) {\n          case 1:\n            if (!compressor.has_directive(\"use strict\")\n                && compressor.parent() instanceof AST_If\n                && can_be_extracted_from_if_block(self.body[0])\n                || can_be_evicted_from_block(self.body[0])) {\n                return self.body[0];\n            }\n            break;\n          case 0: return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    function opt_AST_Lambda(self, compressor) {\n        tighten_body(self.body, compressor);\n        if (compressor.option(\"side_effects\")\n            && self.body.length == 1\n            && self.body[0] === compressor.has_directive(\"use strict\")) {\n            self.body.length = 0;\n        }\n        return self;\n    }\n    def_optimize(AST_Lambda, opt_AST_Lambda);\n\n    AST_Scope.DEFMETHOD(\"drop_unused\", function(compressor) {\n        if (!compressor.option(\"unused\")) return;\n        if (compressor.has_directive(\"use asm\")) return;\n        var self = this;\n        if (self.pinned()) return;\n        var drop_funcs = !(self instanceof AST_Toplevel) || compressor.toplevel.funcs;\n        var drop_vars = !(self instanceof AST_Toplevel) || compressor.toplevel.vars;\n        var assign_as_unused = /keep_assign/.test(compressor.option(\"unused\")) ? return_false : function(node) {\n            if (node instanceof AST_Assign && (node.write_only || node.operator == \"=\")) {\n                return node.left;\n            }\n            if (node instanceof AST_Unary && node.write_only) return node.expression;\n        };\n        var in_use_ids = new Map();\n        var fixed_ids = new Map();\n        if (self instanceof AST_Toplevel && compressor.top_retain) {\n            self.variables.forEach(function(def) {\n                if (compressor.top_retain(def) && !in_use_ids.has(def.id)) {\n                    in_use_ids.set(def.id, def);\n                }\n            });\n        }\n        var var_defs_by_id = new Map();\n        var initializations = new Map();\n        var destructuring_value = null;\n        // pass 1: find out which symbols are directly used in\n        // this scope (not in nested scopes).\n        var scope = this;\n        var tw = new TreeWalker(function(node, descend) {\n            if (node instanceof AST_Lambda && node.uses_arguments && !tw.has_directive(\"use strict\")) {\n                node.argnames.forEach(function(argname) {\n                    if (!(argname instanceof AST_SymbolDeclaration)) return;\n                    var def = argname.definition();\n                    if (!in_use_ids.has(def.id)) {\n                        in_use_ids.set(def.id, def);\n                    }\n                });\n            }\n            if (node === self) return;\n            if (node instanceof AST_Defun || node instanceof AST_DefClass) {\n                var node_def = node.name.definition();\n                var in_export = tw.parent() instanceof AST_Export;\n                if (in_export || !drop_funcs && scope === self) {\n                    if (node_def.global && !in_use_ids.has(node_def.id)) {\n                        in_use_ids.set(node_def.id, node_def);\n                    }\n                }\n                map_add(initializations, node_def.id, node);\n                return true; // don't go in nested scopes\n            }\n            if (node instanceof AST_SymbolFunarg && scope === self) {\n                map_add(var_defs_by_id, node.definition().id, node);\n            }\n            if (node instanceof AST_Definitions && scope === self) {\n                var in_export = tw.parent() instanceof AST_Export;\n                node.definitions.forEach(function(def) {\n                    if (def.name instanceof AST_SymbolVar) {\n                        map_add(var_defs_by_id, def.name.definition().id, def);\n                    }\n                    if (in_export || !drop_vars) {\n                        def.name.walk(new TreeWalker(function(node) {\n                            if (node instanceof AST_SymbolDeclaration) {\n                                var def = node.definition();\n                                if ((in_export || def.global) && !in_use_ids.has(def.id)) {\n                                    in_use_ids.set(def.id, def);\n                                }\n                            }\n                        }));\n                    }\n                    if (def.value) {\n                        if (def.name instanceof AST_Destructuring) {\n                            var destructuring_cache = destructuring_value;\n                            destructuring_value = def.value;\n                            def.walk(tw);\n                            destructuring_value = destructuring_cache;\n                        } else {\n                            var node_def = def.name.definition();\n                            map_add(initializations, node_def.id, def.value);\n                            if (!node_def.chained && def.name.fixed_value() === def.value) {\n                                fixed_ids.set(node_def.id, def);\n                            }\n                        }\n                        if (def.value.has_side_effects(compressor)) {\n                            def.value.walk(tw);\n                        }\n                    }\n                });\n                return true;\n            }\n            if (node.destructuring && destructuring_value) {\n                map_add(initializations, node.name, destructuring_value);\n            }\n            return scan_ref_scoped(node, descend);\n        });\n        self.walk(tw);\n        // pass 2: for every used symbol we need to walk its\n        // initialization code to figure out if it uses other\n        // symbols (that may not be in_use).\n        tw = new TreeWalker(scan_ref_scoped);\n        in_use_ids.forEach(function (def) {\n            var init = initializations.get(def.id);\n            if (init) init.forEach(function(init) {\n                init.walk(tw);\n            });\n        });\n        // pass 3: we should drop declarations not in_use\n        var tt = new TreeTransformer(\n            function before(node, descend, in_list) {\n                var parent = tt.parent();\n                if (drop_vars) {\n                    var sym = assign_as_unused(node);\n                    if (sym instanceof AST_SymbolRef) {\n                        var def = sym.definition();\n                        var in_use = in_use_ids.has(def.id);\n                        if (node instanceof AST_Assign) {\n                            if (!in_use || fixed_ids.has(def.id) && fixed_ids.get(def.id) !== node) {\n                                return maintain_this_binding(parent, node, node.right.transform(tt));\n                            }\n                        } else if (!in_use) return make_node(AST_Number, node, {\n                            value: 0\n                        });\n                    }\n                }\n                if (scope !== self) return;\n                var def;\n                if (node.name\n                    && (node instanceof AST_ClassExpression\n                        && !keep_name(compressor.option(\"keep_classnames\"), (def = node.name.definition()).name)\n                    || node instanceof AST_Function\n                        && !keep_name(compressor.option(\"keep_fnames\"), (def = node.name.definition()).name))) {\n                    // any declarations with same name will overshadow\n                    // name of this anonymous function and can therefore\n                    // never be used anywhere\n                    if (!in_use_ids.has(def.id) || def.orig.length > 1) node.name = null;\n                }\n                if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) {\n                    var trim = !compressor.option(\"keep_fargs\");\n                    for (var a = node.argnames, i = a.length; --i >= 0;) {\n                        var sym = a[i];\n                        if (sym instanceof AST_Expansion) {\n                            sym = sym.expression;\n                        }\n                        if (sym instanceof AST_DefaultAssign) {\n                            sym = sym.left;\n                        }\n                        // Do not drop destructuring arguments.\n                        // They constitute a type assertion, so dropping\n                        // them would stop that TypeError which would happen\n                        // if someone called it with an incorrectly formatted\n                        // parameter.\n                        if (!(sym instanceof AST_Destructuring) && !in_use_ids.has(sym.definition().id)) {\n                            sym.__unused = true;\n                            if (trim) {\n                                a.pop();\n                                compressor[sym.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function argument {name} [{file}:{line},{col}]\", template(sym));\n                            }\n                        } else {\n                            trim = false;\n                        }\n                    }\n                }\n                if ((node instanceof AST_Defun || node instanceof AST_DefClass) && node !== self) {\n                    var def = node.name.definition();\n                    var keep = in_use_ids.has(def.id) || !drop_funcs && def.global;\n                    if (!keep) {\n                        compressor[node.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function {name} [{file}:{line},{col}]\", template(node.name));\n                        def.eliminated++;\n                        return make_node(AST_EmptyStatement, node);\n                    }\n                }\n                if (node instanceof AST_Definitions && !(parent instanceof AST_ForIn && parent.init === node)) {\n                    var drop_block = !(parent instanceof AST_Toplevel) && !(node instanceof AST_Var);\n                    // place uninitialized names at the start\n                    var body = [], head = [], tail = [];\n                    // for unused names whose initialization has\n                    // side effects, we can cascade the init. code\n                    // into the next one, or next statement.\n                    var side_effects = [];\n                    node.definitions.forEach(function(def) {\n                        if (def.value) def.value = def.value.transform(tt);\n                        var is_destructure = def.name instanceof AST_Destructuring;\n                        var sym = is_destructure\n                            ? new SymbolDef(null, { name: \"<destructure>\" }) /* fake SymbolDef */\n                            : def.name.definition();\n                        if (drop_block && sym.global) return tail.push(def);\n                        if (!(drop_vars || drop_block)\n                            || is_destructure\n                                && (def.name.names.length\n                                    || def.name.is_array\n                                    || compressor.option(\"pure_getters\") != true)\n                            || in_use_ids.has(sym.id)) {\n                            if (def.value && fixed_ids.has(sym.id) && fixed_ids.get(sym.id) !== def) {\n                                def.value = def.value.drop_side_effect_free(compressor);\n                            }\n                            if (def.name instanceof AST_SymbolVar) {\n                                var var_defs = var_defs_by_id.get(sym.id);\n                                if (var_defs.length > 1 && (!def.value || sym.orig.indexOf(def.name) > sym.eliminated)) {\n                                    compressor.warn(\"Dropping duplicated definition of variable {name} [{file}:{line},{col}]\", template(def.name));\n                                    if (def.value) {\n                                        var ref = make_node(AST_SymbolRef, def.name, def.name);\n                                        sym.references.push(ref);\n                                        var assign = make_node(AST_Assign, def, {\n                                            operator: \"=\",\n                                            left: ref,\n                                            right: def.value\n                                        });\n                                        if (fixed_ids.get(sym.id) === def) {\n                                            fixed_ids.set(sym.id, assign);\n                                        }\n                                        side_effects.push(assign.transform(tt));\n                                    }\n                                    remove(var_defs, def);\n                                    sym.eliminated++;\n                                    return;\n                                }\n                            }\n                            if (def.value) {\n                                if (side_effects.length > 0) {\n                                    if (tail.length > 0) {\n                                        side_effects.push(def.value);\n                                        def.value = make_sequence(def.value, side_effects);\n                                    } else {\n                                        body.push(make_node(AST_SimpleStatement, node, {\n                                            body: make_sequence(node, side_effects)\n                                        }));\n                                    }\n                                    side_effects = [];\n                                }\n                                tail.push(def);\n                            } else {\n                                head.push(def);\n                            }\n                        } else if (sym.orig[0] instanceof AST_SymbolCatch) {\n                            var value = def.value && def.value.drop_side_effect_free(compressor);\n                            if (value) side_effects.push(value);\n                            def.value = null;\n                            head.push(def);\n                        } else {\n                            var value = def.value && def.value.drop_side_effect_free(compressor);\n                            if (value) {\n                                if (!is_destructure) compressor.warn(\"Side effects in initialization of unused variable {name} [{file}:{line},{col}]\", template(def.name));\n                                side_effects.push(value);\n                            } else {\n                                if (!is_destructure) compressor[def.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused variable {name} [{file}:{line},{col}]\", template(def.name));\n                            }\n                            sym.eliminated++;\n                        }\n                    });\n                    if (head.length > 0 || tail.length > 0) {\n                        node.definitions = head.concat(tail);\n                        body.push(node);\n                    }\n                    if (side_effects.length > 0) {\n                        body.push(make_node(AST_SimpleStatement, node, {\n                            body: make_sequence(node, side_effects)\n                        }));\n                    }\n                    switch (body.length) {\n                      case 0:\n                        return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);\n                      case 1:\n                        return body[0];\n                      default:\n                        return in_list ? MAP.splice(body) : make_node(AST_BlockStatement, node, {\n                            body: body\n                        });\n                    }\n                }\n                // certain combination of unused name + side effect leads to:\n                //    https://github.com/mishoo/UglifyJS2/issues/44\n                //    https://github.com/mishoo/UglifyJS2/issues/1830\n                //    https://github.com/mishoo/UglifyJS2/issues/1838\n                // that's an invalid AST.\n                // We fix it at this stage by moving the `var` outside the `for`.\n                if (node instanceof AST_For) {\n                    descend(node, this);\n                    var block;\n                    if (node.init instanceof AST_BlockStatement) {\n                        block = node.init;\n                        node.init = block.body.pop();\n                        block.body.push(node);\n                    }\n                    if (node.init instanceof AST_SimpleStatement) {\n                        node.init = node.init.body;\n                    } else if (is_empty(node.init)) {\n                        node.init = null;\n                    }\n                    return !block ? node : in_list ? MAP.splice(block.body) : block;\n                }\n                if (node instanceof AST_LabeledStatement && node.body instanceof AST_For) {\n                    descend(node, this);\n                    if (node.body instanceof AST_BlockStatement) {\n                        var block = node.body;\n                        node.body = block.body.pop();\n                        block.body.push(node);\n                        return in_list ? MAP.splice(block.body) : block;\n                    }\n                    return node;\n                }\n                if (node instanceof AST_BlockStatement) {\n                    descend(node, this);\n                    if (in_list && node.body.every(can_be_evicted_from_block)) {\n                        return MAP.splice(node.body);\n                    }\n                    return node;\n                }\n                if (node instanceof AST_Scope) {\n                    var save_scope = scope;\n                    scope = node;\n                    descend(node, this);\n                    scope = save_scope;\n                    return node;\n                }\n\n                function template(sym) {\n                    return {\n                        name : sym.name,\n                        file : sym.start.file,\n                        line : sym.start.line,\n                        col  : sym.start.col\n                    };\n                }\n            }\n        );\n        self.transform(tt);\n\n        function scan_ref_scoped(node, descend) {\n            var node_def, sym = assign_as_unused(node);\n            if (sym instanceof AST_SymbolRef\n                && !is_ref_of(node.left, AST_SymbolBlockDeclaration)\n                && self.variables.get(sym.name) === (node_def = sym.definition())) {\n                if (node instanceof AST_Assign) {\n                    node.right.walk(tw);\n                    if (!node_def.chained && node.left.fixed_value() === node.right) {\n                        fixed_ids.set(node_def.id, node);\n                    }\n                }\n                return true;\n            }\n            if (node instanceof AST_SymbolRef) {\n                node_def = node.definition();\n                if (!in_use_ids.has(node_def.id)) {\n                    in_use_ids.set(node_def.id, node_def);\n                    if (node_def = node_def.redefined()) {\n                        in_use_ids.set(node_def.id, node_def);\n                    }\n                }\n                return true;\n            }\n            if (node instanceof AST_Scope) {\n                var save_scope = scope;\n                scope = node;\n                descend();\n                scope = save_scope;\n                return true;\n            }\n        }\n    });\n\n    AST_Scope.DEFMETHOD(\"hoist_declarations\", function(compressor) {\n        var self = this;\n        if (compressor.has_directive(\"use asm\")) return self;\n        // Hoisting makes no sense in an arrow func\n        if (!Array.isArray(self.body)) return self;\n\n        var hoist_funs = compressor.option(\"hoist_funs\");\n        var hoist_vars = compressor.option(\"hoist_vars\");\n\n        if (hoist_funs || hoist_vars) {\n            var dirs = [];\n            var hoisted = [];\n            var vars = new Map(), vars_found = 0, var_decl = 0;\n            // let's count var_decl first, we seem to waste a lot of\n            // space if we hoist `var` when there's only one.\n            self.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_Scope && node !== self)\n                    return true;\n                if (node instanceof AST_Var) {\n                    ++var_decl;\n                    return true;\n                }\n            }));\n            hoist_vars = hoist_vars && var_decl > 1;\n            var tt = new TreeTransformer(\n                function before(node) {\n                    if (node !== self) {\n                        if (node instanceof AST_Directive) {\n                            dirs.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (hoist_funs && node instanceof AST_Defun\n                            && !(tt.parent() instanceof AST_Export)\n                            && tt.parent() === self) {\n                            hoisted.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (hoist_vars && node instanceof AST_Var) {\n                            node.definitions.forEach(function(def) {\n                                if (def.name instanceof AST_Destructuring) return;\n                                vars.set(def.name.name, def);\n                                ++vars_found;\n                            });\n                            var seq = node.to_assignments(compressor);\n                            var p = tt.parent();\n                            if (p instanceof AST_ForIn && p.init === node) {\n                                if (seq == null) {\n                                    var def = node.definitions[0].name;\n                                    return make_node(AST_SymbolRef, def, def);\n                                }\n                                return seq;\n                            }\n                            if (p instanceof AST_For && p.init === node) {\n                                return seq;\n                            }\n                            if (!seq) return make_node(AST_EmptyStatement, node);\n                            return make_node(AST_SimpleStatement, node, {\n                                body: seq\n                            });\n                        }\n                        if (node instanceof AST_Scope)\n                            return node; // to avoid descending in nested scopes\n                    }\n                }\n            );\n            self = self.transform(tt);\n            if (vars_found > 0) {\n                // collect only vars which don't show up in self's arguments list\n                var defs = [];\n                const is_lambda = self instanceof AST_Lambda;\n                const args_as_names = is_lambda ? self.args_as_names() : null;\n                vars.forEach((def, name) => {\n                    if (is_lambda && args_as_names.some((x) => x.name === def.name.name)) {\n                        vars.delete(name);\n                    } else {\n                        def = def.clone();\n                        def.value = null;\n                        defs.push(def);\n                        vars.set(name, def);\n                    }\n                });\n                if (defs.length > 0) {\n                    // try to merge in assignments\n                    for (var i = 0; i < self.body.length;) {\n                        if (self.body[i] instanceof AST_SimpleStatement) {\n                            var expr = self.body[i].body, sym, assign;\n                            if (expr instanceof AST_Assign\n                                && expr.operator == \"=\"\n                                && (sym = expr.left) instanceof AST_Symbol\n                                && vars.has(sym.name)\n                            ) {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = expr.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body.splice(i, 1);\n                                continue;\n                            }\n                            if (expr instanceof AST_Sequence\n                                && (assign = expr.expressions[0]) instanceof AST_Assign\n                                && assign.operator == \"=\"\n                                && (sym = assign.left) instanceof AST_Symbol\n                                && vars.has(sym.name)\n                            ) {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = assign.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body[i].body = make_sequence(expr, expr.expressions.slice(1));\n                                continue;\n                            }\n                        }\n                        if (self.body[i] instanceof AST_EmptyStatement) {\n                            self.body.splice(i, 1);\n                            continue;\n                        }\n                        if (self.body[i] instanceof AST_BlockStatement) {\n                            var tmp = [ i, 1 ].concat(self.body[i].body);\n                            self.body.splice.apply(self.body, tmp);\n                            continue;\n                        }\n                        break;\n                    }\n                    defs = make_node(AST_Var, self, {\n                        definitions: defs\n                    });\n                    hoisted.push(defs);\n                }\n            }\n            self.body = dirs.concat(hoisted, self.body);\n        }\n        return self;\n    });\n\n    AST_Scope.DEFMETHOD(\"var_names\", function varNames() {\n        var var_names = this._var_names;\n        if (!var_names) {\n            this._var_names = var_names = new Set(this.parent_scope ? varNames.call(this.parent_scope) : null);\n            this.enclosed.forEach(function(def) {\n                var_names.add(def.name);\n            });\n            this.variables.forEach(function(def, name) {\n                var_names.add(name);\n            });\n        }\n        return var_names;\n    });\n\n    AST_Scope.DEFMETHOD(\"make_var_name\", function(prefix) {\n        var var_names = this.var_names();\n        prefix = prefix.replace(/(?:^[^a-z_$]|[^a-z0-9_$])/ig, \"_\");\n        var name = prefix;\n        for (var i = 0; var_names.has(name); i++) name = prefix + \"$\" + i;\n        var_names.add(name);\n        return name;\n    });\n\n    AST_Scope.DEFMETHOD(\"hoist_properties\", function(compressor) {\n        var self = this;\n        if (!compressor.option(\"hoist_props\") || compressor.has_directive(\"use asm\")) return self;\n        var top_retain = self instanceof AST_Toplevel && compressor.top_retain || return_false;\n        var defs_by_id = new Map();\n        var tt = new TreeTransformer(function(node, descend) {\n            if (node instanceof AST_Definitions && tt.parent() instanceof AST_Export) return node;\n            if (node instanceof AST_VarDef) {\n                var sym = node.name, def, value;\n                if (sym.scope === self\n                    && (def = sym.definition()).escaped != 1\n                    && !def.assignments\n                    && !def.direct_access\n                    && !def.single_use\n                    && !compressor.exposed(def)\n                    && !top_retain(def)\n                    && (value = sym.fixed_value()) === node.value\n                    && value instanceof AST_Object) {\n                    descend(node, this);\n                    var defs = new Map();\n                    var assignments = [];\n                    value.properties.forEach(function(prop) {\n                        assignments.push(make_node(AST_VarDef, node, {\n                            name: make_sym(prop.key),\n                            value: prop.value\n                        }));\n                    });\n                    defs_by_id.set(def.id, defs);\n                    return MAP.splice(assignments);\n                }\n            }\n            if (node instanceof AST_PropAccess && node.expression instanceof AST_SymbolRef) {\n                var defs = defs_by_id.get(node.expression.definition().id);\n                if (defs) {\n                    var def = defs.get(String(get_value(node.property)));\n                    var sym = make_node(AST_SymbolRef, node, {\n                        name: def.name,\n                        scope: node.expression.scope,\n                        thedef: def\n                    });\n                    sym.reference({});\n                    return sym;\n                }\n            }\n\n            function make_sym(key) {\n                var new_var = make_node(sym.CTOR, sym, {\n                    name: self.make_var_name(sym.name + \"_\" + key),\n                    scope: self\n                });\n                var def = self.def_variable(new_var);\n                defs.set(String(key), def);\n                self.enclosed.push(def);\n                return new_var;\n            }\n        });\n        return self.transform(tt);\n    });\n\n    // drop_side_effect_free()\n    // remove side-effect-free parts which only affects return value\n    (function(def_drop_side_effect_free) {\n        // Drop side-effect-free elements from an array of expressions.\n        // Returns an array of expressions with side-effects or null\n        // if all elements were dropped. Note: original array may be\n        // returned if nothing changed.\n        function trim(nodes, compressor, first_in_statement) {\n            var len = nodes.length;\n            if (!len) return null;\n            var ret = [], changed = false;\n            for (var i = 0; i < len; i++) {\n                var node = nodes[i].drop_side_effect_free(compressor, first_in_statement);\n                changed |= node !== nodes[i];\n                if (node) {\n                    ret.push(node);\n                    first_in_statement = false;\n                }\n            }\n            return changed ? ret.length ? ret : null : nodes;\n        }\n\n        def_drop_side_effect_free(AST_Node, return_this);\n        def_drop_side_effect_free(AST_Constant, return_null);\n        def_drop_side_effect_free(AST_This, return_null);\n        def_drop_side_effect_free(AST_Call, function(compressor, first_in_statement) {\n            if (!this.is_expr_pure(compressor)) {\n                if (this.expression.is_call_pure(compressor)) {\n                    var exprs = this.args.slice();\n                    exprs.unshift(this.expression.expression);\n                    exprs = trim(exprs, compressor, first_in_statement);\n                    return exprs && make_sequence(this, exprs);\n                }\n                if (is_func_expr(this.expression)\n                    && (!this.expression.name || !this.expression.name.definition().references.length)) {\n                    var node = this.clone();\n                    node.expression.process_expression(false, compressor);\n                    return node;\n                }\n                return this;\n            }\n            if (this.pure) {\n                compressor.warn(\"Dropping __PURE__ call [{file}:{line},{col}]\", this.start);\n            }\n            var args = trim(this.args, compressor, first_in_statement);\n            return args && make_sequence(this, args);\n        });\n        def_drop_side_effect_free(AST_Accessor, return_null);\n        def_drop_side_effect_free(AST_Function, return_null);\n        def_drop_side_effect_free(AST_Arrow, return_null);\n        def_drop_side_effect_free(AST_ClassExpression, return_null);\n        def_drop_side_effect_free(AST_Binary, function(compressor, first_in_statement) {\n            var right = this.right.drop_side_effect_free(compressor);\n            if (!right) return this.left.drop_side_effect_free(compressor, first_in_statement);\n            if (lazy_op.has(this.operator)) {\n                if (right === this.right) return this;\n                var node = this.clone();\n                node.right = right;\n                return node;\n            } else {\n                var left = this.left.drop_side_effect_free(compressor, first_in_statement);\n                if (!left) return this.right.drop_side_effect_free(compressor, first_in_statement);\n                return make_sequence(this, [ left, right ]);\n            }\n        });\n        def_drop_side_effect_free(AST_Assign, function(compressor) {\n            var left = this.left;\n            if (left.has_side_effects(compressor)\n                || compressor.has_directive(\"use strict\")\n                    && left instanceof AST_PropAccess\n                    && left.expression.is_constant()) {\n                return this;\n            }\n            this.write_only = true;\n            while (left instanceof AST_PropAccess) {\n                left = left.expression;\n            }\n            if (left.is_constant_expression(compressor.find_parent(AST_Scope))) {\n                return this.right.drop_side_effect_free(compressor);\n            }\n            return this;\n        });\n        def_drop_side_effect_free(AST_Conditional, function(compressor) {\n            var consequent = this.consequent.drop_side_effect_free(compressor);\n            var alternative = this.alternative.drop_side_effect_free(compressor);\n            if (consequent === this.consequent && alternative === this.alternative) return this;\n            if (!consequent) return alternative ? make_node(AST_Binary, this, {\n                operator: \"||\",\n                left: this.condition,\n                right: alternative\n            }) : this.condition.drop_side_effect_free(compressor);\n            if (!alternative) return make_node(AST_Binary, this, {\n                operator: \"&&\",\n                left: this.condition,\n                right: consequent\n            });\n            var node = this.clone();\n            node.consequent = consequent;\n            node.alternative = alternative;\n            return node;\n        });\n        def_drop_side_effect_free(AST_Unary, function(compressor, first_in_statement) {\n            if (unary_side_effects.has(this.operator)) {\n                this.write_only = !this.expression.has_side_effects(compressor);\n                return this;\n            }\n            if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef) return null;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (first_in_statement && expression && is_iife_call(expression)) {\n                if (expression === this.expression && this.operator == \"!\") return this;\n                return expression.negate(compressor, first_in_statement);\n            }\n            return expression;\n        });\n        def_drop_side_effect_free(AST_SymbolRef, function(compressor) {\n            return this.is_declared(compressor) ? null : this;\n        });\n        def_drop_side_effect_free(AST_Object, function(compressor, first_in_statement) {\n            var values = trim(this.properties, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n        def_drop_side_effect_free(AST_ObjectProperty, function(compressor, first_in_statement) {\n            return this.value.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def_drop_side_effect_free(AST_Array, function(compressor, first_in_statement) {\n            var values = trim(this.elements, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n        def_drop_side_effect_free(AST_Dot, function(compressor, first_in_statement) {\n            if (this.expression.may_throw_on_access(compressor)) return this;\n            return this.expression.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def_drop_side_effect_free(AST_Sub, function(compressor, first_in_statement) {\n            if (this.expression.may_throw_on_access(compressor)) return this;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (!expression) return this.property.drop_side_effect_free(compressor, first_in_statement);\n            var property = this.property.drop_side_effect_free(compressor);\n            if (!property) return expression;\n            return make_sequence(this, [ expression, property ]);\n        });\n        def_drop_side_effect_free(AST_Sequence, function(compressor) {\n            var last = this.tail_node();\n            var expr = last.drop_side_effect_free(compressor);\n            if (expr === last) return this;\n            var expressions = this.expressions.slice(0, -1);\n            if (expr) expressions.push(expr);\n            return make_sequence(this, expressions);\n        });\n        def_drop_side_effect_free(AST_Expansion, function(compressor, first_in_statement) {\n            return this.expression.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def_drop_side_effect_free(AST_TemplateSegment, return_null);\n        def_drop_side_effect_free(AST_TemplateString, function(compressor) {\n            var values = trim(this.segments, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"drop_side_effect_free\", func);\n    });\n\n    var pure_prop_access_globals = [\n        \"Number\",\n        \"String\",\n        \"Array\",\n        \"Object\",\n        \"Function\",\n        \"Promise\",\n        \"global\",\n        \"window\",\n        \"document\",\n        \"location\"\n    ];\n    def_optimize(AST_SimpleStatement, function(self, compressor) {\n        if (self.body instanceof AST_SymbolRef && pure_prop_access_globals.indexOf(self.body.name) !== -1) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        if (compressor.option(\"side_effects\")) {\n            var body = self.body;\n            var node = body.drop_side_effect_free(compressor, true);\n            if (!node) {\n                compressor.warn(\"Dropping side-effect-free statement [{file}:{line},{col}]\", self.start);\n                return make_node(AST_EmptyStatement, self);\n            }\n            if (node !== body) {\n                return make_node(AST_SimpleStatement, self, { body: node });\n            }\n        }\n        return self;\n    });\n\n    def_optimize(AST_While, function(self, compressor) {\n        return compressor.option(\"loops\") ? make_node(AST_For, self, self).optimize(compressor) : self;\n    });\n\n    function has_break_or_continue(loop, parent) {\n        var found = false;\n        var tw = new TreeWalker(function(node) {\n            if (found || node instanceof AST_Scope) return true;\n            if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === loop) {\n                return found = true;\n            }\n        });\n        if (parent instanceof AST_LabeledStatement) tw.push(parent);\n        tw.push(loop);\n        loop.body.walk(tw);\n        return found;\n    }\n\n    def_optimize(AST_Do, function(self, compressor) {\n        if (!compressor.option(\"loops\")) return self;\n        var cond = self.condition.tail_node().evaluate(compressor);\n        if (!(cond instanceof AST_Node)) {\n            if (cond) return make_node(AST_For, self, {\n                body: make_node(AST_BlockStatement, self.body, {\n                    body: [\n                        self.body,\n                        make_node(AST_SimpleStatement, self.condition, {\n                            body: self.condition\n                        })\n                    ]\n                })\n            }).optimize(compressor);\n            if (!has_break_or_continue(self, compressor.parent())) {\n                return make_node(AST_BlockStatement, self.body, {\n                    body: [\n                        self.body,\n                        make_node(AST_SimpleStatement, self.condition, {\n                            body: self.condition\n                        })\n                    ]\n                }).optimize(compressor);\n            }\n        }\n        return self;\n    });\n\n    function if_break_in_loop(self, compressor) {\n        var first = self.body instanceof AST_BlockStatement ? self.body.body[0] : self.body;\n        if (compressor.option(\"dead_code\") && is_break(first)) {\n            var body = [];\n            if (self.init instanceof AST_Statement) {\n                body.push(self.init);\n            } else if (self.init) {\n                body.push(make_node(AST_SimpleStatement, self.init, {\n                    body: self.init\n                }));\n            }\n            if (self.condition) {\n                body.push(make_node(AST_SimpleStatement, self.condition, {\n                    body: self.condition\n                }));\n            }\n            extract_declarations_from_unreachable_code(compressor, self.body, body);\n            return make_node(AST_BlockStatement, self, {\n                body: body\n            });\n        }\n        if (first instanceof AST_If) {\n            if (is_break(first.body)) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition.negate(compressor),\n                    });\n                } else {\n                    self.condition = first.condition.negate(compressor);\n                }\n                drop_it(first.alternative);\n            } else if (is_break(first.alternative)) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition,\n                    });\n                } else {\n                    self.condition = first.condition;\n                }\n                drop_it(first.body);\n            }\n        }\n        return self;\n\n        function is_break(node) {\n            return node instanceof AST_Break\n                && compressor.loopcontrol_target(node) === compressor.self();\n        }\n\n        function drop_it(rest) {\n            rest = as_statement_array(rest);\n            if (self.body instanceof AST_BlockStatement) {\n                self.body = self.body.clone();\n                self.body.body = rest.concat(self.body.body.slice(1));\n                self.body = self.body.transform(compressor);\n            } else {\n                self.body = make_node(AST_BlockStatement, self.body, {\n                    body: rest\n                }).transform(compressor);\n            }\n            self = if_break_in_loop(self, compressor);\n        }\n    }\n\n    def_optimize(AST_For, function(self, compressor) {\n        if (!compressor.option(\"loops\")) return self;\n        if (compressor.option(\"side_effects\") && self.init) {\n            self.init = self.init.drop_side_effect_free(compressor);\n        }\n        if (self.condition) {\n            var cond = self.condition.evaluate(compressor);\n            if (!(cond instanceof AST_Node)) {\n                if (cond) self.condition = null;\n                else if (!compressor.option(\"dead_code\")) {\n                    var orig = self.condition;\n                    self.condition = make_node_from_constant(cond, self.condition);\n                    self.condition = best_of_expression(self.condition.transform(compressor), orig);\n                }\n            }\n            if (compressor.option(\"dead_code\")) {\n                if (cond instanceof AST_Node) cond = self.condition.tail_node().evaluate(compressor);\n                if (!cond) {\n                    var body = [];\n                    extract_declarations_from_unreachable_code(compressor, self.body, body);\n                    if (self.init instanceof AST_Statement) {\n                        body.push(self.init);\n                    } else if (self.init) {\n                        body.push(make_node(AST_SimpleStatement, self.init, {\n                            body: self.init\n                        }));\n                    }\n                    body.push(make_node(AST_SimpleStatement, self.condition, {\n                        body: self.condition\n                    }));\n                    return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n                }\n            }\n        }\n        return if_break_in_loop(self, compressor);\n    });\n\n    def_optimize(AST_If, function(self, compressor) {\n        if (is_empty(self.alternative)) self.alternative = null;\n\n        if (!compressor.option(\"conditionals\")) return self;\n        // if condition can be statically determined, warn and drop\n        // one of the blocks.  note, statically determined implies\n        // “has no side effects”; also it doesn't work for cases like\n        // `x && true`, though it probably should.\n        var cond = self.condition.evaluate(compressor);\n        if (!compressor.option(\"dead_code\") && !(cond instanceof AST_Node)) {\n            var orig = self.condition;\n            self.condition = make_node_from_constant(cond, orig);\n            self.condition = best_of_expression(self.condition.transform(compressor), orig);\n        }\n        if (compressor.option(\"dead_code\")) {\n            if (cond instanceof AST_Node) cond = self.condition.tail_node().evaluate(compressor);\n            if (!cond) {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.condition.start);\n                var body = [];\n                extract_declarations_from_unreachable_code(compressor, self.body, body);\n                body.push(make_node(AST_SimpleStatement, self.condition, {\n                    body: self.condition\n                }));\n                if (self.alternative) body.push(self.alternative);\n                return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n            } else if (!(cond instanceof AST_Node)) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.condition.start);\n                var body = [];\n                if (self.alternative) {\n                    extract_declarations_from_unreachable_code(compressor, self.alternative, body);\n                }\n                body.push(make_node(AST_SimpleStatement, self.condition, {\n                    body: self.condition\n                }));\n                body.push(self.body);\n                return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n            }\n        }\n        var negated = self.condition.negate(compressor);\n        var self_condition_length = self.condition.print_to_string().length;\n        var negated_length = negated.print_to_string().length;\n        var negated_is_best = negated_length < self_condition_length;\n        if (self.alternative && negated_is_best) {\n            negated_is_best = false; // because we already do the switch here.\n            // no need to swap values of self_condition_length and negated_length\n            // here because they are only used in an equality comparison later on.\n            self.condition = negated;\n            var tmp = self.body;\n            self.body = self.alternative || make_node(AST_EmptyStatement, self);\n            self.alternative = tmp;\n        }\n        if (is_empty(self.body) && is_empty(self.alternative)) {\n            return make_node(AST_SimpleStatement, self.condition, {\n                body: self.condition.clone()\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_SimpleStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.body,\n                    alternative : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (is_empty(self.alternative) && self.body instanceof AST_SimpleStatement) {\n            if (self_condition_length === negated_length && !negated_is_best\n                && self.condition instanceof AST_Binary && self.condition.operator == \"||\") {\n                // although the code length of self.condition and negated are the same,\n                // negated does not require additional surrounding parentheses.\n                // see https://github.com/mishoo/UglifyJS2/issues/979\n                negated_is_best = true;\n            }\n            if (negated_is_best) return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : negated,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"&&\",\n                    left     : self.condition,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_EmptyStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : self.condition,\n                    right    : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_Exit\n            && self.alternative instanceof AST_Exit\n            && self.body.TYPE == self.alternative.TYPE) {\n            return make_node(self.body.CTOR, self, {\n                value: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.value || make_node(AST_Undefined, self.body),\n                    alternative : self.alternative.value || make_node(AST_Undefined, self.alternative)\n                }).transform(compressor)\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_If\n            && !self.body.alternative\n            && !self.alternative) {\n            self = make_node(AST_If, self, {\n                condition: make_node(AST_Binary, self.condition, {\n                    operator: \"&&\",\n                    left: self.condition,\n                    right: self.body.condition\n                }),\n                body: self.body.body,\n                alternative: null\n            });\n        }\n        if (aborts(self.body)) {\n            if (self.alternative) {\n                var alt = self.alternative;\n                self.alternative = null;\n                return make_node(AST_BlockStatement, self, {\n                    body: [ self, alt ]\n                }).optimize(compressor);\n            }\n        }\n        if (aborts(self.alternative)) {\n            var body = self.body;\n            self.body = self.alternative;\n            self.condition = negated_is_best ? negated : self.condition.negate(compressor);\n            self.alternative = null;\n            return make_node(AST_BlockStatement, self, {\n                body: [ self, body ]\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    def_optimize(AST_Switch, function(self, compressor) {\n        if (!compressor.option(\"switches\")) return self;\n        var branch;\n        var value = self.expression.evaluate(compressor);\n        if (!(value instanceof AST_Node)) {\n            var orig = self.expression;\n            self.expression = make_node_from_constant(value, orig);\n            self.expression = best_of_expression(self.expression.transform(compressor), orig);\n        }\n        if (!compressor.option(\"dead_code\")) return self;\n        if (value instanceof AST_Node) {\n            value = self.expression.tail_node().evaluate(compressor);\n        }\n        var decl = [];\n        var body = [];\n        var default_branch;\n        var exact_match;\n        for (var i = 0, len = self.body.length; i < len && !exact_match; i++) {\n            branch = self.body[i];\n            if (branch instanceof AST_Default) {\n                if (!default_branch) {\n                    default_branch = branch;\n                } else {\n                    eliminate_branch(branch, body[body.length - 1]);\n                }\n            } else if (!(value instanceof AST_Node)) {\n                var exp = branch.expression.evaluate(compressor);\n                if (!(exp instanceof AST_Node) && exp !== value) {\n                    eliminate_branch(branch, body[body.length - 1]);\n                    continue;\n                }\n                if (exp instanceof AST_Node) exp = branch.expression.tail_node().evaluate(compressor);\n                if (exp === value) {\n                    exact_match = branch;\n                    if (default_branch) {\n                        var default_index = body.indexOf(default_branch);\n                        body.splice(default_index, 1);\n                        eliminate_branch(default_branch, body[default_index - 1]);\n                        default_branch = null;\n                    }\n                }\n            }\n            if (aborts(branch)) {\n                var prev = body[body.length - 1];\n                if (aborts(prev) && prev.body.length == branch.body.length\n                    && make_node(AST_BlockStatement, prev, prev).equivalent_to(make_node(AST_BlockStatement, branch, branch))) {\n                    prev.body = [];\n                }\n            }\n            body.push(branch);\n        }\n        while (i < len) eliminate_branch(self.body[i++], body[body.length - 1]);\n        if (body.length > 0) {\n            body[0].body = decl.concat(body[0].body);\n        }\n        self.body = body;\n        while (branch = body[body.length - 1]) {\n            var stat = branch.body[branch.body.length - 1];\n            if (stat instanceof AST_Break && compressor.loopcontrol_target(stat) === self)\n                branch.body.pop();\n            if (branch.body.length || branch instanceof AST_Case\n                && (default_branch || branch.expression.has_side_effects(compressor))) break;\n            if (body.pop() === default_branch) default_branch = null;\n        }\n        if (body.length == 0) {\n            return make_node(AST_BlockStatement, self, {\n                body: decl.concat(make_node(AST_SimpleStatement, self.expression, {\n                    body: self.expression\n                }))\n            }).optimize(compressor);\n        }\n        if (body.length == 1 && (body[0] === exact_match || body[0] === default_branch)) {\n            var has_break = false;\n            var tw = new TreeWalker(function(node) {\n                if (has_break\n                    || node instanceof AST_Lambda\n                    || node instanceof AST_SimpleStatement) return true;\n                if (node instanceof AST_Break && tw.loopcontrol_target(node) === self)\n                    has_break = true;\n            });\n            self.walk(tw);\n            if (!has_break) {\n                var statements = body[0].body.slice();\n                var exp = body[0].expression;\n                if (exp) statements.unshift(make_node(AST_SimpleStatement, exp, {\n                    body: exp\n                }));\n                statements.unshift(make_node(AST_SimpleStatement, self.expression, {\n                    body:self.expression\n                }));\n                return make_node(AST_BlockStatement, self, {\n                    body: statements\n                }).optimize(compressor);\n            }\n        }\n        return self;\n\n        function eliminate_branch(branch, prev) {\n            if (prev && !aborts(prev)) {\n                prev.body = prev.body.concat(branch.body);\n            } else {\n                extract_declarations_from_unreachable_code(compressor, branch, decl);\n            }\n        }\n    });\n\n    def_optimize(AST_Try, function(self, compressor) {\n        tighten_body(self.body, compressor);\n        if (self.bcatch && self.bfinally && self.bfinally.body.every(is_empty)) self.bfinally = null;\n        if (compressor.option(\"dead_code\") && self.body.every(is_empty)) {\n            var body = [];\n            if (self.bcatch) {\n                extract_declarations_from_unreachable_code(compressor, self.bcatch, body);\n                body.forEach(function(stat) {\n                    if (!(stat instanceof AST_Definitions)) return;\n                    stat.definitions.forEach(function(var_def) {\n                        var def = var_def.name.definition().redefined();\n                        if (!def) return;\n                        var_def.name = var_def.name.clone();\n                        var_def.name.thedef = def;\n                    });\n                });\n            }\n            if (self.bfinally) body = body.concat(self.bfinally.body);\n            return make_node(AST_BlockStatement, self, {\n                body: body\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    AST_Definitions.DEFMETHOD(\"remove_initializers\", function() {\n        var decls = [];\n        this.definitions.forEach(function(def) {\n            if (def.name instanceof AST_SymbolDeclaration) {\n                def.value = null;\n                decls.push(def);\n            } else def.name.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_SymbolDeclaration) {\n                    decls.push(make_node(AST_VarDef, def, {\n                        name: node,\n                        value: null\n                    }));\n                }\n            }));\n        });\n        this.definitions = decls;\n    });\n\n    AST_Definitions.DEFMETHOD(\"to_assignments\", function(compressor) {\n        var reduce_vars = compressor.option(\"reduce_vars\");\n        var assignments = this.definitions.reduce(function(a, def) {\n            if (def.value && !(def.name instanceof AST_Destructuring)) {\n                var name = make_node(AST_SymbolRef, def.name, def.name);\n                a.push(make_node(AST_Assign, def, {\n                    operator : \"=\",\n                    left     : name,\n                    right    : def.value\n                }));\n                if (reduce_vars) name.definition().fixed = false;\n            } else if (def.value) {\n                // Because it's a destructuring, do not turn into an assignment.\n                var varDef = make_node(AST_VarDef, def, {\n                    name: def.name,\n                    value: def.value\n                });\n                var var_ = make_node(AST_Var, def, {\n                    definitions: [ varDef ]\n                });\n                a.push(var_);\n            }\n            def = def.name.definition();\n            def.eliminated++;\n            def.replaced--;\n            return a;\n        }, []);\n        if (assignments.length == 0) return null;\n        return make_sequence(this, assignments);\n    });\n\n    def_optimize(AST_Definitions, function(self, compressor) {\n        if (self.definitions.length == 0)\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    def_optimize(AST_Import, function(self, compressor) {\n        return self;\n    });\n\n    function retain_top_func(fn, compressor) {\n        return compressor.top_retain\n            && fn instanceof AST_Defun\n            && fn._top\n            && fn.name\n            && compressor.top_retain(fn.name);\n    }\n\n    def_optimize(AST_Call, function(self, compressor) {\n        var exp = self.expression;\n        var fn = exp;\n        inline_array_like_spread(self, compressor, self.args);\n        var simple_args = self.args.every((arg) =>\n            !(arg instanceof AST_Expansion)\n        );\n        if (compressor.option(\"reduce_vars\") && fn instanceof AST_SymbolRef) {\n            fn = fn.fixed_value();\n            if (retain_top_func(fn, compressor)) fn = exp;\n        }\n        var is_func = fn instanceof AST_Lambda;\n        if (compressor.option(\"unused\")\n            && simple_args\n            && is_func\n            && !fn.uses_arguments\n            && !fn.pinned()) {\n            var pos = 0, last = 0;\n            for (var i = 0, len = self.args.length; i < len; i++) {\n                if (fn.argnames[i] instanceof AST_Expansion) {\n                    if (fn.argnames[i].expression.__unused) while (i < len) {\n                        var node = self.args[i++].drop_side_effect_free(compressor);\n                        if (node) {\n                            self.args[pos++] = node;\n                        }\n                    } else while (i < len) {\n                        self.args[pos++] = self.args[i++];\n                    }\n                    last = pos;\n                    break;\n                }\n                var trim = i >= fn.argnames.length;\n                if (trim || fn.argnames[i].__unused) {\n                    var node = self.args[i].drop_side_effect_free(compressor);\n                    if (node) {\n                        self.args[pos++] = node;\n                    } else if (!trim) {\n                        self.args[pos++] = make_node(AST_Number, self.args[i], {\n                            value: 0\n                        });\n                        continue;\n                    }\n                } else {\n                    self.args[pos++] = self.args[i];\n                }\n                last = pos;\n            }\n            self.args.length = last;\n        }\n        if (compressor.option(\"unsafe\")) {\n            if (is_undeclared_ref(exp)) switch (exp.name) {\n              case \"Array\":\n                if (self.args.length != 1) {\n                    return make_node(AST_Array, self, {\n                        elements: self.args\n                    }).optimize(compressor);\n                } else if (self.args[0] instanceof AST_Number && self.args[0].value <= 11) {\n                    const elements = [];\n                    for (let i = 0; i < self.args[0].value; i++) elements.push(new AST_Hole);\n                    return new AST_Array({ elements });\n                }\n                break;\n              case \"Object\":\n                if (self.args.length == 0) {\n                    return make_node(AST_Object, self, {\n                        properties: []\n                    });\n                }\n                break;\n              case \"String\":\n                if (self.args.length == 0) return make_node(AST_String, self, {\n                    value: \"\"\n                });\n                if (self.args.length <= 1) return make_node(AST_Binary, self, {\n                    left: self.args[0],\n                    operator: \"+\",\n                    right: make_node(AST_String, self, { value: \"\" })\n                }).optimize(compressor);\n                break;\n              case \"Number\":\n                if (self.args.length == 0) return make_node(AST_Number, self, {\n                    value: 0\n                });\n                if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                    expression: self.args[0],\n                    operator: \"+\"\n                }).optimize(compressor);\n              case \"Boolean\":\n                if (self.args.length == 0) return make_node(AST_False, self);\n                if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                    expression: make_node(AST_UnaryPrefix, self, {\n                        expression: self.args[0],\n                        operator: \"!\"\n                    }),\n                    operator: \"!\"\n                }).optimize(compressor);\n                break;\n              case \"RegExp\":\n                var params = [];\n                if (self.args.every((arg) => {\n                    var value = arg.evaluate(compressor);\n                    params.push(value);\n                    return arg !== value;\n                })) {\n                    try {\n                        return best_of(compressor, self, make_node(AST_RegExp, self, {\n                            value: RegExp.apply(RegExp, params),\n                        }));\n                    } catch (ex) {\n                        compressor.warn(\"Error converting {expr} [{file}:{line},{col}]\", {\n                            expr: self.print_to_string(),\n                            file: self.start.file,\n                            line: self.start.line,\n                            col: self.start.col\n                        });\n                    }\n                }\n                break;\n            } else if (exp instanceof AST_Dot) switch(exp.property) {\n              case \"toString\":\n                if (self.args.length == 0 && !exp.expression.may_throw_on_access(compressor)) {\n                    return make_node(AST_Binary, self, {\n                        left: make_node(AST_String, self, { value: \"\" }),\n                        operator: \"+\",\n                        right: exp.expression\n                    }).optimize(compressor);\n                }\n                break;\n              case \"join\":\n                if (exp.expression instanceof AST_Array) EXIT: {\n                    var separator;\n                    if (self.args.length > 0) {\n                        separator = self.args[0].evaluate(compressor);\n                        if (separator === self.args[0]) break EXIT; // not a constant\n                    }\n                    var elements = [];\n                    var consts = [];\n                    for (var i = 0, len = exp.expression.elements.length; i < len; i++) {\n                        var el = exp.expression.elements[i];\n                        if (el instanceof AST_Expansion) break EXIT;\n                        var value = el.evaluate(compressor);\n                        if (value !== el) {\n                            consts.push(value);\n                        } else {\n                            if (consts.length > 0) {\n                                elements.push(make_node(AST_String, self, {\n                                    value: consts.join(separator)\n                                }));\n                                consts.length = 0;\n                            }\n                            elements.push(el);\n                        }\n                    }\n                    if (consts.length > 0) {\n                        elements.push(make_node(AST_String, self, {\n                            value: consts.join(separator)\n                        }));\n                    }\n                    if (elements.length == 0) return make_node(AST_String, self, { value: \"\" });\n                    if (elements.length == 1) {\n                        if (elements[0].is_string(compressor)) {\n                            return elements[0];\n                        }\n                        return make_node(AST_Binary, elements[0], {\n                            operator : \"+\",\n                            left     : make_node(AST_String, self, { value: \"\" }),\n                            right    : elements[0]\n                        });\n                    }\n                    if (separator == \"\") {\n                        var first;\n                        if (elements[0].is_string(compressor)\n                            || elements[1].is_string(compressor)) {\n                            first = elements.shift();\n                        } else {\n                            first = make_node(AST_String, self, { value: \"\" });\n                        }\n                        return elements.reduce(function(prev, el) {\n                            return make_node(AST_Binary, el, {\n                                operator : \"+\",\n                                left     : prev,\n                                right    : el\n                            });\n                        }, first).optimize(compressor);\n                    }\n                    // need this awkward cloning to not affect original element\n                    // best_of will decide which one to get through.\n                    var node = self.clone();\n                    node.expression = node.expression.clone();\n                    node.expression.expression = node.expression.expression.clone();\n                    node.expression.expression.elements = elements;\n                    return best_of(compressor, self, node);\n                }\n                break;\n              case \"charAt\":\n                if (exp.expression.is_string(compressor)) {\n                    var arg = self.args[0];\n                    var index = arg ? arg.evaluate(compressor) : 0;\n                    if (index !== arg) {\n                        return make_node(AST_Sub, exp, {\n                            expression: exp.expression,\n                            property: make_node_from_constant(index | 0, arg || exp)\n                        }).optimize(compressor);\n                    }\n                }\n                break;\n              case \"apply\":\n                if (self.args.length == 2 && self.args[1] instanceof AST_Array) {\n                    var args = self.args[1].elements.slice();\n                    args.unshift(self.args[0]);\n                    return make_node(AST_Call, self, {\n                        expression: make_node(AST_Dot, exp, {\n                            expression: exp.expression,\n                            property: \"call\"\n                        }),\n                        args: args\n                    }).optimize(compressor);\n                }\n                break;\n              case \"call\":\n                var func = exp.expression;\n                if (func instanceof AST_SymbolRef) {\n                    func = func.fixed_value();\n                }\n                if (func instanceof AST_Lambda && !func.contains_this()) {\n                    return (self.args.length ? make_sequence(this, [\n                        self.args[0],\n                        make_node(AST_Call, self, {\n                            expression: exp.expression,\n                            args: self.args.slice(1)\n                        })\n                    ]) : make_node(AST_Call, self, {\n                        expression: exp.expression,\n                        args: []\n                    })).optimize(compressor);\n                }\n                break;\n            }\n        }\n        if (compressor.option(\"unsafe_Function\")\n            && is_undeclared_ref(exp)\n            && exp.name == \"Function\") {\n            // new Function() => function(){}\n            if (self.args.length == 0) return make_node(AST_Function, self, {\n                argnames: [],\n                body: []\n            }).optimize(compressor);\n            if (self.args.every((x) =>\n                x instanceof AST_String\n            )) {\n                // quite a corner-case, but we can handle it:\n                //   https://github.com/mishoo/UglifyJS2/issues/203\n                // if the code argument is a constant, then we can minify it.\n                try {\n                    var code = \"n(function(\" + self.args.slice(0, -1).map(function(arg) {\n                        return arg.value;\n                    }).join(\",\") + \"){\" + self.args[self.args.length - 1].value + \"})\";\n                    var ast = parse(code);\n                    var mangle = { ie8: compressor.option(\"ie8\") };\n                    ast.figure_out_scope(mangle);\n                    var comp = new Compressor(compressor.options);\n                    ast = ast.transform(comp);\n                    ast.figure_out_scope(mangle);\n                    base54.reset();\n                    ast.compute_char_frequency(mangle);\n                    ast.mangle_names(mangle);\n                    var fun;\n                    ast.walk(new TreeWalker(function(node) {\n                        if (fun) return true;\n                        if (is_func_expr(node)) {\n                            fun = node;\n                            return true;\n                        }\n                    }));\n                    if (fun.body instanceof AST_Node) {\n                        fun.body = [\n                            make_node(AST_Return, fun.body, {\n                                value: fun.body\n                            })\n                        ];\n                    }\n                    var code = OutputStream();\n                    AST_BlockStatement.prototype._codegen.call(fun, fun, code);\n                    self.args = [\n                        make_node(AST_String, self, {\n                            value: fun.argnames.map(function(arg) {\n                                return arg.print_to_string();\n                            }).join(\",\")\n                        }),\n                        make_node(AST_String, self.args[self.args.length - 1], {\n                            value: code.get().replace(/^{|}$/g, \"\")\n                        })\n                    ];\n                    return self;\n                } catch (ex) {\n                    if (ex instanceof JS_Parse_Error) {\n                        compressor.warn(\"Error parsing code passed to new Function [{file}:{line},{col}]\", self.args[self.args.length - 1].start);\n                        compressor.warn(ex.toString());\n                    } else {\n                        throw ex;\n                    }\n                }\n            }\n        }\n        var stat = is_func && fn.body;\n        if (stat instanceof AST_Node) {\n            stat = make_node(AST_Return, stat, {\n                value: stat\n            });\n        } else if (stat) {\n            stat = stat[0];\n        }\n        var is_regular_func = is_func && !fn.is_generator && !fn.async;\n        var can_inline = is_regular_func && compressor.option(\"inline\") && !self.is_expr_pure(compressor);\n        if (can_inline && stat instanceof AST_Return) {\n            let value = stat.value;\n            if (!value || value.is_constant_expression()) {\n                if (value) {\n                    value = value.clone(true);\n                } else {\n                    value = make_node(AST_Undefined, self);\n                }\n                var args = self.args.concat(value);\n                return make_sequence(self, args).optimize(compressor);\n            }\n        }\n        if (can_inline) {\n            var scope, in_loop, level = -1;\n            let def, returned_value;\n            if (simple_args\n                && !fn.uses_arguments\n                && !fn.pinned()\n                && !(compressor.parent() instanceof AST_Class)\n                && !(fn.name && fn instanceof AST_Function)\n                && (!(compressor.find_parent(AST_Lambda) instanceof AST_Arrow)\n                    || fn.argnames.length == 0\n                        && (fn.body instanceof AST_Node || fn.body.length == 1))\n                && (returned_value = can_flatten_body(stat))\n                && (exp === fn\n                    || compressor.option(\"unused\")\n                        && (def = exp.definition()).references.length == 1\n                        && !recursive_ref(compressor, def)\n                        && fn.is_constant_expression(exp.scope))\n                && !self.pure\n                && !fn.contains_this()\n                && can_inject_symbols()\n                && !(scope instanceof AST_Class)) {\n                fn._squeezed = true;\n                return make_sequence(self, flatten_fn(returned_value)).optimize(compressor);\n            }\n        }\n        const can_drop_this_call = is_regular_func && compressor.option(\"side_effects\") && !(fn.body instanceof AST_Node) && fn.body.every(is_empty);\n        if (can_drop_this_call) {\n            var args = self.args.concat(make_node(AST_Undefined, self));\n            return make_sequence(self, args).optimize(compressor);\n        }\n        if (compressor.option(\"negate_iife\")\n            && compressor.parent() instanceof AST_SimpleStatement\n            && is_iife_call(self)) {\n            return self.negate(compressor, true);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n\n        function return_value(stat) {\n            if (!stat) return make_node(AST_Undefined, self);\n            if (stat instanceof AST_Return) {\n                if (!stat.value) return make_node(AST_Undefined, self);\n                return stat.value.clone(true);\n            }\n            if (stat instanceof AST_SimpleStatement) {\n                return make_node(AST_UnaryPrefix, stat, {\n                    operator: \"void\",\n                    expression: stat.body.clone(true)\n                });\n            }\n        }\n\n        function can_flatten_body(stat) {\n            var body = fn.body instanceof AST_Node ? [ fn.body ] : fn.body;\n            var len = body.length;\n            if (compressor.option(\"inline\") < 3) {\n                return len == 1 && return_value(stat);\n            }\n            stat = null;\n            for (var i = 0; i < len; i++) {\n                var line = body[i];\n                if (line instanceof AST_Var) {\n                    if (stat && !line.definitions.every((var_def) =>\n                        !var_def.value\n                    )) {\n                        return false;\n                    }\n                } else if (stat) {\n                    return false;\n                } else if (!(line instanceof AST_EmptyStatement)) {\n                    stat = line;\n                }\n            }\n            return return_value(stat);\n        }\n\n        function can_inject_args(block_scoped, safe_to_inject) {\n            for (var i = 0, len = fn.argnames.length; i < len; i++) {\n                var arg = fn.argnames[i];\n                if (arg instanceof AST_DefaultAssign) {\n                    if (arg.left.__unused) continue;\n                    return false;\n                }\n                if (arg instanceof AST_Destructuring) return false;\n                if (arg instanceof AST_Expansion) {\n                    if (arg.expression.__unused) continue;\n                    return false;\n                }\n                if (arg.__unused) continue;\n                if (!safe_to_inject\n                    || block_scoped.has(arg.name)\n                    || identifier_atom.has(arg.name)\n                    || scope.var_names().has(arg.name)) {\n                    return false;\n                }\n                if (in_loop) in_loop.push(arg.definition());\n            }\n            return true;\n        }\n\n        function can_inject_args_values() {\n            var arg_vals_outer_refs = new Set();\n            var value_walker = new TreeWalker(function(node) {\n                if (node instanceof AST_Scope) {\n                    var scope_outer_refs = new Set();\n                    node.enclosed.forEach(function(def) {\n                        scope_outer_refs.add(def.name);\n                    });\n                    node.variables.forEach(function(name) {\n                        scope_outer_refs.delete(name);\n                    });\n                    scope_outer_refs.forEach(function(name) {\n                        arg_vals_outer_refs.add(name);\n                    });\n                    return true;\n                }\n                return false;\n            });\n            self.args.forEach(function(value) {\n                value.walk(value_walker);\n            });\n            if (arg_vals_outer_refs.size == 0) return true;\n            for (var i = 0, len = fn.argnames.length; i < len; i++) {\n                var arg = fn.argnames[i];\n                if (arg instanceof AST_DefaultAssign && arg.left.__unused) continue;\n                if (arg instanceof AST_Expansion && arg.expression.__unused) continue;\n                if (arg.__unused) continue;\n                if (arg_vals_outer_refs.has(arg.name)) return false;\n            }\n            for (var i = 0, len = fn.body.length; i < len; i++) {\n                var stat = fn.body[i];\n                if (!(stat instanceof AST_Var)) continue;\n                for (var j = stat.definitions.length; --j >= 0;) {\n                    var name = stat.definitions[j].name;\n                    if (name instanceof AST_Destructuring\n                        || arg_vals_outer_refs.has(name.name)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n\n        function can_inject_vars(block_scoped, safe_to_inject) {\n            var len = fn.body.length;\n            for (var i = 0; i < len; i++) {\n                var stat = fn.body[i];\n                if (!(stat instanceof AST_Var)) continue;\n                if (!safe_to_inject) return false;\n                for (var j = stat.definitions.length; --j >= 0;) {\n                    var name = stat.definitions[j].name;\n                    if (name instanceof AST_Destructuring\n                        || block_scoped.has(name.name)\n                        || identifier_atom.has(name.name)\n                        || scope.var_names().has(name.name)) {\n                        return false;\n                    }\n                    if (in_loop) in_loop.push(name.definition());\n                }\n            }\n            return true;\n        }\n\n        function can_inject_symbols() {\n            var block_scoped = new Set();\n            do {\n                scope = compressor.parent(++level);\n                if (scope.is_block_scope() && !(compressor.parent(level - 1) instanceof AST_Scope)) {\n                    if (scope.block_scope) {\n                        // TODO this is sometimes undefined during compression.\n                        // But it should always have a value!\n                        scope.block_scope.variables.forEach(function (variable) {\n                            block_scoped.add(variable.name);\n                        });\n                    }\n                }\n                if (scope instanceof AST_Catch) {\n                    if (scope.argname) {\n                        block_scoped.add(scope.argname.name);\n                    }\n                } else if (scope instanceof AST_IterationStatement) {\n                    in_loop = [];\n                } else if (scope instanceof AST_SymbolRef) {\n                    if (scope.fixed_value() instanceof AST_Scope) return false;\n                }\n            } while (!(scope instanceof AST_Scope) || scope instanceof AST_Arrow);\n            var safe_to_inject = !(scope instanceof AST_Toplevel) || compressor.toplevel.vars;\n            var inline = compressor.option(\"inline\");\n            if (!can_inject_vars(block_scoped, inline >= 3 && safe_to_inject)) return false;\n            if (!can_inject_args(block_scoped, inline >= 2 && safe_to_inject)) return false;\n            if (!can_inject_args_values()) return false;\n            return !in_loop || in_loop.length == 0 || !is_reachable(fn, in_loop);\n        }\n\n        function append_var(decls, expressions, name, value) {\n            var def = name.definition();\n            scope.variables.set(name.name, def);\n            scope.enclosed.push(def);\n            if (!scope.var_names().has(name.name)) {\n                scope.var_names().add(name.name);\n                decls.push(make_node(AST_VarDef, name, {\n                    name: name,\n                    value: null\n                }));\n            }\n            var sym = make_node(AST_SymbolRef, name, name);\n            def.references.push(sym);\n            if (value) expressions.push(make_node(AST_Assign, self, {\n                operator: \"=\",\n                left: sym,\n                right: value.clone()\n            }));\n        }\n\n        function flatten_args(decls, expressions) {\n            var len = fn.argnames.length;\n            for (var i = self.args.length; --i >= len;) {\n                expressions.push(self.args[i]);\n            }\n            for (i = len; --i >= 0;) {\n                var name = fn.argnames[i];\n                var value = self.args[i];\n                if (name.__unused || !name.name || scope.var_names().has(name.name)) {\n                    if (value) expressions.push(value);\n                } else {\n                    var symbol = make_node(AST_SymbolVar, name, name);\n                    name.definition().orig.push(symbol);\n                    if (!value && in_loop) value = make_node(AST_Undefined, self);\n                    append_var(decls, expressions, symbol, value);\n                }\n            }\n            decls.reverse();\n            expressions.reverse();\n        }\n\n        function flatten_vars(decls, expressions) {\n            var pos = expressions.length;\n            for (var i = 0, lines = fn.body.length; i < lines; i++) {\n                var stat = fn.body[i];\n                if (!(stat instanceof AST_Var)) continue;\n                for (var j = 0, defs = stat.definitions.length; j < defs; j++) {\n                    var var_def = stat.definitions[j];\n                    var name = var_def.name;\n                    append_var(decls, expressions, name, var_def.value);\n                    if (in_loop && fn.argnames.every((argname) =>\n                        argname.name != name.name\n                    )) {\n                        var def = fn.variables.get(name.name);\n                        var sym = make_node(AST_SymbolRef, name, name);\n                        def.references.push(sym);\n                        expressions.splice(pos++, 0, make_node(AST_Assign, var_def, {\n                            operator: \"=\",\n                            left: sym,\n                            right: make_node(AST_Undefined, name)\n                        }));\n                    }\n                }\n            }\n        }\n\n        function flatten_fn(returned_value) {\n            var decls = [];\n            var expressions = [];\n            flatten_args(decls, expressions);\n            flatten_vars(decls, expressions);\n            expressions.push(returned_value);\n            if (decls.length) {\n                i = scope.body.indexOf(compressor.parent(level - 1)) + 1;\n                scope.body.splice(i, 0, make_node(AST_Var, fn, {\n                    definitions: decls\n                }));\n            }\n            return expressions.map(exp => exp.clone(true));\n        }\n    });\n\n    def_optimize(AST_New, function(self, compressor) {\n        if (\n            compressor.option(\"unsafe\") &&\n            is_undeclared_ref(self.expression) &&\n            [\"Object\", \"RegExp\", \"Function\", \"Error\", \"Array\"].includes(self.expression.name)\n        ) return make_node(AST_Call, self, self).transform(compressor);\n        return self;\n    });\n\n    def_optimize(AST_Sequence, function(self, compressor) {\n        if (!compressor.option(\"side_effects\")) return self;\n        var expressions = [];\n        filter_for_side_effects();\n        var end = expressions.length - 1;\n        trim_right_for_undefined();\n        if (end == 0) {\n            self = maintain_this_binding(compressor.parent(), compressor.self(), expressions[0]);\n            if (!(self instanceof AST_Sequence)) self = self.optimize(compressor);\n            return self;\n        }\n        self.expressions = expressions;\n        return self;\n\n        function filter_for_side_effects() {\n            var first = first_in_statement(compressor);\n            var last = self.expressions.length - 1;\n            self.expressions.forEach(function(expr, index) {\n                if (index < last) expr = expr.drop_side_effect_free(compressor, first);\n                if (expr) {\n                    merge_sequence(expressions, expr);\n                    first = false;\n                }\n            });\n        }\n\n        function trim_right_for_undefined() {\n            while (end > 0 && is_undefined(expressions[end], compressor)) end--;\n            if (end < expressions.length - 1) {\n                expressions[end] = make_node(AST_UnaryPrefix, self, {\n                    operator   : \"void\",\n                    expression : expressions[end]\n                });\n                expressions.length = end + 1;\n            }\n        }\n    });\n\n    AST_Unary.DEFMETHOD(\"lift_sequences\", function(compressor) {\n        if (compressor.option(\"sequences\")) {\n            if (this.expression instanceof AST_Sequence) {\n                var x = this.expression.expressions.slice();\n                var e = this.clone();\n                e.expression = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n        }\n        return this;\n    });\n\n    def_optimize(AST_UnaryPostfix, function(self, compressor) {\n        return self.lift_sequences(compressor);\n    });\n\n    def_optimize(AST_UnaryPrefix, function(self, compressor) {\n        var e = self.expression;\n        if (self.operator == \"delete\"\n            && !(e instanceof AST_SymbolRef\n                || e instanceof AST_PropAccess\n                || is_identifier_atom(e))) {\n            if (e instanceof AST_Sequence) {\n                e = e.expressions.slice();\n                e.push(make_node(AST_True, self));\n                return make_sequence(self, e).optimize(compressor);\n            }\n            return make_sequence(self, [ e, make_node(AST_True, self) ]).optimize(compressor);\n        }\n        var seq = self.lift_sequences(compressor);\n        if (seq !== self) {\n            return seq;\n        }\n        if (compressor.option(\"side_effects\") && self.operator == \"void\") {\n            e = e.drop_side_effect_free(compressor);\n            if (e) {\n                self.expression = e;\n                return self;\n            } else {\n                return make_node(AST_Undefined, self).optimize(compressor);\n            }\n        }\n        if (compressor.in_boolean_context()) {\n            switch (self.operator) {\n              case \"!\":\n                if (e instanceof AST_UnaryPrefix && e.operator == \"!\") {\n                    // !!foo ==> foo, if we're in boolean context\n                    return e.expression;\n                }\n                if (e instanceof AST_Binary) {\n                    self = best_of(compressor, self, e.negate(compressor, first_in_statement(compressor)));\n                }\n                break;\n              case \"typeof\":\n                // typeof always returns a non-empty string, thus it's\n                // always true in booleans\n                compressor.warn(\"Boolean expression always true [{file}:{line},{col}]\", self.start);\n                return (e instanceof AST_SymbolRef ? make_node(AST_True, self) : make_sequence(self, [\n                    e,\n                    make_node(AST_True, self)\n                ])).optimize(compressor);\n            }\n        }\n        if (self.operator == \"-\" && e instanceof AST_Infinity) {\n            e = e.transform(compressor);\n        }\n        if (e instanceof AST_Binary\n            && (self.operator == \"+\" || self.operator == \"-\")\n            && (e.operator == \"*\" || e.operator == \"/\" || e.operator == \"%\")) {\n            return make_node(AST_Binary, self, {\n                operator: e.operator,\n                left: make_node(AST_UnaryPrefix, e.left, {\n                    operator: self.operator,\n                    expression: e.left\n                }),\n                right: e.right\n            });\n        }\n        // avoids infinite recursion of numerals\n        if (self.operator != \"-\"\n            || !(e instanceof AST_Number || e instanceof AST_Infinity || e instanceof AST_BigInt)) {\n            var ev = self.evaluate(compressor);\n            if (ev !== self) {\n                ev = make_node_from_constant(ev, self).optimize(compressor);\n                return best_of(compressor, ev, self);\n            }\n        }\n        return self;\n    });\n\n    AST_Binary.DEFMETHOD(\"lift_sequences\", function(compressor) {\n        if (compressor.option(\"sequences\")) {\n            if (this.left instanceof AST_Sequence) {\n                var x = this.left.expressions.slice();\n                var e = this.clone();\n                e.left = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n            if (this.right instanceof AST_Sequence && !this.left.has_side_effects(compressor)) {\n                var assign = this.operator == \"=\" && this.left instanceof AST_SymbolRef;\n                var x = this.right.expressions;\n                var last = x.length - 1;\n                for (var i = 0; i < last; i++) {\n                    if (!assign && x[i].has_side_effects(compressor)) break;\n                }\n                if (i == last) {\n                    x = x.slice();\n                    var e = this.clone();\n                    e.right = x.pop();\n                    x.push(e);\n                    return make_sequence(this, x).optimize(compressor);\n                } else if (i > 0) {\n                    var e = this.clone();\n                    e.right = make_sequence(this.right, x.slice(i));\n                    x = x.slice(0, i);\n                    x.push(e);\n                    return make_sequence(this, x).optimize(compressor);\n                }\n            }\n        }\n        return this;\n    });\n\n    var commutativeOperators = makePredicate(\"== === != !== * & | ^\");\n    function is_object(node) {\n        return node instanceof AST_Array\n            || node instanceof AST_Lambda\n            || node instanceof AST_Object\n            || node instanceof AST_Class;\n    }\n\n    def_optimize(AST_Binary, function(self, compressor) {\n        function reversible() {\n            return self.left.is_constant()\n                || self.right.is_constant()\n                || !self.left.has_side_effects(compressor)\n                    && !self.right.has_side_effects(compressor);\n        }\n        function reverse(op) {\n            if (reversible()) {\n                if (op) self.operator = op;\n                var tmp = self.left;\n                self.left = self.right;\n                self.right = tmp;\n            }\n        }\n        if (commutativeOperators.has(self.operator)) {\n            if (self.right.is_constant()\n                && !self.left.is_constant()) {\n                // if right is a constant, whatever side effects the\n                // left side might have could not influence the\n                // result.  hence, force switch.\n\n                if (!(self.left instanceof AST_Binary\n                      && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    reverse();\n                }\n            }\n        }\n        self = self.lift_sequences(compressor);\n        if (compressor.option(\"comparisons\")) switch (self.operator) {\n          case \"===\":\n          case \"!==\":\n            var is_strict_comparison = true;\n            if ((self.left.is_string(compressor) && self.right.is_string(compressor)) ||\n                (self.left.is_number(compressor) && self.right.is_number(compressor)) ||\n                (self.left.is_boolean() && self.right.is_boolean()) ||\n                self.left.equivalent_to(self.right)) {\n                self.operator = self.operator.substr(0, 2);\n            }\n            // XXX: intentionally falling down to the next case\n          case \"==\":\n          case \"!=\":\n            // void 0 == x => null == x\n            if (!is_strict_comparison && is_undefined(self.left, compressor)) {\n                self.left = make_node(AST_Null, self.left);\n            } else if (compressor.option(\"typeofs\")\n                // \"undefined\" == typeof x => undefined === x\n                && self.left instanceof AST_String\n                && self.left.value == \"undefined\"\n                && self.right instanceof AST_UnaryPrefix\n                && self.right.operator == \"typeof\") {\n                var expr = self.right.expression;\n                if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor)\n                    : !(expr instanceof AST_PropAccess && compressor.option(\"ie8\"))) {\n                    self.right = expr;\n                    self.left = make_node(AST_Undefined, self.left).optimize(compressor);\n                    if (self.operator.length == 2) self.operator += \"=\";\n                }\n            } else if (self.left instanceof AST_SymbolRef\n                // obj !== obj => false\n                && self.right instanceof AST_SymbolRef\n                && self.left.definition() === self.right.definition()\n                && is_object(self.left.fixed_value())) {\n                return make_node(self.operator[0] == \"=\" ? AST_True : AST_False, self);\n            }\n            break;\n          case \"&&\":\n          case \"||\":\n            var lhs = self.left;\n            if (lhs.operator == self.operator) {\n                lhs = lhs.right;\n            }\n            if (lhs instanceof AST_Binary\n                && lhs.operator == (self.operator == \"&&\" ? \"!==\" : \"===\")\n                && self.right instanceof AST_Binary\n                && lhs.operator == self.right.operator\n                && (is_undefined(lhs.left, compressor) && self.right.left instanceof AST_Null\n                    || lhs.left instanceof AST_Null && is_undefined(self.right.left, compressor))\n                && !lhs.right.has_side_effects(compressor)\n                && lhs.right.equivalent_to(self.right.right)) {\n                var combined = make_node(AST_Binary, self, {\n                    operator: lhs.operator.slice(0, -1),\n                    left: make_node(AST_Null, self),\n                    right: lhs.right\n                });\n                if (lhs !== self.left) {\n                    combined = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: self.left.left,\n                        right: combined\n                    });\n                }\n                return combined;\n            }\n            break;\n        }\n        if (self.operator == \"+\" && compressor.in_boolean_context()) {\n            var ll = self.left.evaluate(compressor);\n            var rr = self.right.evaluate(compressor);\n            if (ll && typeof ll == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_sequence(self, [\n                    self.right,\n                    make_node(AST_True, self)\n                ]).optimize(compressor);\n            }\n            if (rr && typeof rr == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_sequence(self, [\n                    self.left,\n                    make_node(AST_True, self)\n                ]).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"comparisons\") && self.is_boolean()) {\n            if (!(compressor.parent() instanceof AST_Binary)\n                || compressor.parent() instanceof AST_Assign) {\n                var negated = make_node(AST_UnaryPrefix, self, {\n                    operator: \"!\",\n                    expression: self.negate(compressor, first_in_statement(compressor))\n                });\n                self = best_of(compressor, self, negated);\n            }\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (self.operator) {\n                  case \"<\": reverse(\">\"); break;\n                  case \"<=\": reverse(\">=\"); break;\n                }\n            }\n        }\n        if (self.operator == \"+\") {\n            if (self.right instanceof AST_String\n                && self.right.getValue() == \"\"\n                && self.left.is_string(compressor)) {\n                return self.left;\n            }\n            if (self.left instanceof AST_String\n                && self.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                return self.right;\n            }\n            if (self.left instanceof AST_Binary\n                && self.left.operator == \"+\"\n                && self.left.left instanceof AST_String\n                && self.left.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                self.left = self.left.right;\n                return self.transform(compressor);\n            }\n        }\n        if (compressor.option(\"evaluate\")) {\n            switch (self.operator) {\n              case \"&&\":\n                var ll = self.left.truthy ? true : self.left.falsy ? false : self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of && always false [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), compressor.self(), self.left).optimize(compressor);\n                } else if (!(ll instanceof AST_Node)) {\n                    compressor.warn(\"Condition left of && always true [{file}:{line},{col}]\", self.start);\n                    return make_sequence(self, [ self.left, self.right ]).optimize(compressor);\n                }\n                var rr = self.right.evaluate(compressor);\n                if (!rr) {\n                    if (compressor.in_boolean_context()) {\n                        compressor.warn(\"Boolean && always false [{file}:{line},{col}]\", self.start);\n                        return make_sequence(self, [\n                            self.left,\n                            make_node(AST_False, self)\n                        ]).optimize(compressor);\n                    } else self.falsy = true;\n                } else if (!(rr instanceof AST_Node)) {\n                    var parent = compressor.parent();\n                    if (parent.operator == \"&&\" && parent.left === compressor.self() || compressor.in_boolean_context()) {\n                        compressor.warn(\"Dropping side-effect-free && [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    }\n                }\n                // x || false && y ---> x ? y : false\n                if (self.left.operator == \"||\") {\n                    var lr = self.left.right.evaluate(compressor);\n                    if (!lr) return make_node(AST_Conditional, self, {\n                        condition: self.left.left,\n                        consequent: self.right,\n                        alternative: self.left.right\n                    }).optimize(compressor);\n                }\n                break;\n              case \"||\":\n                var ll = self.left.truthy ? true : self.left.falsy ? false : self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of || always false [{file}:{line},{col}]\", self.start);\n                    return make_sequence(self, [ self.left, self.right ]).optimize(compressor);\n                } else if (!(ll instanceof AST_Node)) {\n                    compressor.warn(\"Condition left of || always true [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), compressor.self(), self.left).optimize(compressor);\n                }\n                var rr = self.right.evaluate(compressor);\n                if (!rr) {\n                    var parent = compressor.parent();\n                    if (parent.operator == \"||\" && parent.left === compressor.self() || compressor.in_boolean_context()) {\n                        compressor.warn(\"Dropping side-effect-free || [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    }\n                } else if (!(rr instanceof AST_Node)) {\n                    if (compressor.in_boolean_context()) {\n                        compressor.warn(\"Boolean || always true [{file}:{line},{col}]\", self.start);\n                        return make_sequence(self, [\n                            self.left,\n                            make_node(AST_True, self)\n                        ]).optimize(compressor);\n                    } else self.truthy = true;\n                }\n                if (self.left.operator == \"&&\") {\n                    var lr = self.left.right.evaluate(compressor);\n                    if (lr && !(lr instanceof AST_Node)) return make_node(AST_Conditional, self, {\n                        condition: self.left.left,\n                        consequent: self.left.right,\n                        alternative: self.right\n                    }).optimize(compressor);\n                }\n                break;\n            }\n            var associative = true;\n            switch (self.operator) {\n              case \"+\":\n                // \"foo\" + (\"bar\" + x) => \"foobar\" + x\n                if (self.left instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_String, self.left, {\n                            value: \"\" + self.left.getValue() + self.right.left.getValue(),\n                            start: self.left.start,\n                            end: self.right.left.end\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // (x + \"foo\") + \"bar\" => x + \"foobar\"\n                if (self.right instanceof AST_Constant\n                    && self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.right instanceof AST_Constant\n                    && self.left.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: self.left.left,\n                        right: make_node(AST_String, self.right, {\n                            value: \"\" + self.left.right.getValue() + self.right.getValue(),\n                            start: self.left.right.start,\n                            end: self.right.end\n                        })\n                    });\n                }\n                // (x + \"foo\") + (\"bar\" + y) => (x + \"foobar\") + y\n                if (self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.is_string(compressor)\n                    && self.left.right instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_Binary, self.left, {\n                            operator: \"+\",\n                            left: self.left.left,\n                            right: make_node(AST_String, self.left.right, {\n                                value: \"\" + self.left.right.getValue() + self.right.left.getValue(),\n                                start: self.left.right.start,\n                                end: self.right.left.end\n                            })\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // a + -b => a - b\n                if (self.right instanceof AST_UnaryPrefix\n                    && self.right.operator == \"-\"\n                    && self.left.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.left,\n                        right: self.right.expression\n                    });\n                    break;\n                }\n                // -a + b => b - a\n                if (self.left instanceof AST_UnaryPrefix\n                    && self.left.operator == \"-\"\n                    && reversible()\n                    && self.right.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.right,\n                        right: self.left.expression\n                    });\n                    break;\n                }\n              case \"*\":\n                associative = compressor.option(\"unsafe_math\");\n              case \"&\":\n              case \"|\":\n              case \"^\":\n                // a + +b => +b + a\n                if (self.left.is_number(compressor)\n                    && self.right.is_number(compressor)\n                    && reversible()\n                    && !(self.left instanceof AST_Binary\n                        && self.left.operator != self.operator\n                        && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    var reversed = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: self.right,\n                        right: self.left\n                    });\n                    if (self.right instanceof AST_Constant\n                        && !(self.left instanceof AST_Constant)) {\n                        self = best_of(compressor, reversed, self);\n                    } else {\n                        self = best_of(compressor, self, reversed);\n                    }\n                }\n                if (associative && self.is_number(compressor)) {\n                    // a + (b + c) => (a + b) + c\n                    if (self.right instanceof AST_Binary\n                        && self.right.operator == self.operator) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: self.left,\n                                right: self.right.left,\n                                start: self.left.start,\n                                end: self.right.left.end\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                    // (n + 2) + 3 => 5 + n\n                    // (2 * n) * 3 => 6 + n\n                    if (self.right instanceof AST_Constant\n                        && self.left instanceof AST_Binary\n                        && self.left.operator == self.operator) {\n                        if (self.left.left instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.left,\n                                    right: self.right,\n                                    start: self.left.left.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.right\n                            });\n                        } else if (self.left.right instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right,\n                                    start: self.left.right.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.left\n                            });\n                        }\n                    }\n                    // (a | 1) | (2 | d) => (3 | a) | b\n                    if (self.left instanceof AST_Binary\n                        && self.left.operator == self.operator\n                        && self.left.right instanceof AST_Constant\n                        && self.right instanceof AST_Binary\n                        && self.right.operator == self.operator\n                        && self.right.left instanceof AST_Constant) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right.left,\n                                    start: self.left.right.start,\n                                    end: self.right.left.end\n                                }),\n                                right: self.left.left\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                }\n            }\n        }\n        // x && (y && z)  ==>  x && y && z\n        // x || (y || z)  ==>  x || y || z\n        // x + (\"y\" + z)  ==>  x + \"y\" + z\n        // \"x\" + (y + \"z\")==>  \"x\" + y + \"z\"\n        if (self.right instanceof AST_Binary\n            && self.right.operator == self.operator\n            && (lazy_op.has(self.operator)\n                || (self.operator == \"+\"\n                    && (self.right.left.is_string(compressor)\n                        || (self.left.is_string(compressor)\n                            && self.right.right.is_string(compressor)))))\n        ) {\n            self.left = make_node(AST_Binary, self.left, {\n                operator : self.operator,\n                left     : self.left,\n                right    : self.right.left\n            });\n            self.right = self.right.right;\n            return self.transform(compressor);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    def_optimize(AST_SymbolExport, function(self, compressor) {\n        return self;\n    });\n\n    function recursive_ref(compressor, def) {\n        var node;\n        for (var i = 0; node = compressor.parent(i); i++) {\n            if (node instanceof AST_Lambda) {\n                var name = node.name;\n                if (name && name.definition() === def) break;\n            }\n        }\n        return node;\n    }\n\n    function within_array_or_object_literal(compressor) {\n        var node, level = 0;\n        while (node = compressor.parent(level++)) {\n            if (node instanceof AST_Statement) return false;\n            if (node instanceof AST_Array\n                || node instanceof AST_ObjectKeyVal\n                || node instanceof AST_Object) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    def_optimize(AST_SymbolRef, function(self, compressor) {\n        if (!compressor.option(\"ie8\")\n            && is_undeclared_ref(self)\n            && (!self.scope.uses_with || !compressor.find_parent(AST_With))) {\n            switch (self.name) {\n              case \"undefined\":\n                return make_node(AST_Undefined, self).optimize(compressor);\n              case \"NaN\":\n                return make_node(AST_NaN, self).optimize(compressor);\n              case \"Infinity\":\n                return make_node(AST_Infinity, self).optimize(compressor);\n            }\n        }\n        var parent = compressor.parent();\n        if (compressor.option(\"reduce_vars\") && is_lhs(self, parent) !== self) {\n            var d = self.definition();\n            if (compressor.top_retain && d.global && compressor.top_retain(d)) {\n                d.fixed = false;\n                d.should_replace = false;\n                d.single_use = false;\n                return self;\n            }\n            var fixed = self.fixed_value();\n            var single_use = d.single_use\n                && !(parent instanceof AST_Call && parent.is_expr_pure(compressor));\n            if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {\n                if (retain_top_func(fixed, compressor)) {\n                    single_use = false;\n                } else if (d.scope !== self.scope\n                    && (!compressor.option(\"reduce_funcs\") && fixed instanceof AST_Lambda\n                        || d.escaped == 1\n                        || fixed.inlined\n                        || within_array_or_object_literal(compressor))) {\n                    single_use = false;\n                } else if (recursive_ref(compressor, d)) {\n                    single_use = false;\n                } else if (d.scope !== self.scope || d.orig[0] instanceof AST_SymbolFunarg) {\n                    single_use = fixed.is_constant_expression(self.scope);\n                    if (single_use == \"f\") {\n                        var scope = self.scope;\n                        do {\n                            if (scope instanceof AST_Defun || is_func_expr(scope)) {\n                                scope.inlined = true;\n                            }\n                        } while (scope = scope.parent_scope);\n                    }\n                }\n            }\n            if (single_use && fixed) {\n                if (fixed instanceof AST_DefClass) {\n                    fixed = make_node(AST_ClassExpression, fixed, fixed);\n                }\n                if (fixed instanceof AST_Defun) {\n                    fixed._squeezed = true;\n                    fixed = make_node(AST_Function, fixed, fixed);\n                }\n                var value;\n                if (d.recursive_refs > 0 && fixed.name instanceof AST_SymbolDefun) {\n                    value = fixed.clone(true);\n                    var defun_def = value.name.definition();\n                    var lambda_def = value.variables.get(value.name.name);\n                    var name = lambda_def && lambda_def.orig[0];\n                    if (!(name instanceof AST_SymbolLambda)) {\n                        name = make_node(AST_SymbolLambda, value.name, value.name);\n                        name.scope = value;\n                        value.name = name;\n                        lambda_def = value.def_function(name);\n                    }\n                    value.walk(new TreeWalker(function(node) {\n                        if (node instanceof AST_SymbolRef && node.definition() === defun_def) {\n                            node.thedef = lambda_def;\n                            lambda_def.references.push(node);\n                        }\n                    }));\n                } else {\n                    value = fixed.optimize(compressor);\n                }\n                return value;\n            }\n            if (fixed && d.should_replace === undefined) {\n                var init;\n                if (fixed instanceof AST_This) {\n                    if (!(d.orig[0] instanceof AST_SymbolFunarg)\n                        && d.references.every((ref) =>\n                            d.scope === ref.scope\n                        )) {\n                        init = fixed;\n                    }\n                } else {\n                    var ev = fixed.evaluate(compressor);\n                    if (ev !== fixed && (compressor.option(\"unsafe_regexp\") || !(ev instanceof RegExp))) {\n                        init = make_node_from_constant(ev, fixed);\n                    }\n                }\n                if (init) {\n                    var value_length = init.optimize(compressor).print_to_string().length;\n                    var fn;\n                    if (has_symbol_ref(fixed)) {\n                        fn = function() {\n                            var result = init.optimize(compressor);\n                            return result === init ? result.clone(true) : result;\n                        };\n                    } else {\n                        value_length = Math.min(value_length, fixed.print_to_string().length);\n                        fn = function() {\n                            var result = best_of_expression(init.optimize(compressor), fixed);\n                            return result === init || result === fixed ? result.clone(true) : result;\n                        };\n                    }\n                    var name_length = d.name.length;\n                    var overhead = 0;\n                    if (compressor.option(\"unused\") && !compressor.exposed(d)) {\n                        overhead = (name_length + 2 + value_length) / (d.references.length - d.assignments);\n                    }\n                    d.should_replace = value_length <= name_length + overhead ? fn : false;\n                } else {\n                    d.should_replace = false;\n                }\n            }\n            if (d.should_replace) {\n                return d.should_replace();\n            }\n        }\n        return self;\n\n        function has_symbol_ref(value) {\n            var found;\n            value.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_SymbolRef) found = true;\n                if (found) return true;\n            }));\n            return found;\n        }\n    });\n\n    function is_atomic(lhs, self) {\n        return lhs instanceof AST_SymbolRef || lhs.TYPE === self.TYPE;\n    }\n\n    def_optimize(AST_Undefined, function(self, compressor) {\n        if (compressor.option(\"unsafe_undefined\")) {\n            var undef = find_variable(compressor, \"undefined\");\n            if (undef) {\n                var ref = make_node(AST_SymbolRef, self, {\n                    name   : \"undefined\",\n                    scope  : undef.scope,\n                    thedef : undef\n                });\n                ref.is_undefined = true;\n                return ref;\n            }\n        }\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        return make_node(AST_UnaryPrefix, self, {\n            operator: \"void\",\n            expression: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    def_optimize(AST_Infinity, function(self, compressor) {\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        if (compressor.option(\"keep_infinity\")\n            && !(lhs && !is_atomic(lhs, self))\n            && !find_variable(compressor, \"Infinity\"))\n            return self;\n        return make_node(AST_Binary, self, {\n            operator: \"/\",\n            left: make_node(AST_Number, self, {\n                value: 1\n            }),\n            right: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    def_optimize(AST_NaN, function(self, compressor) {\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && !is_atomic(lhs, self)\n            || find_variable(compressor, \"NaN\")) {\n            return make_node(AST_Binary, self, {\n                operator: \"/\",\n                left: make_node(AST_Number, self, {\n                    value: 0\n                }),\n                right: make_node(AST_Number, self, {\n                    value: 0\n                })\n            });\n        }\n        return self;\n    });\n\n    function is_reachable(self, defs) {\n        var reachable = false;\n        var find_ref = new TreeWalker(function(node) {\n            if (reachable) return true;\n            if (node instanceof AST_SymbolRef && member(node.definition(), defs)) {\n                return reachable = true;\n            }\n        });\n        var scan_scope = new TreeWalker(function(node) {\n            if (reachable) return true;\n            if (node instanceof AST_Scope && node !== self) {\n                var parent = scan_scope.parent();\n                if (parent instanceof AST_Call && parent.expression === node) return;\n                node.walk(find_ref);\n                return true;\n            }\n        });\n        self.walk(scan_scope);\n        return reachable;\n    }\n\n    const ASSIGN_OPS = makePredicate(\"+ - / * % >> << >>> | ^ &\");\n    const ASSIGN_OPS_COMMUTATIVE = makePredicate(\"* | ^ &\");\n    def_optimize(AST_Assign, function(self, compressor) {\n        var def;\n        if (compressor.option(\"dead_code\")\n            && self.left instanceof AST_SymbolRef\n            && (def = self.left.definition()).scope === compressor.find_parent(AST_Lambda)) {\n            var level = 0, node, parent = self;\n            do {\n                node = parent;\n                parent = compressor.parent(level++);\n                if (parent instanceof AST_Exit) {\n                    if (in_try(level, parent)) break;\n                    if (is_reachable(def.scope, [ def ])) break;\n                    if (self.operator == \"=\") return self.right;\n                    def.fixed = false;\n                    return make_node(AST_Binary, self, {\n                        operator: self.operator.slice(0, -1),\n                        left: self.left,\n                        right: self.right\n                    }).optimize(compressor);\n                }\n            } while (parent instanceof AST_Binary && parent.right === node\n                || parent instanceof AST_Sequence && parent.tail_node() === node);\n        }\n        self = self.lift_sequences(compressor);\n        if (self.operator == \"=\" && self.left instanceof AST_SymbolRef && self.right instanceof AST_Binary) {\n            // x = expr1 OP expr2\n            if (self.right.left instanceof AST_SymbolRef\n                && self.right.left.name == self.left.name\n                && ASSIGN_OPS.has(self.right.operator)) {\n                // x = x - 2  --->  x -= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.right;\n            } else if (self.right.right instanceof AST_SymbolRef\n                && self.right.right.name == self.left.name\n                && ASSIGN_OPS_COMMUTATIVE.has(self.right.operator)\n                && !self.right.left.has_side_effects(compressor)) {\n                // x = 2 & x  --->  x &= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.left;\n            }\n        }\n        return self;\n\n        function in_try(level, node) {\n            var right = self.right;\n            self.right = make_node(AST_Null, right);\n            var may_throw = node.may_throw(compressor);\n            self.right = right;\n            var scope = self.left.definition().scope;\n            var parent;\n            while ((parent = compressor.parent(level++)) !== scope) {\n                if (parent instanceof AST_Try) {\n                    if (parent.bfinally) return true;\n                    if (may_throw && parent.bcatch) return true;\n                }\n            }\n        }\n    });\n\n    def_optimize(AST_DefaultAssign, function(self, compressor) {\n        if (!compressor.option(\"evaluate\")) {\n            return self;\n        }\n        var evaluateRight = self.right.evaluate(compressor);\n\n        // `[x = undefined] = foo` ---> `[x] = foo`\n        if (evaluateRight === undefined) {\n            self = self.left;\n        } else if (evaluateRight !== self.right) {\n            evaluateRight = make_node_from_constant(evaluateRight, self.right);\n            self.right = best_of_expression(evaluateRight, self.right);\n        }\n\n        return self;\n    });\n\n    def_optimize(AST_Conditional, function(self, compressor) {\n        if (!compressor.option(\"conditionals\")) return self;\n        // This looks like lift_sequences(), should probably be under \"sequences\"\n        if (self.condition instanceof AST_Sequence) {\n            var expressions = self.condition.expressions.slice();\n            self.condition = expressions.pop();\n            expressions.push(self);\n            return make_sequence(self, expressions);\n        }\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), compressor.self(), self.consequent);\n            } else {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), compressor.self(), self.alternative);\n            }\n        }\n        var negated = cond.negate(compressor, first_in_statement(compressor));\n        if (best_of(compressor, cond, negated) === negated) {\n            self = make_node(AST_Conditional, self, {\n                condition: negated,\n                consequent: self.alternative,\n                alternative: self.consequent\n            });\n        }\n        var condition = self.condition;\n        var consequent = self.consequent;\n        var alternative = self.alternative;\n        // x?x:y --> x||y\n        if (condition instanceof AST_SymbolRef\n            && consequent instanceof AST_SymbolRef\n            && condition.definition() === consequent.definition()) {\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: condition,\n                right: alternative\n            });\n        }\n        // if (foo) exp = something; else exp = something_else;\n        //                   |\n        //                   v\n        // exp = foo ? something : something_else;\n        if (consequent instanceof AST_Assign\n            && alternative instanceof AST_Assign\n            && consequent.operator == alternative.operator\n            && consequent.left.equivalent_to(alternative.left)\n            && (!self.condition.has_side_effects(compressor)\n                || consequent.operator == \"=\"\n                    && !consequent.left.has_side_effects(compressor))) {\n            return make_node(AST_Assign, self, {\n                operator: consequent.operator,\n                left: consequent.left,\n                right: make_node(AST_Conditional, self, {\n                    condition: self.condition,\n                    consequent: consequent.right,\n                    alternative: alternative.right\n                })\n            });\n        }\n        // x ? y(a) : y(b) --> y(x ? a : b)\n        var arg_index;\n        if (consequent instanceof AST_Call\n            && alternative.TYPE === consequent.TYPE\n            && consequent.args.length > 0\n            && consequent.args.length == alternative.args.length\n            && consequent.expression.equivalent_to(alternative.expression)\n            && !self.condition.has_side_effects(compressor)\n            && !consequent.expression.has_side_effects(compressor)\n            && typeof (arg_index = single_arg_diff()) == \"number\") {\n            var node = consequent.clone();\n            node.args[arg_index] = make_node(AST_Conditional, self, {\n                condition: self.condition,\n                consequent: consequent.args[arg_index],\n                alternative: alternative.args[arg_index]\n            });\n            return node;\n        }\n        // x?y?z:a:a --> x&&y?z:a\n        if (consequent instanceof AST_Conditional\n            && consequent.alternative.equivalent_to(alternative)) {\n            return make_node(AST_Conditional, self, {\n                condition: make_node(AST_Binary, self, {\n                    left: self.condition,\n                    operator: \"&&\",\n                    right: consequent.condition\n                }),\n                consequent: consequent.consequent,\n                alternative: alternative\n            });\n        }\n        // x ? y : y --> x, y\n        if (consequent.equivalent_to(alternative)) {\n            return make_sequence(self, [\n                self.condition,\n                consequent\n            ]).optimize(compressor);\n        }\n        // x ? y || z : z --> x && y || z\n        if (consequent instanceof AST_Binary\n            && consequent.operator == \"||\"\n            && consequent.right.equivalent_to(alternative)) {\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: make_node(AST_Binary, self, {\n                    operator: \"&&\",\n                    left: self.condition,\n                    right: consequent.left\n                }),\n                right: alternative\n            }).optimize(compressor);\n        }\n        var in_bool = compressor.in_boolean_context();\n        if (is_true(self.consequent)) {\n            if (is_false(self.alternative)) {\n                // c ? true : false ---> !!c\n                return booleanize(self.condition);\n            }\n            // c ? true : x ---> !!c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition),\n                right: self.alternative\n            });\n        }\n        if (is_false(self.consequent)) {\n            if (is_true(self.alternative)) {\n                // c ? false : true ---> !c\n                return booleanize(self.condition.negate(compressor));\n            }\n            // c ? false : x ---> !c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.alternative\n            });\n        }\n        if (is_true(self.alternative)) {\n            // c ? x : true ---> !c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.consequent\n            });\n        }\n        if (is_false(self.alternative)) {\n            // c ? x : false ---> !!c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition),\n                right: self.consequent\n            });\n        }\n\n        return self;\n\n        function booleanize(node) {\n            if (node.is_boolean()) return node;\n            // !!expression\n            return make_node(AST_UnaryPrefix, node, {\n                operator: \"!\",\n                expression: node.negate(compressor)\n            });\n        }\n\n        // AST_True or !0\n        function is_true(node) {\n            return node instanceof AST_True\n                || in_bool\n                    && node instanceof AST_Constant\n                    && node.getValue()\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && !node.expression.getValue());\n        }\n        // AST_False or !1\n        function is_false(node) {\n            return node instanceof AST_False\n                || in_bool\n                    && node instanceof AST_Constant\n                    && !node.getValue()\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && node.expression.getValue());\n        }\n\n        function single_arg_diff() {\n            var a = consequent.args;\n            var b = alternative.args;\n            for (var i = 0, len = a.length; i < len; i++) {\n                if (a[i] instanceof AST_Expansion) return;\n                if (!a[i].equivalent_to(b[i])) {\n                    if (b[i] instanceof AST_Expansion) return;\n                    for (var j = i + 1; j < len; j++) {\n                        if (a[j] instanceof AST_Expansion) return;\n                        if (!a[j].equivalent_to(b[j])) return;\n                    }\n                    return i;\n                }\n            }\n        }\n    });\n\n    def_optimize(AST_Boolean, function(self, compressor) {\n        if (compressor.in_boolean_context()) return make_node(AST_Number, self, {\n            value: +self.value\n        });\n        var p = compressor.parent();\n        if (compressor.option(\"booleans_as_integers\")) {\n            if (p instanceof AST_Binary && (p.operator == \"===\" || p.operator == \"!==\")) {\n                p.operator = p.operator.replace(/=$/, \"\");\n            }\n            return make_node(AST_Number, self, {\n                value: +self.value\n            });\n        }\n        if (compressor.option(\"booleans\")) {\n            if (p instanceof AST_Binary && (p.operator == \"==\"\n                                            || p.operator == \"!=\")) {\n                compressor.warn(\"Non-strict equality against boolean: {operator} {value} [{file}:{line},{col}]\", {\n                    operator : p.operator,\n                    value    : self.value,\n                    file     : p.start.file,\n                    line     : p.start.line,\n                    col      : p.start.col,\n                });\n                return make_node(AST_Number, self, {\n                    value: +self.value\n                });\n            }\n            return make_node(AST_UnaryPrefix, self, {\n                operator: \"!\",\n                expression: make_node(AST_Number, self, {\n                    value: 1 - self.value\n                })\n            });\n        }\n        return self;\n    });\n\n    function safe_to_flatten(value, compressor) {\n        if (value instanceof AST_SymbolRef) {\n            value = value.fixed_value();\n        }\n        if (!value) return false;\n        return !(value instanceof AST_Lambda || value instanceof AST_Class)\n            || compressor.parent() instanceof AST_New\n            || !value.contains_this();\n    }\n\n    def_optimize(AST_Sub, function(self, compressor) {\n        var expr = self.expression;\n        var prop = self.property;\n        if (compressor.option(\"properties\")) {\n            var key = prop.evaluate(compressor);\n            if (key !== prop) {\n                if (typeof key == \"string\") {\n                    if (key == \"undefined\") {\n                        key = undefined;\n                    } else {\n                        var value = parseFloat(key);\n                        if (value.toString() == key) {\n                            key = value;\n                        }\n                    }\n                }\n                prop = self.property = best_of_expression(prop, make_node_from_constant(key, prop).transform(compressor));\n                var property = \"\" + key;\n                if (is_identifier_string(property)\n                    && property.length <= prop.print_to_string().length + 1) {\n                    return make_node(AST_Dot, self, {\n                        expression: expr,\n                        property: property,\n                        quote: prop.quote,\n                    }).optimize(compressor);\n                }\n            }\n        }\n        var fn;\n        OPT_ARGUMENTS: if (compressor.option(\"arguments\")\n            && expr instanceof AST_SymbolRef\n            && expr.name == \"arguments\"\n            && expr.definition().orig.length == 1\n            && (fn = expr.scope) instanceof AST_Lambda\n            && fn.uses_arguments\n            && !(fn instanceof AST_Arrow)\n            && prop instanceof AST_Number) {\n            var index = prop.getValue();\n            var params = new Set();\n            var argnames = fn.argnames;\n            for (var n = 0; n < argnames.length; n++) {\n                if (!(argnames[n] instanceof AST_SymbolFunarg)) {\n                    break OPT_ARGUMENTS; // destructuring parameter - bail\n                }\n                var param = argnames[n].name;\n                if (params.has(param)) {\n                    break OPT_ARGUMENTS; // duplicate parameter - bail\n                }\n                params.add(param);\n            }\n            var argname = fn.argnames[index];\n            if (argname && compressor.has_directive(\"use strict\")) {\n                var def = argname.definition();\n                if (!compressor.option(\"reduce_vars\") || def.assignments || def.orig.length > 1) {\n                    argname = null;\n                }\n            } else if (!argname && !compressor.option(\"keep_fargs\") && index < fn.argnames.length + 5) {\n                while (index >= fn.argnames.length) {\n                    argname = make_node(AST_SymbolFunarg, fn, {\n                        name: fn.make_var_name(\"argument_\" + fn.argnames.length),\n                        scope: fn\n                    });\n                    fn.argnames.push(argname);\n                    fn.enclosed.push(fn.def_variable(argname));\n                }\n            }\n            if (argname) {\n                var sym = make_node(AST_SymbolRef, self, argname);\n                sym.reference({});\n                delete argname.__unused;\n                return sym;\n            }\n        }\n        if (is_lhs(self, compressor.parent())) return self;\n        if (key !== prop) {\n            var sub = self.flatten_object(property, compressor);\n            if (sub) {\n                expr = self.expression = sub.expression;\n                prop = self.property = sub.property;\n            }\n        }\n        if (compressor.option(\"properties\") && compressor.option(\"side_effects\")\n            && prop instanceof AST_Number && expr instanceof AST_Array) {\n            var index = prop.getValue();\n            var elements = expr.elements;\n            var retValue = elements[index];\n            FLATTEN: if (safe_to_flatten(retValue, compressor)) {\n                var flatten = true;\n                var values = [];\n                for (var i = elements.length; --i > index;) {\n                    var value = elements[i].drop_side_effect_free(compressor);\n                    if (value) {\n                        values.unshift(value);\n                        if (flatten && value.has_side_effects(compressor)) flatten = false;\n                    }\n                }\n                if (retValue instanceof AST_Expansion) break FLATTEN;\n                retValue = retValue instanceof AST_Hole ? make_node(AST_Undefined, retValue) : retValue;\n                if (!flatten) values.unshift(retValue);\n                while (--i >= 0) {\n                    var value = elements[i];\n                    if (value instanceof AST_Expansion) break FLATTEN;\n                    value = value.drop_side_effect_free(compressor);\n                    if (value) values.unshift(value);\n                    else index--;\n                }\n                if (flatten) {\n                    values.push(retValue);\n                    return make_sequence(self, values).optimize(compressor);\n                } else return make_node(AST_Sub, self, {\n                    expression: make_node(AST_Array, expr, {\n                        elements: values\n                    }),\n                    property: make_node(AST_Number, prop, {\n                        value: index\n                    })\n                });\n            }\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    AST_Lambda.DEFMETHOD(\"contains_this\", function() {\n        var result;\n        var self = this;\n        self.walk(new TreeWalker(function(node) {\n            if (result) return true;\n            if (node instanceof AST_This) return result = true;\n            if (node !== self && node instanceof AST_Scope && !(node instanceof AST_Arrow)) return true;\n        }));\n        return result;\n    });\n\n    AST_PropAccess.DEFMETHOD(\"flatten_object\", function(key, compressor) {\n        if (!compressor.option(\"properties\")) return;\n        var arrows = compressor.option(\"unsafe_arrows\") && compressor.option(\"ecma\") >= 6;\n        var expr = this.expression;\n        if (expr instanceof AST_Object) {\n            var props = expr.properties;\n            for (var i = props.length; --i >= 0;) {\n                var prop = props[i];\n                if (\"\" + (prop instanceof AST_ConciseMethod ? prop.key.name : prop.key) == key) {\n                    if (!props.every((prop) => {\n                        return prop instanceof AST_ObjectKeyVal\n                            || arrows && prop instanceof AST_ConciseMethod && !prop.is_generator;\n                    })) break;\n                    if (!safe_to_flatten(prop.value, compressor)) break;\n                    return make_node(AST_Sub, this, {\n                        expression: make_node(AST_Array, expr, {\n                            elements: props.map(function(prop) {\n                                var v = prop.value;\n                                if (v instanceof AST_Accessor) v = make_node(AST_Function, v, v);\n                                var k = prop.key;\n                                if (k instanceof AST_Node && !(k instanceof AST_SymbolMethod)) {\n                                    return make_sequence(prop, [ k, v ]);\n                                }\n                                return v;\n                            })\n                        }),\n                        property: make_node(AST_Number, this, {\n                            value: i\n                        })\n                    });\n                }\n            }\n        }\n    });\n\n    def_optimize(AST_Dot, function(self, compressor) {\n        if (self.property == \"arguments\" || self.property == \"caller\") {\n            compressor.warn(\"Function.prototype.{prop} not supported [{file}:{line},{col}]\", {\n                prop: self.property,\n                file: self.start.file,\n                line: self.start.line,\n                col: self.start.col\n            });\n        }\n        if (is_lhs(self, compressor.parent())) return self;\n        if (compressor.option(\"unsafe_proto\")\n            && self.expression instanceof AST_Dot\n            && self.expression.property == \"prototype\") {\n            var exp = self.expression.expression;\n            if (is_undeclared_ref(exp)) switch (exp.name) {\n              case \"Array\":\n                self.expression = make_node(AST_Array, self.expression, {\n                    elements: []\n                });\n                break;\n              case \"Function\":\n                self.expression = make_node(AST_Function, self.expression, {\n                    argnames: [],\n                    body: []\n                });\n                break;\n              case \"Number\":\n                self.expression = make_node(AST_Number, self.expression, {\n                    value: 0\n                });\n                break;\n              case \"Object\":\n                self.expression = make_node(AST_Object, self.expression, {\n                    properties: []\n                });\n                break;\n              case \"RegExp\":\n                self.expression = make_node(AST_RegExp, self.expression, {\n                    value: /t/\n                });\n                break;\n              case \"String\":\n                self.expression = make_node(AST_String, self.expression, {\n                    value: \"\"\n                });\n                break;\n            }\n        }\n        var sub = self.flatten_object(self.property, compressor);\n        if (sub) return sub.optimize(compressor);\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    function literals_in_boolean_context(self, compressor) {\n        if (compressor.in_boolean_context()) {\n            return best_of(compressor, self, make_sequence(self, [\n                self,\n                make_node(AST_True, self)\n            ]).optimize(compressor));\n        }\n        return self;\n    }\n\n    function inline_array_like_spread(self, compressor, elements) {\n        for (var i = 0; i < elements.length; i++) {\n            var el = elements[i];\n            if (el instanceof AST_Expansion) {\n                var expr = el.expression;\n                if ( expr instanceof AST_Array) {\n                    elements.splice.apply(elements, [i, 1].concat(expr.elements));\n                    // Step back one, as the element at i is now new.\n                    i--;\n                }\n                // In array-like spread, spreading a non-iterable value is TypeError.\n                // We therefore can’t optimize anything else, unlike with object spread.\n            }\n        }\n        return self;\n    }\n\n    def_optimize(AST_Array, function(self, compressor) {\n        var optimized = literals_in_boolean_context(self, compressor);\n        if (optimized !== self) {\n            return optimized;\n        }\n        return inline_array_like_spread(self, compressor, self.elements);\n    });\n\n    def_optimize(AST_Object, function(self, compressor) {\n        var optimized = literals_in_boolean_context(self, compressor);\n        if (optimized !== self) {\n            return optimized;\n        }\n        var props = self.properties;\n        for (var i = 0; i < props.length; i++) {\n            var prop = props[i];\n            if (prop instanceof AST_Expansion) {\n                var expr = prop.expression;\n                if (expr instanceof AST_Object) {\n                    props.splice.apply(props, [i, 1].concat(prop.expression.properties));\n                    // Step back one, as the property at i is now new.\n                    i--;\n                } else if (expr instanceof AST_Constant\n                    && !(expr instanceof AST_String)) {\n                    // Unlike array-like spread, in object spread, spreading a\n                    // non-iterable value silently does nothing; it is thus safe\n                    // to remove. AST_String is the only iterable AST_Constant.\n                    props.splice(i, 1);\n                }\n            }\n        }\n        return self;\n    });\n\n    def_optimize(AST_RegExp, literals_in_boolean_context);\n\n    def_optimize(AST_Return, function(self, compressor) {\n        if (self.value && is_undefined(self.value, compressor)) {\n            self.value = null;\n        }\n        return self;\n    });\n\n    def_optimize(AST_Arrow, function(self, compressor) {\n        if (!(self.body instanceof AST_Node)) {\n            self = opt_AST_Lambda(self, compressor);\n        }\n        if (compressor.option(\"arrows\")\n            && self.body.length == 1\n            && self.body[0] instanceof AST_Return) {\n            var value = self.body[0].value;\n            self.body = value ? value : [];\n        }\n        return self;\n    });\n\n    def_optimize(AST_Function, function(self, compressor) {\n        self = opt_AST_Lambda(self, compressor);\n        if (compressor.option(\"unsafe_arrows\")\n            && compressor.option(\"ecma\") >= 6\n            && !self.name\n            && !self.is_generator\n            && !self.uses_arguments\n            && !self.pinned()) {\n            var has_special_symbol = false;\n            self.walk(new TreeWalker(function(node) {\n                if (has_special_symbol) return true;\n                if (node instanceof AST_This) {\n                    has_special_symbol = true;\n                    return true;\n                }\n            }));\n            if (!has_special_symbol) return make_node(AST_Arrow, self, self).optimize(compressor);\n        }\n        return self;\n    });\n\n    def_optimize(AST_Class, function(self, compressor) {\n        // HACK to avoid compress failure.\n        // AST_Class is not really an AST_Scope/AST_Block as it lacks a body.\n        return self;\n    });\n\n    def_optimize(AST_Yield, function(self, compressor) {\n        if (self.expression && !self.is_star && is_undefined(self.expression, compressor)) {\n            self.expression = null;\n        }\n        return self;\n    });\n\n    def_optimize(AST_TemplateString, function(self, compressor) {\n        if (!compressor.option(\"evaluate\")\n        || compressor.parent() instanceof AST_PrefixedTemplateString)\n            return self;\n\n        var segments = [];\n        for (var i = 0; i < self.segments.length; i++) {\n            var segment = self.segments[i];\n            if (segment instanceof AST_Node) {\n                var result = segment.evaluate(compressor);\n                // Evaluate to constant value\n                // Constant value shorter than ${segment}\n                if (result !== segment && (result + \"\").length <= segment.print_to_string().length + \"${}\".length) {\n                    // There should always be a previous and next segment if segment is a node\n                    segments[segments.length - 1].value = segments[segments.length - 1].value + result + self.segments[++i].value;\n                    continue;\n                }\n            }\n            segments.push(segment);\n        }\n        self.segments = segments;\n\n        return segments.length == 1 ? make_node(AST_String, self, segments[0]) : self;\n    });\n\n    def_optimize(AST_PrefixedTemplateString, function(self, compressor) {\n        return self;\n    });\n\n    // [\"p\"]:1 ---> p:1\n    // [42]:1 ---> 42:1\n    function lift_key(self, compressor) {\n        if (!compressor.option(\"computed_props\")) return self;\n        // save a comparison in the typical case\n        if (!(self.key instanceof AST_Constant)) return self;\n        // whitelist acceptable props as not all AST_Constants are true constants\n        if (self.key instanceof AST_String || self.key instanceof AST_Number) {\n            if (self.key.value === \"__proto__\") return self;\n            if (self.key.value == \"constructor\"\n                && compressor.parent() instanceof AST_Class) return self;\n            if (self instanceof AST_ObjectKeyVal) {\n                self.key = self.key.value;\n            } else {\n                self.key = make_node(AST_SymbolMethod, self.key, {\n                    name: self.key.value\n                });\n            }\n        }\n        return self;\n    }\n\n    def_optimize(AST_ObjectProperty, lift_key);\n\n    def_optimize(AST_ConciseMethod, function(self, compressor) {\n        lift_key(self, compressor);\n        // p(){return x;} ---> p:()=>x\n        if (compressor.option(\"arrows\")\n            && compressor.parent() instanceof AST_Object\n            && !self.is_generator\n            && !self.value.uses_arguments\n            && !self.value.pinned()\n            && self.value.body.length == 1\n            && self.value.body[0] instanceof AST_Return\n            && self.value.body[0].value\n            && !self.value.contains_this()) {\n            var arrow = make_node(AST_Arrow, self.value, self.value);\n            arrow.async = self.async;\n            arrow.is_generator = self.is_generator;\n            return make_node(AST_ObjectKeyVal, self, {\n                key: self.key instanceof AST_SymbolMethod ? self.key.name : self.key,\n                value: arrow,\n                quote: self.quote,\n            });\n        }\n        return self;\n    });\n\n    def_optimize(AST_ObjectKeyVal, function(self, compressor) {\n        lift_key(self, compressor);\n        // p:function(){} ---> p(){}\n        // p:function*(){} ---> *p(){}\n        // p:async function(){} ---> async p(){}\n        // p:()=>{} ---> p(){}\n        // p:async()=>{} ---> async p(){}\n        var unsafe_methods = compressor.option(\"unsafe_methods\");\n        if (unsafe_methods\n            && compressor.option(\"ecma\") >= 6\n            && (!(unsafe_methods instanceof RegExp) || unsafe_methods.test(self.key + \"\"))) {\n            var key = self.key;\n            var value = self.value;\n            var is_arrow_with_block = value instanceof AST_Arrow\n                && Array.isArray(value.body)\n                && !value.contains_this();\n            if ((is_arrow_with_block || value instanceof AST_Function) && !value.name) {\n                return make_node(AST_ConciseMethod, self, {\n                    async: value.async,\n                    is_generator: value.is_generator,\n                    key: key instanceof AST_Node ? key : make_node(AST_SymbolMethod, self, {\n                        name: key,\n                    }),\n                    value: make_node(AST_Accessor, value, value),\n                    quote: self.quote,\n                });\n            }\n        }\n        return self;\n    });\n\n    def_optimize(AST_Destructuring, function(self, compressor) {\n        if (compressor.option(\"pure_getters\") == true\n            && compressor.option(\"unused\")\n            && !self.is_array\n            && Array.isArray(self.names)\n            && !is_destructuring_export_decl(compressor)) {\n            var keep = [];\n            for (var i = 0; i < self.names.length; i++) {\n                var elem = self.names[i];\n                if (!(elem instanceof AST_ObjectKeyVal\n                    && typeof elem.key == \"string\"\n                    && elem.value instanceof AST_SymbolDeclaration\n                    && !should_retain(compressor, elem.value.definition()))) {\n                    keep.push(elem);\n                }\n            }\n            if (keep.length != self.names.length) {\n                self.names = keep;\n            }\n        }\n        return self;\n\n        function is_destructuring_export_decl(compressor) {\n            var ancestors = [/^VarDef$/, /^(Const|Let|Var)$/, /^Export$/];\n            for (var a = 0, p = 0, len = ancestors.length; a < len; p++) {\n                var parent = compressor.parent(p);\n                if (!parent) return false;\n                if (a === 0 && parent.TYPE == \"Destructuring\") continue;\n                if (!ancestors[a].test(parent.TYPE)) {\n                    return false;\n                }\n                a++;\n            }\n            return true;\n        }\n\n        function should_retain(compressor, def) {\n            if (def.references.length) return true;\n            if (!def.global) return false;\n            if (compressor.toplevel.vars) {\n                 if (compressor.top_retain) {\n                     return compressor.top_retain(def);\n                 }\n                 return false;\n            }\n            return true;\n        }\n    });\n})();\n\nexport {\n    Compressor,\n};\n","export var domprops = [\n    \"$&\",\n    \"$'\",\n    \"$*\",\n    \"$+\",\n    \"$1\",\n    \"$2\",\n    \"$3\",\n    \"$4\",\n    \"$5\",\n    \"$6\",\n    \"$7\",\n    \"$8\",\n    \"$9\",\n    \"$_\",\n    \"$`\",\n    \"$input\",\n    \"@@iterator\",\n    \"ABORT_ERR\",\n    \"ACTIVE\",\n    \"ACTIVE_ATTRIBUTES\",\n    \"ACTIVE_TEXTURE\",\n    \"ACTIVE_UNIFORMS\",\n    \"ADDITION\",\n    \"ALIASED_LINE_WIDTH_RANGE\",\n    \"ALIASED_POINT_SIZE_RANGE\",\n    \"ALLOW_KEYBOARD_INPUT\",\n    \"ALLPASS\",\n    \"ALPHA\",\n    \"ALPHA_BITS\",\n    \"ALT_MASK\",\n    \"ALWAYS\",\n    \"ANY_TYPE\",\n    \"ANY_UNORDERED_NODE_TYPE\",\n    \"ARRAY_BUFFER\",\n    \"ARRAY_BUFFER_BINDING\",\n    \"ATTACHED_SHADERS\",\n    \"ATTRIBUTE_NODE\",\n    \"AT_TARGET\",\n    \"AddSearchProvider\",\n    \"AnalyserNode\",\n    \"AnimationEvent\",\n    \"AnonXMLHttpRequest\",\n    \"ApplicationCache\",\n    \"ApplicationCacheErrorEvent\",\n    \"Array\",\n    \"ArrayBuffer\",\n    \"Attr\",\n    \"Audio\",\n    \"AudioBuffer\",\n    \"AudioBufferSourceNode\",\n    \"AudioContext\",\n    \"AudioDestinationNode\",\n    \"AudioListener\",\n    \"AudioNode\",\n    \"AudioParam\",\n    \"AudioProcessingEvent\",\n    \"AudioStreamTrack\",\n    \"AutocompleteErrorEvent\",\n    \"BACK\",\n    \"BAD_BOUNDARYPOINTS_ERR\",\n    \"BANDPASS\",\n    \"BLEND\",\n    \"BLEND_COLOR\",\n    \"BLEND_DST_ALPHA\",\n    \"BLEND_DST_RGB\",\n    \"BLEND_EQUATION\",\n    \"BLEND_EQUATION_ALPHA\",\n    \"BLEND_EQUATION_RGB\",\n    \"BLEND_SRC_ALPHA\",\n    \"BLEND_SRC_RGB\",\n    \"BLUE_BITS\",\n    \"BLUR\",\n    \"BOOL\",\n    \"BOOLEAN_TYPE\",\n    \"BOOL_VEC2\",\n    \"BOOL_VEC3\",\n    \"BOOL_VEC4\",\n    \"BOTH\",\n    \"BROWSER_DEFAULT_WEBGL\",\n    \"BUBBLING_PHASE\",\n    \"BUFFER_SIZE\",\n    \"BUFFER_USAGE\",\n    \"BYTE\",\n    \"BYTES_PER_ELEMENT\",\n    \"BarProp\",\n    \"BaseHref\",\n    \"BatteryManager\",\n    \"BeforeLoadEvent\",\n    \"BeforeUnloadEvent\",\n    \"BiquadFilterNode\",\n    \"Blob\",\n    \"BlobEvent\",\n    \"Boolean\",\n    \"CAPTURING_PHASE\",\n    \"CCW\",\n    \"CDATASection\",\n    \"CDATA_SECTION_NODE\",\n    \"CHANGE\",\n    \"CHARSET_RULE\",\n    \"CHECKING\",\n    \"CLAMP_TO_EDGE\",\n    \"CLICK\",\n    \"CLOSED\",\n    \"CLOSING\",\n    \"COLOR_ATTACHMENT0\",\n    \"COLOR_BUFFER_BIT\",\n    \"COLOR_CLEAR_VALUE\",\n    \"COLOR_WRITEMASK\",\n    \"COMMENT_NODE\",\n    \"COMPILE_STATUS\",\n    \"COMPRESSED_RGBA_S3TC_DXT1_EXT\",\n    \"COMPRESSED_RGBA_S3TC_DXT3_EXT\",\n    \"COMPRESSED_RGBA_S3TC_DXT5_EXT\",\n    \"COMPRESSED_RGB_S3TC_DXT1_EXT\",\n    \"COMPRESSED_TEXTURE_FORMATS\",\n    \"CONNECTING\",\n    \"CONSTANT_ALPHA\",\n    \"CONSTANT_COLOR\",\n    \"CONSTRAINT_ERR\",\n    \"CONTEXT_LOST_WEBGL\",\n    \"CONTROL_MASK\",\n    \"COUNTER_STYLE_RULE\",\n    \"CSS\",\n    \"CSS2Properties\",\n    \"CSSCharsetRule\",\n    \"CSSConditionRule\",\n    \"CSSCounterStyleRule\",\n    \"CSSFontFaceRule\",\n    \"CSSFontFeatureValuesRule\",\n    \"CSSGroupingRule\",\n    \"CSSImportRule\",\n    \"CSSKeyframeRule\",\n    \"CSSKeyframesRule\",\n    \"CSSMediaRule\",\n    \"CSSMozDocumentRule\",\n    \"CSSNameSpaceRule\",\n    \"CSSPageRule\",\n    \"CSSPrimitiveValue\",\n    \"CSSRule\",\n    \"CSSRuleList\",\n    \"CSSStyleDeclaration\",\n    \"CSSStyleRule\",\n    \"CSSStyleSheet\",\n    \"CSSSupportsRule\",\n    \"CSSUnknownRule\",\n    \"CSSValue\",\n    \"CSSValueList\",\n    \"CSSVariablesDeclaration\",\n    \"CSSVariablesRule\",\n    \"CSSViewportRule\",\n    \"CSS_ATTR\",\n    \"CSS_CM\",\n    \"CSS_COUNTER\",\n    \"CSS_CUSTOM\",\n    \"CSS_DEG\",\n    \"CSS_DIMENSION\",\n    \"CSS_EMS\",\n    \"CSS_EXS\",\n    \"CSS_FILTER_BLUR\",\n    \"CSS_FILTER_BRIGHTNESS\",\n    \"CSS_FILTER_CONTRAST\",\n    \"CSS_FILTER_CUSTOM\",\n    \"CSS_FILTER_DROP_SHADOW\",\n    \"CSS_FILTER_GRAYSCALE\",\n    \"CSS_FILTER_HUE_ROTATE\",\n    \"CSS_FILTER_INVERT\",\n    \"CSS_FILTER_OPACITY\",\n    \"CSS_FILTER_REFERENCE\",\n    \"CSS_FILTER_SATURATE\",\n    \"CSS_FILTER_SEPIA\",\n    \"CSS_GRAD\",\n    \"CSS_HZ\",\n    \"CSS_IDENT\",\n    \"CSS_IN\",\n    \"CSS_INHERIT\",\n    \"CSS_KHZ\",\n    \"CSS_MATRIX\",\n    \"CSS_MATRIX3D\",\n    \"CSS_MM\",\n    \"CSS_MS\",\n    \"CSS_NUMBER\",\n    \"CSS_PC\",\n    \"CSS_PERCENTAGE\",\n    \"CSS_PERSPECTIVE\",\n    \"CSS_PRIMITIVE_VALUE\",\n    \"CSS_PT\",\n    \"CSS_PX\",\n    \"CSS_RAD\",\n    \"CSS_RECT\",\n    \"CSS_RGBCOLOR\",\n    \"CSS_ROTATE\",\n    \"CSS_ROTATE3D\",\n    \"CSS_ROTATEX\",\n    \"CSS_ROTATEY\",\n    \"CSS_ROTATEZ\",\n    \"CSS_S\",\n    \"CSS_SCALE\",\n    \"CSS_SCALE3D\",\n    \"CSS_SCALEX\",\n    \"CSS_SCALEY\",\n    \"CSS_SCALEZ\",\n    \"CSS_SKEW\",\n    \"CSS_SKEWX\",\n    \"CSS_SKEWY\",\n    \"CSS_STRING\",\n    \"CSS_TRANSLATE\",\n    \"CSS_TRANSLATE3D\",\n    \"CSS_TRANSLATEX\",\n    \"CSS_TRANSLATEY\",\n    \"CSS_TRANSLATEZ\",\n    \"CSS_UNKNOWN\",\n    \"CSS_URI\",\n    \"CSS_VALUE_LIST\",\n    \"CSS_VH\",\n    \"CSS_VMAX\",\n    \"CSS_VMIN\",\n    \"CSS_VW\",\n    \"CULL_FACE\",\n    \"CULL_FACE_MODE\",\n    \"CURRENT_PROGRAM\",\n    \"CURRENT_VERTEX_ATTRIB\",\n    \"CUSTOM\",\n    \"CW\",\n    \"CanvasGradient\",\n    \"CanvasPattern\",\n    \"CanvasRenderingContext2D\",\n    \"CaretPosition\",\n    \"ChannelMergerNode\",\n    \"ChannelSplitterNode\",\n    \"CharacterData\",\n    \"ClientRect\",\n    \"ClientRectList\",\n    \"Clipboard\",\n    \"ClipboardEvent\",\n    \"CloseEvent\",\n    \"Collator\",\n    \"CommandEvent\",\n    \"Comment\",\n    \"CompositionEvent\",\n    \"Console\",\n    \"Controllers\",\n    \"ConvolverNode\",\n    \"Counter\",\n    \"Crypto\",\n    \"CryptoKey\",\n    \"CustomEvent\",\n    \"DATABASE_ERR\",\n    \"DATA_CLONE_ERR\",\n    \"DATA_ERR\",\n    \"DBLCLICK\",\n    \"DECR\",\n    \"DECR_WRAP\",\n    \"DELETE_STATUS\",\n    \"DEPTH_ATTACHMENT\",\n    \"DEPTH_BITS\",\n    \"DEPTH_BUFFER_BIT\",\n    \"DEPTH_CLEAR_VALUE\",\n    \"DEPTH_COMPONENT\",\n    \"DEPTH_COMPONENT16\",\n    \"DEPTH_FUNC\",\n    \"DEPTH_RANGE\",\n    \"DEPTH_STENCIL\",\n    \"DEPTH_STENCIL_ATTACHMENT\",\n    \"DEPTH_TEST\",\n    \"DEPTH_WRITEMASK\",\n    \"DIRECTION_DOWN\",\n    \"DIRECTION_LEFT\",\n    \"DIRECTION_RIGHT\",\n    \"DIRECTION_UP\",\n    \"DISABLED\",\n    \"DISPATCH_REQUEST_ERR\",\n    \"DITHER\",\n    \"DOCUMENT_FRAGMENT_NODE\",\n    \"DOCUMENT_NODE\",\n    \"DOCUMENT_POSITION_CONTAINED_BY\",\n    \"DOCUMENT_POSITION_CONTAINS\",\n    \"DOCUMENT_POSITION_DISCONNECTED\",\n    \"DOCUMENT_POSITION_FOLLOWING\",\n    \"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\",\n    \"DOCUMENT_POSITION_PRECEDING\",\n    \"DOCUMENT_TYPE_NODE\",\n    \"DOMCursor\",\n    \"DOMError\",\n    \"DOMException\",\n    \"DOMImplementation\",\n    \"DOMImplementationLS\",\n    \"DOMMatrix\",\n    \"DOMMatrixReadOnly\",\n    \"DOMParser\",\n    \"DOMPoint\",\n    \"DOMPointReadOnly\",\n    \"DOMQuad\",\n    \"DOMRect\",\n    \"DOMRectList\",\n    \"DOMRectReadOnly\",\n    \"DOMRequest\",\n    \"DOMSTRING_SIZE_ERR\",\n    \"DOMSettableTokenList\",\n    \"DOMStringList\",\n    \"DOMStringMap\",\n    \"DOMTokenList\",\n    \"DOMTransactionEvent\",\n    \"DOM_DELTA_LINE\",\n    \"DOM_DELTA_PAGE\",\n    \"DOM_DELTA_PIXEL\",\n    \"DOM_INPUT_METHOD_DROP\",\n    \"DOM_INPUT_METHOD_HANDWRITING\",\n    \"DOM_INPUT_METHOD_IME\",\n    \"DOM_INPUT_METHOD_KEYBOARD\",\n    \"DOM_INPUT_METHOD_MULTIMODAL\",\n    \"DOM_INPUT_METHOD_OPTION\",\n    \"DOM_INPUT_METHOD_PASTE\",\n    \"DOM_INPUT_METHOD_SCRIPT\",\n    \"DOM_INPUT_METHOD_UNKNOWN\",\n    \"DOM_INPUT_METHOD_VOICE\",\n    \"DOM_KEY_LOCATION_JOYSTICK\",\n    \"DOM_KEY_LOCATION_LEFT\",\n    \"DOM_KEY_LOCATION_MOBILE\",\n    \"DOM_KEY_LOCATION_NUMPAD\",\n    \"DOM_KEY_LOCATION_RIGHT\",\n    \"DOM_KEY_LOCATION_STANDARD\",\n    \"DOM_VK_0\",\n    \"DOM_VK_1\",\n    \"DOM_VK_2\",\n    \"DOM_VK_3\",\n    \"DOM_VK_4\",\n    \"DOM_VK_5\",\n    \"DOM_VK_6\",\n    \"DOM_VK_7\",\n    \"DOM_VK_8\",\n    \"DOM_VK_9\",\n    \"DOM_VK_A\",\n    \"DOM_VK_ACCEPT\",\n    \"DOM_VK_ADD\",\n    \"DOM_VK_ALT\",\n    \"DOM_VK_ALTGR\",\n    \"DOM_VK_AMPERSAND\",\n    \"DOM_VK_ASTERISK\",\n    \"DOM_VK_AT\",\n    \"DOM_VK_ATTN\",\n    \"DOM_VK_B\",\n    \"DOM_VK_BACKSPACE\",\n    \"DOM_VK_BACK_QUOTE\",\n    \"DOM_VK_BACK_SLASH\",\n    \"DOM_VK_BACK_SPACE\",\n    \"DOM_VK_C\",\n    \"DOM_VK_CANCEL\",\n    \"DOM_VK_CAPS_LOCK\",\n    \"DOM_VK_CIRCUMFLEX\",\n    \"DOM_VK_CLEAR\",\n    \"DOM_VK_CLOSE_BRACKET\",\n    \"DOM_VK_CLOSE_CURLY_BRACKET\",\n    \"DOM_VK_CLOSE_PAREN\",\n    \"DOM_VK_COLON\",\n    \"DOM_VK_COMMA\",\n    \"DOM_VK_CONTEXT_MENU\",\n    \"DOM_VK_CONTROL\",\n    \"DOM_VK_CONVERT\",\n    \"DOM_VK_CRSEL\",\n    \"DOM_VK_CTRL\",\n    \"DOM_VK_D\",\n    \"DOM_VK_DECIMAL\",\n    \"DOM_VK_DELETE\",\n    \"DOM_VK_DIVIDE\",\n    \"DOM_VK_DOLLAR\",\n    \"DOM_VK_DOUBLE_QUOTE\",\n    \"DOM_VK_DOWN\",\n    \"DOM_VK_E\",\n    \"DOM_VK_EISU\",\n    \"DOM_VK_END\",\n    \"DOM_VK_ENTER\",\n    \"DOM_VK_EQUALS\",\n    \"DOM_VK_EREOF\",\n    \"DOM_VK_ESCAPE\",\n    \"DOM_VK_EXCLAMATION\",\n    \"DOM_VK_EXECUTE\",\n    \"DOM_VK_EXSEL\",\n    \"DOM_VK_F\",\n    \"DOM_VK_F1\",\n    \"DOM_VK_F10\",\n    \"DOM_VK_F11\",\n    \"DOM_VK_F12\",\n    \"DOM_VK_F13\",\n    \"DOM_VK_F14\",\n    \"DOM_VK_F15\",\n    \"DOM_VK_F16\",\n    \"DOM_VK_F17\",\n    \"DOM_VK_F18\",\n    \"DOM_VK_F19\",\n    \"DOM_VK_F2\",\n    \"DOM_VK_F20\",\n    \"DOM_VK_F21\",\n    \"DOM_VK_F22\",\n    \"DOM_VK_F23\",\n    \"DOM_VK_F24\",\n    \"DOM_VK_F25\",\n    \"DOM_VK_F26\",\n    \"DOM_VK_F27\",\n    \"DOM_VK_F28\",\n    \"DOM_VK_F29\",\n    \"DOM_VK_F3\",\n    \"DOM_VK_F30\",\n    \"DOM_VK_F31\",\n    \"DOM_VK_F32\",\n    \"DOM_VK_F33\",\n    \"DOM_VK_F34\",\n    \"DOM_VK_F35\",\n    \"DOM_VK_F36\",\n    \"DOM_VK_F4\",\n    \"DOM_VK_F5\",\n    \"DOM_VK_F6\",\n    \"DOM_VK_F7\",\n    \"DOM_VK_F8\",\n    \"DOM_VK_F9\",\n    \"DOM_VK_FINAL\",\n    \"DOM_VK_FRONT\",\n    \"DOM_VK_G\",\n    \"DOM_VK_GREATER_THAN\",\n    \"DOM_VK_H\",\n    \"DOM_VK_HANGUL\",\n    \"DOM_VK_HANJA\",\n    \"DOM_VK_HASH\",\n    \"DOM_VK_HELP\",\n    \"DOM_VK_HK_TOGGLE\",\n    \"DOM_VK_HOME\",\n    \"DOM_VK_HYPHEN_MINUS\",\n    \"DOM_VK_I\",\n    \"DOM_VK_INSERT\",\n    \"DOM_VK_J\",\n    \"DOM_VK_JUNJA\",\n    \"DOM_VK_K\",\n    \"DOM_VK_KANA\",\n    \"DOM_VK_KANJI\",\n    \"DOM_VK_L\",\n    \"DOM_VK_LEFT\",\n    \"DOM_VK_LEFT_TAB\",\n    \"DOM_VK_LESS_THAN\",\n    \"DOM_VK_M\",\n    \"DOM_VK_META\",\n    \"DOM_VK_MODECHANGE\",\n    \"DOM_VK_MULTIPLY\",\n    \"DOM_VK_N\",\n    \"DOM_VK_NONCONVERT\",\n    \"DOM_VK_NUMPAD0\",\n    \"DOM_VK_NUMPAD1\",\n    \"DOM_VK_NUMPAD2\",\n    \"DOM_VK_NUMPAD3\",\n    \"DOM_VK_NUMPAD4\",\n    \"DOM_VK_NUMPAD5\",\n    \"DOM_VK_NUMPAD6\",\n    \"DOM_VK_NUMPAD7\",\n    \"DOM_VK_NUMPAD8\",\n    \"DOM_VK_NUMPAD9\",\n    \"DOM_VK_NUM_LOCK\",\n    \"DOM_VK_O\",\n    \"DOM_VK_OEM_1\",\n    \"DOM_VK_OEM_102\",\n    \"DOM_VK_OEM_2\",\n    \"DOM_VK_OEM_3\",\n    \"DOM_VK_OEM_4\",\n    \"DOM_VK_OEM_5\",\n    \"DOM_VK_OEM_6\",\n    \"DOM_VK_OEM_7\",\n    \"DOM_VK_OEM_8\",\n    \"DOM_VK_OEM_COMMA\",\n    \"DOM_VK_OEM_MINUS\",\n    \"DOM_VK_OEM_PERIOD\",\n    \"DOM_VK_OEM_PLUS\",\n    \"DOM_VK_OPEN_BRACKET\",\n    \"DOM_VK_OPEN_CURLY_BRACKET\",\n    \"DOM_VK_OPEN_PAREN\",\n    \"DOM_VK_P\",\n    \"DOM_VK_PA1\",\n    \"DOM_VK_PAGEDOWN\",\n    \"DOM_VK_PAGEUP\",\n    \"DOM_VK_PAGE_DOWN\",\n    \"DOM_VK_PAGE_UP\",\n    \"DOM_VK_PAUSE\",\n    \"DOM_VK_PERCENT\",\n    \"DOM_VK_PERIOD\",\n    \"DOM_VK_PIPE\",\n    \"DOM_VK_PLAY\",\n    \"DOM_VK_PLUS\",\n    \"DOM_VK_PRINT\",\n    \"DOM_VK_PRINTSCREEN\",\n    \"DOM_VK_PROCESSKEY\",\n    \"DOM_VK_PROPERITES\",\n    \"DOM_VK_Q\",\n    \"DOM_VK_QUESTION_MARK\",\n    \"DOM_VK_QUOTE\",\n    \"DOM_VK_R\",\n    \"DOM_VK_REDO\",\n    \"DOM_VK_RETURN\",\n    \"DOM_VK_RIGHT\",\n    \"DOM_VK_S\",\n    \"DOM_VK_SCROLL_LOCK\",\n    \"DOM_VK_SELECT\",\n    \"DOM_VK_SEMICOLON\",\n    \"DOM_VK_SEPARATOR\",\n    \"DOM_VK_SHIFT\",\n    \"DOM_VK_SLASH\",\n    \"DOM_VK_SLEEP\",\n    \"DOM_VK_SPACE\",\n    \"DOM_VK_SUBTRACT\",\n    \"DOM_VK_T\",\n    \"DOM_VK_TAB\",\n    \"DOM_VK_TILDE\",\n    \"DOM_VK_U\",\n    \"DOM_VK_UNDERSCORE\",\n    \"DOM_VK_UNDO\",\n    \"DOM_VK_UNICODE\",\n    \"DOM_VK_UP\",\n    \"DOM_VK_V\",\n    \"DOM_VK_VOLUME_DOWN\",\n    \"DOM_VK_VOLUME_MUTE\",\n    \"DOM_VK_VOLUME_UP\",\n    \"DOM_VK_W\",\n    \"DOM_VK_WIN\",\n    \"DOM_VK_WINDOW\",\n    \"DOM_VK_WIN_ICO_00\",\n    \"DOM_VK_WIN_ICO_CLEAR\",\n    \"DOM_VK_WIN_ICO_HELP\",\n    \"DOM_VK_WIN_OEM_ATTN\",\n    \"DOM_VK_WIN_OEM_AUTO\",\n    \"DOM_VK_WIN_OEM_BACKTAB\",\n    \"DOM_VK_WIN_OEM_CLEAR\",\n    \"DOM_VK_WIN_OEM_COPY\",\n    \"DOM_VK_WIN_OEM_CUSEL\",\n    \"DOM_VK_WIN_OEM_ENLW\",\n    \"DOM_VK_WIN_OEM_FINISH\",\n    \"DOM_VK_WIN_OEM_FJ_JISHO\",\n    \"DOM_VK_WIN_OEM_FJ_LOYA\",\n    \"DOM_VK_WIN_OEM_FJ_MASSHOU\",\n    \"DOM_VK_WIN_OEM_FJ_ROYA\",\n    \"DOM_VK_WIN_OEM_FJ_TOUROKU\",\n    \"DOM_VK_WIN_OEM_JUMP\",\n    \"DOM_VK_WIN_OEM_PA1\",\n    \"DOM_VK_WIN_OEM_PA2\",\n    \"DOM_VK_WIN_OEM_PA3\",\n    \"DOM_VK_WIN_OEM_RESET\",\n    \"DOM_VK_WIN_OEM_WSCTRL\",\n    \"DOM_VK_X\",\n    \"DOM_VK_XF86XK_ADD_FAVORITE\",\n    \"DOM_VK_XF86XK_APPLICATION_LEFT\",\n    \"DOM_VK_XF86XK_APPLICATION_RIGHT\",\n    \"DOM_VK_XF86XK_AUDIO_CYCLE_TRACK\",\n    \"DOM_VK_XF86XK_AUDIO_FORWARD\",\n    \"DOM_VK_XF86XK_AUDIO_LOWER_VOLUME\",\n    \"DOM_VK_XF86XK_AUDIO_MEDIA\",\n    \"DOM_VK_XF86XK_AUDIO_MUTE\",\n    \"DOM_VK_XF86XK_AUDIO_NEXT\",\n    \"DOM_VK_XF86XK_AUDIO_PAUSE\",\n    \"DOM_VK_XF86XK_AUDIO_PLAY\",\n    \"DOM_VK_XF86XK_AUDIO_PREV\",\n    \"DOM_VK_XF86XK_AUDIO_RAISE_VOLUME\",\n    \"DOM_VK_XF86XK_AUDIO_RANDOM_PLAY\",\n    \"DOM_VK_XF86XK_AUDIO_RECORD\",\n    \"DOM_VK_XF86XK_AUDIO_REPEAT\",\n    \"DOM_VK_XF86XK_AUDIO_REWIND\",\n    \"DOM_VK_XF86XK_AUDIO_STOP\",\n    \"DOM_VK_XF86XK_AWAY\",\n    \"DOM_VK_XF86XK_BACK\",\n    \"DOM_VK_XF86XK_BACK_FORWARD\",\n    \"DOM_VK_XF86XK_BATTERY\",\n    \"DOM_VK_XF86XK_BLUE\",\n    \"DOM_VK_XF86XK_BLUETOOTH\",\n    \"DOM_VK_XF86XK_BOOK\",\n    \"DOM_VK_XF86XK_BRIGHTNESS_ADJUST\",\n    \"DOM_VK_XF86XK_CALCULATOR\",\n    \"DOM_VK_XF86XK_CALENDAR\",\n    \"DOM_VK_XF86XK_CD\",\n    \"DOM_VK_XF86XK_CLOSE\",\n    \"DOM_VK_XF86XK_COMMUNITY\",\n    \"DOM_VK_XF86XK_CONTRAST_ADJUST\",\n    \"DOM_VK_XF86XK_COPY\",\n    \"DOM_VK_XF86XK_CUT\",\n    \"DOM_VK_XF86XK_CYCLE_ANGLE\",\n    \"DOM_VK_XF86XK_DISPLAY\",\n    \"DOM_VK_XF86XK_DOCUMENTS\",\n    \"DOM_VK_XF86XK_DOS\",\n    \"DOM_VK_XF86XK_EJECT\",\n    \"DOM_VK_XF86XK_EXCEL\",\n    \"DOM_VK_XF86XK_EXPLORER\",\n    \"DOM_VK_XF86XK_FAVORITES\",\n    \"DOM_VK_XF86XK_FINANCE\",\n    \"DOM_VK_XF86XK_FORWARD\",\n    \"DOM_VK_XF86XK_FRAME_BACK\",\n    \"DOM_VK_XF86XK_FRAME_FORWARD\",\n    \"DOM_VK_XF86XK_GAME\",\n    \"DOM_VK_XF86XK_GO\",\n    \"DOM_VK_XF86XK_GREEN\",\n    \"DOM_VK_XF86XK_HIBERNATE\",\n    \"DOM_VK_XF86XK_HISTORY\",\n    \"DOM_VK_XF86XK_HOME_PAGE\",\n    \"DOM_VK_XF86XK_HOT_LINKS\",\n    \"DOM_VK_XF86XK_I_TOUCH\",\n    \"DOM_VK_XF86XK_KBD_BRIGHTNESS_DOWN\",\n    \"DOM_VK_XF86XK_KBD_BRIGHTNESS_UP\",\n    \"DOM_VK_XF86XK_KBD_LIGHT_ON_OFF\",\n    \"DOM_VK_XF86XK_LAUNCH0\",\n    \"DOM_VK_XF86XK_LAUNCH1\",\n    \"DOM_VK_XF86XK_LAUNCH2\",\n    \"DOM_VK_XF86XK_LAUNCH3\",\n    \"DOM_VK_XF86XK_LAUNCH4\",\n    \"DOM_VK_XF86XK_LAUNCH5\",\n    \"DOM_VK_XF86XK_LAUNCH6\",\n    \"DOM_VK_XF86XK_LAUNCH7\",\n    \"DOM_VK_XF86XK_LAUNCH8\",\n    \"DOM_VK_XF86XK_LAUNCH9\",\n    \"DOM_VK_XF86XK_LAUNCH_A\",\n    \"DOM_VK_XF86XK_LAUNCH_B\",\n    \"DOM_VK_XF86XK_LAUNCH_C\",\n    \"DOM_VK_XF86XK_LAUNCH_D\",\n    \"DOM_VK_XF86XK_LAUNCH_E\",\n    \"DOM_VK_XF86XK_LAUNCH_F\",\n    \"DOM_VK_XF86XK_LIGHT_BULB\",\n    \"DOM_VK_XF86XK_LOG_OFF\",\n    \"DOM_VK_XF86XK_MAIL\",\n    \"DOM_VK_XF86XK_MAIL_FORWARD\",\n    \"DOM_VK_XF86XK_MARKET\",\n    \"DOM_VK_XF86XK_MEETING\",\n    \"DOM_VK_XF86XK_MEMO\",\n    \"DOM_VK_XF86XK_MENU_KB\",\n    \"DOM_VK_XF86XK_MENU_PB\",\n    \"DOM_VK_XF86XK_MESSENGER\",\n    \"DOM_VK_XF86XK_MON_BRIGHTNESS_DOWN\",\n    \"DOM_VK_XF86XK_MON_BRIGHTNESS_UP\",\n    \"DOM_VK_XF86XK_MUSIC\",\n    \"DOM_VK_XF86XK_MY_COMPUTER\",\n    \"DOM_VK_XF86XK_MY_SITES\",\n    \"DOM_VK_XF86XK_NEW\",\n    \"DOM_VK_XF86XK_NEWS\",\n    \"DOM_VK_XF86XK_OFFICE_HOME\",\n    \"DOM_VK_XF86XK_OPEN\",\n    \"DOM_VK_XF86XK_OPEN_URL\",\n    \"DOM_VK_XF86XK_OPTION\",\n    \"DOM_VK_XF86XK_PASTE\",\n    \"DOM_VK_XF86XK_PHONE\",\n    \"DOM_VK_XF86XK_PICTURES\",\n    \"DOM_VK_XF86XK_POWER_DOWN\",\n    \"DOM_VK_XF86XK_POWER_OFF\",\n    \"DOM_VK_XF86XK_RED\",\n    \"DOM_VK_XF86XK_REFRESH\",\n    \"DOM_VK_XF86XK_RELOAD\",\n    \"DOM_VK_XF86XK_REPLY\",\n    \"DOM_VK_XF86XK_ROCKER_DOWN\",\n    \"DOM_VK_XF86XK_ROCKER_ENTER\",\n    \"DOM_VK_XF86XK_ROCKER_UP\",\n    \"DOM_VK_XF86XK_ROTATE_WINDOWS\",\n    \"DOM_VK_XF86XK_ROTATION_KB\",\n    \"DOM_VK_XF86XK_ROTATION_PB\",\n    \"DOM_VK_XF86XK_SAVE\",\n    \"DOM_VK_XF86XK_SCREEN_SAVER\",\n    \"DOM_VK_XF86XK_SCROLL_CLICK\",\n    \"DOM_VK_XF86XK_SCROLL_DOWN\",\n    \"DOM_VK_XF86XK_SCROLL_UP\",\n    \"DOM_VK_XF86XK_SEARCH\",\n    \"DOM_VK_XF86XK_SEND\",\n    \"DOM_VK_XF86XK_SHOP\",\n    \"DOM_VK_XF86XK_SPELL\",\n    \"DOM_VK_XF86XK_SPLIT_SCREEN\",\n    \"DOM_VK_XF86XK_STANDBY\",\n    \"DOM_VK_XF86XK_START\",\n    \"DOM_VK_XF86XK_STOP\",\n    \"DOM_VK_XF86XK_SUBTITLE\",\n    \"DOM_VK_XF86XK_SUPPORT\",\n    \"DOM_VK_XF86XK_SUSPEND\",\n    \"DOM_VK_XF86XK_TASK_PANE\",\n    \"DOM_VK_XF86XK_TERMINAL\",\n    \"DOM_VK_XF86XK_TIME\",\n    \"DOM_VK_XF86XK_TOOLS\",\n    \"DOM_VK_XF86XK_TOP_MENU\",\n    \"DOM_VK_XF86XK_TO_DO_LIST\",\n    \"DOM_VK_XF86XK_TRAVEL\",\n    \"DOM_VK_XF86XK_USER1KB\",\n    \"DOM_VK_XF86XK_USER2KB\",\n    \"DOM_VK_XF86XK_USER_PB\",\n    \"DOM_VK_XF86XK_UWB\",\n    \"DOM_VK_XF86XK_VENDOR_HOME\",\n    \"DOM_VK_XF86XK_VIDEO\",\n    \"DOM_VK_XF86XK_VIEW\",\n    \"DOM_VK_XF86XK_WAKE_UP\",\n    \"DOM_VK_XF86XK_WEB_CAM\",\n    \"DOM_VK_XF86XK_WHEEL_BUTTON\",\n    \"DOM_VK_XF86XK_WLAN\",\n    \"DOM_VK_XF86XK_WORD\",\n    \"DOM_VK_XF86XK_WWW\",\n    \"DOM_VK_XF86XK_XFER\",\n    \"DOM_VK_XF86XK_YELLOW\",\n    \"DOM_VK_XF86XK_ZOOM_IN\",\n    \"DOM_VK_XF86XK_ZOOM_OUT\",\n    \"DOM_VK_Y\",\n    \"DOM_VK_Z\",\n    \"DOM_VK_ZOOM\",\n    \"DONE\",\n    \"DONT_CARE\",\n    \"DOWNLOADING\",\n    \"DRAGDROP\",\n    \"DST_ALPHA\",\n    \"DST_COLOR\",\n    \"DYNAMIC_DRAW\",\n    \"DataChannel\",\n    \"DataTransfer\",\n    \"DataTransferItem\",\n    \"DataTransferItemList\",\n    \"DataView\",\n    \"Date\",\n    \"DateTimeFormat\",\n    \"DelayNode\",\n    \"DesktopNotification\",\n    \"DesktopNotificationCenter\",\n    \"DeviceLightEvent\",\n    \"DeviceMotionEvent\",\n    \"DeviceOrientationEvent\",\n    \"DeviceProximityEvent\",\n    \"DeviceStorage\",\n    \"DeviceStorageChangeEvent\",\n    \"Document\",\n    \"DocumentFragment\",\n    \"DocumentType\",\n    \"DragEvent\",\n    \"DynamicsCompressorNode\",\n    \"E\",\n    \"ELEMENT_ARRAY_BUFFER\",\n    \"ELEMENT_ARRAY_BUFFER_BINDING\",\n    \"ELEMENT_NODE\",\n    \"EMPTY\",\n    \"ENCODING_ERR\",\n    \"ENDED\",\n    \"END_TO_END\",\n    \"END_TO_START\",\n    \"ENTITY_NODE\",\n    \"ENTITY_REFERENCE_NODE\",\n    \"EPSILON\",\n    \"EQUAL\",\n    \"EQUALPOWER\",\n    \"ERROR\",\n    \"EXPONENTIAL_DISTANCE\",\n    \"Element\",\n    \"ElementQuery\",\n    \"Entity\",\n    \"EntityReference\",\n    \"Error\",\n    \"ErrorEvent\",\n    \"EvalError\",\n    \"Event\",\n    \"EventException\",\n    \"EventSource\",\n    \"EventTarget\",\n    \"External\",\n    \"FASTEST\",\n    \"FIDOSDK\",\n    \"FILTER_ACCEPT\",\n    \"FILTER_INTERRUPT\",\n    \"FILTER_REJECT\",\n    \"FILTER_SKIP\",\n    \"FINISHED_STATE\",\n    \"FIRST_ORDERED_NODE_TYPE\",\n    \"FLOAT\",\n    \"FLOAT_MAT2\",\n    \"FLOAT_MAT3\",\n    \"FLOAT_MAT4\",\n    \"FLOAT_VEC2\",\n    \"FLOAT_VEC3\",\n    \"FLOAT_VEC4\",\n    \"FOCUS\",\n    \"FONT_FACE_RULE\",\n    \"FONT_FEATURE_VALUES_RULE\",\n    \"FRAGMENT_SHADER\",\n    \"FRAGMENT_SHADER_DERIVATIVE_HINT_OES\",\n    \"FRAMEBUFFER\",\n    \"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\",\n    \"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\",\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\",\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\",\n    \"FRAMEBUFFER_BINDING\",\n    \"FRAMEBUFFER_COMPLETE\",\n    \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\",\n    \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\",\n    \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\",\n    \"FRAMEBUFFER_UNSUPPORTED\",\n    \"FRONT\",\n    \"FRONT_AND_BACK\",\n    \"FRONT_FACE\",\n    \"FUNC_ADD\",\n    \"FUNC_REVERSE_SUBTRACT\",\n    \"FUNC_SUBTRACT\",\n    \"Feed\",\n    \"FeedEntry\",\n    \"File\",\n    \"FileError\",\n    \"FileList\",\n    \"FileReader\",\n    \"FindInPage\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"FocusEvent\",\n    \"FontFace\",\n    \"FormData\",\n    \"Function\",\n    \"GENERATE_MIPMAP_HINT\",\n    \"GEQUAL\",\n    \"GREATER\",\n    \"GREEN_BITS\",\n    \"GainNode\",\n    \"Gamepad\",\n    \"GamepadButton\",\n    \"GamepadEvent\",\n    \"GestureEvent\",\n    \"HAVE_CURRENT_DATA\",\n    \"HAVE_ENOUGH_DATA\",\n    \"HAVE_FUTURE_DATA\",\n    \"HAVE_METADATA\",\n    \"HAVE_NOTHING\",\n    \"HEADERS_RECEIVED\",\n    \"HIDDEN\",\n    \"HIERARCHY_REQUEST_ERR\",\n    \"HIGHPASS\",\n    \"HIGHSHELF\",\n    \"HIGH_FLOAT\",\n    \"HIGH_INT\",\n    \"HORIZONTAL\",\n    \"HORIZONTAL_AXIS\",\n    \"HRTF\",\n    \"HTMLAllCollection\",\n    \"HTMLAnchorElement\",\n    \"HTMLAppletElement\",\n    \"HTMLAreaElement\",\n    \"HTMLAudioElement\",\n    \"HTMLBRElement\",\n    \"HTMLBaseElement\",\n    \"HTMLBaseFontElement\",\n    \"HTMLBlockquoteElement\",\n    \"HTMLBodyElement\",\n    \"HTMLButtonElement\",\n    \"HTMLCanvasElement\",\n    \"HTMLCollection\",\n    \"HTMLCommandElement\",\n    \"HTMLContentElement\",\n    \"HTMLDListElement\",\n    \"HTMLDataElement\",\n    \"HTMLDataListElement\",\n    \"HTMLDetailsElement\",\n    \"HTMLDialogElement\",\n    \"HTMLDirectoryElement\",\n    \"HTMLDivElement\",\n    \"HTMLDocument\",\n    \"HTMLElement\",\n    \"HTMLEmbedElement\",\n    \"HTMLFieldSetElement\",\n    \"HTMLFontElement\",\n    \"HTMLFormControlsCollection\",\n    \"HTMLFormElement\",\n    \"HTMLFrameElement\",\n    \"HTMLFrameSetElement\",\n    \"HTMLHRElement\",\n    \"HTMLHeadElement\",\n    \"HTMLHeadingElement\",\n    \"HTMLHtmlElement\",\n    \"HTMLIFrameElement\",\n    \"HTMLImageElement\",\n    \"HTMLInputElement\",\n    \"HTMLIsIndexElement\",\n    \"HTMLKeygenElement\",\n    \"HTMLLIElement\",\n    \"HTMLLabelElement\",\n    \"HTMLLegendElement\",\n    \"HTMLLinkElement\",\n    \"HTMLMapElement\",\n    \"HTMLMarqueeElement\",\n    \"HTMLMediaElement\",\n    \"HTMLMenuElement\",\n    \"HTMLMenuItemElement\",\n    \"HTMLMetaElement\",\n    \"HTMLMeterElement\",\n    \"HTMLModElement\",\n    \"HTMLOListElement\",\n    \"HTMLObjectElement\",\n    \"HTMLOptGroupElement\",\n    \"HTMLOptionElement\",\n    \"HTMLOptionsCollection\",\n    \"HTMLOutputElement\",\n    \"HTMLParagraphElement\",\n    \"HTMLParamElement\",\n    \"HTMLPictureElement\",\n    \"HTMLPreElement\",\n    \"HTMLProgressElement\",\n    \"HTMLPropertiesCollection\",\n    \"HTMLQuoteElement\",\n    \"HTMLScriptElement\",\n    \"HTMLSelectElement\",\n    \"HTMLShadowElement\",\n    \"HTMLSourceElement\",\n    \"HTMLSpanElement\",\n    \"HTMLStyleElement\",\n    \"HTMLTableCaptionElement\",\n    \"HTMLTableCellElement\",\n    \"HTMLTableColElement\",\n    \"HTMLTableElement\",\n    \"HTMLTableRowElement\",\n    \"HTMLTableSectionElement\",\n    \"HTMLTemplateElement\",\n    \"HTMLTextAreaElement\",\n    \"HTMLTimeElement\",\n    \"HTMLTitleElement\",\n    \"HTMLTrackElement\",\n    \"HTMLUListElement\",\n    \"HTMLUnknownElement\",\n    \"HTMLVideoElement\",\n    \"HashChangeEvent\",\n    \"Headers\",\n    \"History\",\n    \"ICE_CHECKING\",\n    \"ICE_CLOSED\",\n    \"ICE_COMPLETED\",\n    \"ICE_CONNECTED\",\n    \"ICE_FAILED\",\n    \"ICE_GATHERING\",\n    \"ICE_WAITING\",\n    \"IDBCursor\",\n    \"IDBCursorWithValue\",\n    \"IDBDatabase\",\n    \"IDBDatabaseException\",\n    \"IDBFactory\",\n    \"IDBFileHandle\",\n    \"IDBFileRequest\",\n    \"IDBIndex\",\n    \"IDBKeyRange\",\n    \"IDBMutableFile\",\n    \"IDBObjectStore\",\n    \"IDBOpenDBRequest\",\n    \"IDBRequest\",\n    \"IDBTransaction\",\n    \"IDBVersionChangeEvent\",\n    \"IDLE\",\n    \"IMPLEMENTATION_COLOR_READ_FORMAT\",\n    \"IMPLEMENTATION_COLOR_READ_TYPE\",\n    \"IMPORT_RULE\",\n    \"INCR\",\n    \"INCR_WRAP\",\n    \"INDEX_SIZE_ERR\",\n    \"INT\",\n    \"INT_VEC2\",\n    \"INT_VEC3\",\n    \"INT_VEC4\",\n    \"INUSE_ATTRIBUTE_ERR\",\n    \"INVALID_ACCESS_ERR\",\n    \"INVALID_CHARACTER_ERR\",\n    \"INVALID_ENUM\",\n    \"INVALID_EXPRESSION_ERR\",\n    \"INVALID_FRAMEBUFFER_OPERATION\",\n    \"INVALID_MODIFICATION_ERR\",\n    \"INVALID_NODE_TYPE_ERR\",\n    \"INVALID_OPERATION\",\n    \"INVALID_STATE_ERR\",\n    \"INVALID_VALUE\",\n    \"INVERSE_DISTANCE\",\n    \"INVERT\",\n    \"IceCandidate\",\n    \"Image\",\n    \"ImageBitmap\",\n    \"ImageData\",\n    \"Infinity\",\n    \"InputEvent\",\n    \"InputMethodContext\",\n    \"InstallTrigger\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Int8Array\",\n    \"Intent\",\n    \"InternalError\",\n    \"Intl\",\n    \"IsSearchProviderInstalled\",\n    \"Iterator\",\n    \"JSON\",\n    \"KEEP\",\n    \"KEYDOWN\",\n    \"KEYFRAMES_RULE\",\n    \"KEYFRAME_RULE\",\n    \"KEYPRESS\",\n    \"KEYUP\",\n    \"KeyEvent\",\n    \"KeyboardEvent\",\n    \"LENGTHADJUST_SPACING\",\n    \"LENGTHADJUST_SPACINGANDGLYPHS\",\n    \"LENGTHADJUST_UNKNOWN\",\n    \"LEQUAL\",\n    \"LESS\",\n    \"LINEAR\",\n    \"LINEAR_DISTANCE\",\n    \"LINEAR_MIPMAP_LINEAR\",\n    \"LINEAR_MIPMAP_NEAREST\",\n    \"LINES\",\n    \"LINE_LOOP\",\n    \"LINE_STRIP\",\n    \"LINE_WIDTH\",\n    \"LINK_STATUS\",\n    \"LIVE\",\n    \"LN10\",\n    \"LN2\",\n    \"LOADED\",\n    \"LOADING\",\n    \"LOG10E\",\n    \"LOG2E\",\n    \"LOWPASS\",\n    \"LOWSHELF\",\n    \"LOW_FLOAT\",\n    \"LOW_INT\",\n    \"LSException\",\n    \"LSParserFilter\",\n    \"LUMINANCE\",\n    \"LUMINANCE_ALPHA\",\n    \"LocalMediaStream\",\n    \"Location\",\n    \"MAX_COMBINED_TEXTURE_IMAGE_UNITS\",\n    \"MAX_CUBE_MAP_TEXTURE_SIZE\",\n    \"MAX_FRAGMENT_UNIFORM_VECTORS\",\n    \"MAX_RENDERBUFFER_SIZE\",\n    \"MAX_SAFE_INTEGER\",\n    \"MAX_TEXTURE_IMAGE_UNITS\",\n    \"MAX_TEXTURE_MAX_ANISOTROPY_EXT\",\n    \"MAX_TEXTURE_SIZE\",\n    \"MAX_VALUE\",\n    \"MAX_VARYING_VECTORS\",\n    \"MAX_VERTEX_ATTRIBS\",\n    \"MAX_VERTEX_TEXTURE_IMAGE_UNITS\",\n    \"MAX_VERTEX_UNIFORM_VECTORS\",\n    \"MAX_VIEWPORT_DIMS\",\n    \"MEDIA_ERR_ABORTED\",\n    \"MEDIA_ERR_DECODE\",\n    \"MEDIA_ERR_ENCRYPTED\",\n    \"MEDIA_ERR_NETWORK\",\n    \"MEDIA_ERR_SRC_NOT_SUPPORTED\",\n    \"MEDIA_KEYERR_CLIENT\",\n    \"MEDIA_KEYERR_DOMAIN\",\n    \"MEDIA_KEYERR_HARDWARECHANGE\",\n    \"MEDIA_KEYERR_OUTPUT\",\n    \"MEDIA_KEYERR_SERVICE\",\n    \"MEDIA_KEYERR_UNKNOWN\",\n    \"MEDIA_RULE\",\n    \"MEDIUM_FLOAT\",\n    \"MEDIUM_INT\",\n    \"META_MASK\",\n    \"MIN_SAFE_INTEGER\",\n    \"MIN_VALUE\",\n    \"MIRRORED_REPEAT\",\n    \"MODE_ASYNCHRONOUS\",\n    \"MODE_SYNCHRONOUS\",\n    \"MODIFICATION\",\n    \"MOUSEDOWN\",\n    \"MOUSEDRAG\",\n    \"MOUSEMOVE\",\n    \"MOUSEOUT\",\n    \"MOUSEOVER\",\n    \"MOUSEUP\",\n    \"MOZ_KEYFRAMES_RULE\",\n    \"MOZ_KEYFRAME_RULE\",\n    \"MOZ_SOURCE_CURSOR\",\n    \"MOZ_SOURCE_ERASER\",\n    \"MOZ_SOURCE_KEYBOARD\",\n    \"MOZ_SOURCE_MOUSE\",\n    \"MOZ_SOURCE_PEN\",\n    \"MOZ_SOURCE_TOUCH\",\n    \"MOZ_SOURCE_UNKNOWN\",\n    \"MSGESTURE_FLAG_BEGIN\",\n    \"MSGESTURE_FLAG_CANCEL\",\n    \"MSGESTURE_FLAG_END\",\n    \"MSGESTURE_FLAG_INERTIA\",\n    \"MSGESTURE_FLAG_NONE\",\n    \"MSPOINTER_TYPE_MOUSE\",\n    \"MSPOINTER_TYPE_PEN\",\n    \"MSPOINTER_TYPE_TOUCH\",\n    \"MS_ASYNC_CALLBACK_STATUS_ASSIGN_DELEGATE\",\n    \"MS_ASYNC_CALLBACK_STATUS_CANCEL\",\n    \"MS_ASYNC_CALLBACK_STATUS_CHOOSEANY\",\n    \"MS_ASYNC_CALLBACK_STATUS_ERROR\",\n    \"MS_ASYNC_CALLBACK_STATUS_JOIN\",\n    \"MS_ASYNC_OP_STATUS_CANCELED\",\n    \"MS_ASYNC_OP_STATUS_ERROR\",\n    \"MS_ASYNC_OP_STATUS_SUCCESS\",\n    \"MS_MANIPULATION_STATE_ACTIVE\",\n    \"MS_MANIPULATION_STATE_CANCELLED\",\n    \"MS_MANIPULATION_STATE_COMMITTED\",\n    \"MS_MANIPULATION_STATE_DRAGGING\",\n    \"MS_MANIPULATION_STATE_INERTIA\",\n    \"MS_MANIPULATION_STATE_PRESELECT\",\n    \"MS_MANIPULATION_STATE_SELECTING\",\n    \"MS_MANIPULATION_STATE_STOPPED\",\n    \"MS_MEDIA_ERR_ENCRYPTED\",\n    \"MS_MEDIA_KEYERR_CLIENT\",\n    \"MS_MEDIA_KEYERR_DOMAIN\",\n    \"MS_MEDIA_KEYERR_HARDWARECHANGE\",\n    \"MS_MEDIA_KEYERR_OUTPUT\",\n    \"MS_MEDIA_KEYERR_SERVICE\",\n    \"MS_MEDIA_KEYERR_UNKNOWN\",\n    \"Map\",\n    \"Math\",\n    \"MediaController\",\n    \"MediaDevices\",\n    \"MediaElementAudioSourceNode\",\n    \"MediaEncryptedEvent\",\n    \"MediaError\",\n    \"MediaKeyError\",\n    \"MediaKeyEvent\",\n    \"MediaKeyMessageEvent\",\n    \"MediaKeyNeededEvent\",\n    \"MediaKeySession\",\n    \"MediaKeyStatusMap\",\n    \"MediaKeySystemAccess\",\n    \"MediaKeys\",\n    \"MediaList\",\n    \"MediaQueryList\",\n    \"MediaQueryListEvent\",\n    \"MediaRecorder\",\n    \"MediaSource\",\n    \"MediaStream\",\n    \"MediaStreamAudioDestinationNode\",\n    \"MediaStreamAudioSourceNode\",\n    \"MediaStreamEvent\",\n    \"MediaStreamTrack\",\n    \"MediaStreamTrackEvent\",\n    \"MessageChannel\",\n    \"MessageEvent\",\n    \"MessagePort\",\n    \"Methods\",\n    \"MimeType\",\n    \"MimeTypeArray\",\n    \"MouseEvent\",\n    \"MouseScrollEvent\",\n    \"MozAnimation\",\n    \"MozAnimationDelay\",\n    \"MozAnimationDirection\",\n    \"MozAnimationDuration\",\n    \"MozAnimationFillMode\",\n    \"MozAnimationIterationCount\",\n    \"MozAnimationName\",\n    \"MozAnimationPlayState\",\n    \"MozAnimationTimingFunction\",\n    \"MozAppearance\",\n    \"MozBackfaceVisibility\",\n    \"MozBinding\",\n    \"MozBorderBottomColors\",\n    \"MozBorderEnd\",\n    \"MozBorderEndColor\",\n    \"MozBorderEndStyle\",\n    \"MozBorderEndWidth\",\n    \"MozBorderImage\",\n    \"MozBorderLeftColors\",\n    \"MozBorderRightColors\",\n    \"MozBorderStart\",\n    \"MozBorderStartColor\",\n    \"MozBorderStartStyle\",\n    \"MozBorderStartWidth\",\n    \"MozBorderTopColors\",\n    \"MozBoxAlign\",\n    \"MozBoxDirection\",\n    \"MozBoxFlex\",\n    \"MozBoxOrdinalGroup\",\n    \"MozBoxOrient\",\n    \"MozBoxPack\",\n    \"MozBoxSizing\",\n    \"MozCSSKeyframeRule\",\n    \"MozCSSKeyframesRule\",\n    \"MozColumnCount\",\n    \"MozColumnFill\",\n    \"MozColumnGap\",\n    \"MozColumnRule\",\n    \"MozColumnRuleColor\",\n    \"MozColumnRuleStyle\",\n    \"MozColumnRuleWidth\",\n    \"MozColumnWidth\",\n    \"MozColumns\",\n    \"MozContactChangeEvent\",\n    \"MozFloatEdge\",\n    \"MozFontFeatureSettings\",\n    \"MozFontLanguageOverride\",\n    \"MozForceBrokenImageIcon\",\n    \"MozHyphens\",\n    \"MozImageRegion\",\n    \"MozMarginEnd\",\n    \"MozMarginStart\",\n    \"MozMmsEvent\",\n    \"MozMmsMessage\",\n    \"MozMobileMessageThread\",\n    \"MozOSXFontSmoothing\",\n    \"MozOrient\",\n    \"MozOutlineRadius\",\n    \"MozOutlineRadiusBottomleft\",\n    \"MozOutlineRadiusBottomright\",\n    \"MozOutlineRadiusTopleft\",\n    \"MozOutlineRadiusTopright\",\n    \"MozPaddingEnd\",\n    \"MozPaddingStart\",\n    \"MozPerspective\",\n    \"MozPerspectiveOrigin\",\n    \"MozPowerManager\",\n    \"MozSettingsEvent\",\n    \"MozSmsEvent\",\n    \"MozSmsMessage\",\n    \"MozStackSizing\",\n    \"MozTabSize\",\n    \"MozTextAlignLast\",\n    \"MozTextDecorationColor\",\n    \"MozTextDecorationLine\",\n    \"MozTextDecorationStyle\",\n    \"MozTextSizeAdjust\",\n    \"MozTransform\",\n    \"MozTransformOrigin\",\n    \"MozTransformStyle\",\n    \"MozTransition\",\n    \"MozTransitionDelay\",\n    \"MozTransitionDuration\",\n    \"MozTransitionProperty\",\n    \"MozTransitionTimingFunction\",\n    \"MozUserFocus\",\n    \"MozUserInput\",\n    \"MozUserModify\",\n    \"MozUserSelect\",\n    \"MozWindowDragging\",\n    \"MozWindowShadow\",\n    \"MutationEvent\",\n    \"MutationObserver\",\n    \"MutationRecord\",\n    \"NAMESPACE_ERR\",\n    \"NAMESPACE_RULE\",\n    \"NEAREST\",\n    \"NEAREST_MIPMAP_LINEAR\",\n    \"NEAREST_MIPMAP_NEAREST\",\n    \"NEGATIVE_INFINITY\",\n    \"NETWORK_EMPTY\",\n    \"NETWORK_ERR\",\n    \"NETWORK_IDLE\",\n    \"NETWORK_LOADED\",\n    \"NETWORK_LOADING\",\n    \"NETWORK_NO_SOURCE\",\n    \"NEVER\",\n    \"NEW\",\n    \"NEXT\",\n    \"NEXT_NO_DUPLICATE\",\n    \"NICEST\",\n    \"NODE_AFTER\",\n    \"NODE_BEFORE\",\n    \"NODE_BEFORE_AND_AFTER\",\n    \"NODE_INSIDE\",\n    \"NONE\",\n    \"NON_TRANSIENT_ERR\",\n    \"NOTATION_NODE\",\n    \"NOTCH\",\n    \"NOTEQUAL\",\n    \"NOT_ALLOWED_ERR\",\n    \"NOT_FOUND_ERR\",\n    \"NOT_READABLE_ERR\",\n    \"NOT_SUPPORTED_ERR\",\n    \"NO_DATA_ALLOWED_ERR\",\n    \"NO_ERR\",\n    \"NO_ERROR\",\n    \"NO_MODIFICATION_ALLOWED_ERR\",\n    \"NUMBER_TYPE\",\n    \"NUM_COMPRESSED_TEXTURE_FORMATS\",\n    \"NaN\",\n    \"NamedNodeMap\",\n    \"Navigator\",\n    \"NearbyLinks\",\n    \"NetworkInformation\",\n    \"Node\",\n    \"NodeFilter\",\n    \"NodeIterator\",\n    \"NodeList\",\n    \"Notation\",\n    \"Notification\",\n    \"NotifyPaintEvent\",\n    \"Number\",\n    \"NumberFormat\",\n    \"OBSOLETE\",\n    \"ONE\",\n    \"ONE_MINUS_CONSTANT_ALPHA\",\n    \"ONE_MINUS_CONSTANT_COLOR\",\n    \"ONE_MINUS_DST_ALPHA\",\n    \"ONE_MINUS_DST_COLOR\",\n    \"ONE_MINUS_SRC_ALPHA\",\n    \"ONE_MINUS_SRC_COLOR\",\n    \"OPEN\",\n    \"OPENED\",\n    \"OPENING\",\n    \"ORDERED_NODE_ITERATOR_TYPE\",\n    \"ORDERED_NODE_SNAPSHOT_TYPE\",\n    \"OUT_OF_MEMORY\",\n    \"Object\",\n    \"OfflineAudioCompletionEvent\",\n    \"OfflineAudioContext\",\n    \"OfflineResourceList\",\n    \"Option\",\n    \"OscillatorNode\",\n    \"OverflowEvent\",\n    \"PACK_ALIGNMENT\",\n    \"PAGE_RULE\",\n    \"PARSE_ERR\",\n    \"PATHSEG_ARC_ABS\",\n    \"PATHSEG_ARC_REL\",\n    \"PATHSEG_CLOSEPATH\",\n    \"PATHSEG_CURVETO_CUBIC_ABS\",\n    \"PATHSEG_CURVETO_CUBIC_REL\",\n    \"PATHSEG_CURVETO_CUBIC_SMOOTH_ABS\",\n    \"PATHSEG_CURVETO_CUBIC_SMOOTH_REL\",\n    \"PATHSEG_CURVETO_QUADRATIC_ABS\",\n    \"PATHSEG_CURVETO_QUADRATIC_REL\",\n    \"PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS\",\n    \"PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL\",\n    \"PATHSEG_LINETO_ABS\",\n    \"PATHSEG_LINETO_HORIZONTAL_ABS\",\n    \"PATHSEG_LINETO_HORIZONTAL_REL\",\n    \"PATHSEG_LINETO_REL\",\n    \"PATHSEG_LINETO_VERTICAL_ABS\",\n    \"PATHSEG_LINETO_VERTICAL_REL\",\n    \"PATHSEG_MOVETO_ABS\",\n    \"PATHSEG_MOVETO_REL\",\n    \"PATHSEG_UNKNOWN\",\n    \"PATH_EXISTS_ERR\",\n    \"PEAKING\",\n    \"PERMISSION_DENIED\",\n    \"PERSISTENT\",\n    \"PI\",\n    \"PLAYING_STATE\",\n    \"POINTS\",\n    \"POLYGON_OFFSET_FACTOR\",\n    \"POLYGON_OFFSET_FILL\",\n    \"POLYGON_OFFSET_UNITS\",\n    \"POSITION_UNAVAILABLE\",\n    \"POSITIVE_INFINITY\",\n    \"PREV\",\n    \"PREV_NO_DUPLICATE\",\n    \"PROCESSING_INSTRUCTION_NODE\",\n    \"PageChangeEvent\",\n    \"PageTransitionEvent\",\n    \"PaintRequest\",\n    \"PaintRequestList\",\n    \"PannerNode\",\n    \"Path2D\",\n    \"Performance\",\n    \"PerformanceEntry\",\n    \"PerformanceMark\",\n    \"PerformanceMeasure\",\n    \"PerformanceNavigation\",\n    \"PerformanceResourceTiming\",\n    \"PerformanceTiming\",\n    \"PeriodicWave\",\n    \"Plugin\",\n    \"PluginArray\",\n    \"PopStateEvent\",\n    \"PopupBlockedEvent\",\n    \"ProcessingInstruction\",\n    \"ProgressEvent\",\n    \"Promise\",\n    \"PropertyNodeList\",\n    \"Proxy\",\n    \"PushManager\",\n    \"PushSubscription\",\n    \"Q\",\n    \"QUOTA_ERR\",\n    \"QUOTA_EXCEEDED_ERR\",\n    \"QueryInterface\",\n    \"READ_ONLY\",\n    \"READ_ONLY_ERR\",\n    \"READ_WRITE\",\n    \"RED_BITS\",\n    \"REMOVAL\",\n    \"RENDERBUFFER\",\n    \"RENDERBUFFER_ALPHA_SIZE\",\n    \"RENDERBUFFER_BINDING\",\n    \"RENDERBUFFER_BLUE_SIZE\",\n    \"RENDERBUFFER_DEPTH_SIZE\",\n    \"RENDERBUFFER_GREEN_SIZE\",\n    \"RENDERBUFFER_HEIGHT\",\n    \"RENDERBUFFER_INTERNAL_FORMAT\",\n    \"RENDERBUFFER_RED_SIZE\",\n    \"RENDERBUFFER_STENCIL_SIZE\",\n    \"RENDERBUFFER_WIDTH\",\n    \"RENDERER\",\n    \"RENDERING_INTENT_ABSOLUTE_COLORIMETRIC\",\n    \"RENDERING_INTENT_AUTO\",\n    \"RENDERING_INTENT_PERCEPTUAL\",\n    \"RENDERING_INTENT_RELATIVE_COLORIMETRIC\",\n    \"RENDERING_INTENT_SATURATION\",\n    \"RENDERING_INTENT_UNKNOWN\",\n    \"REPEAT\",\n    \"REPLACE\",\n    \"RGB\",\n    \"RGB565\",\n    \"RGB5_A1\",\n    \"RGBA\",\n    \"RGBA4\",\n    \"RGBColor\",\n    \"ROTATION_CLOCKWISE\",\n    \"ROTATION_COUNTERCLOCKWISE\",\n    \"RTCDataChannelEvent\",\n    \"RTCIceCandidate\",\n    \"RTCPeerConnectionIceEvent\",\n    \"RTCRtpReceiver\",\n    \"RTCRtpSender\",\n    \"RTCSessionDescription\",\n    \"RTCStatsReport\",\n    \"RadioNodeList\",\n    \"Range\",\n    \"RangeError\",\n    \"RangeException\",\n    \"RecordErrorEvent\",\n    \"Rect\",\n    \"ReferenceError\",\n    \"RegExp\",\n    \"Request\",\n    \"Response\",\n    \"SAMPLER_2D\",\n    \"SAMPLER_CUBE\",\n    \"SAMPLES\",\n    \"SAMPLE_ALPHA_TO_COVERAGE\",\n    \"SAMPLE_BUFFERS\",\n    \"SAMPLE_COVERAGE\",\n    \"SAMPLE_COVERAGE_INVERT\",\n    \"SAMPLE_COVERAGE_VALUE\",\n    \"SAWTOOTH\",\n    \"SCHEDULED_STATE\",\n    \"SCISSOR_BOX\",\n    \"SCISSOR_TEST\",\n    \"SCROLL_PAGE_DOWN\",\n    \"SCROLL_PAGE_UP\",\n    \"SDP_ANSWER\",\n    \"SDP_OFFER\",\n    \"SDP_PRANSWER\",\n    \"SECURITY_ERR\",\n    \"SELECT\",\n    \"SERIALIZE_ERR\",\n    \"SEVERITY_ERROR\",\n    \"SEVERITY_FATAL_ERROR\",\n    \"SEVERITY_WARNING\",\n    \"SHADER_COMPILER\",\n    \"SHADER_TYPE\",\n    \"SHADING_LANGUAGE_VERSION\",\n    \"SHIFT_MASK\",\n    \"SHORT\",\n    \"SHOWING\",\n    \"SHOW_ALL\",\n    \"SHOW_ATTRIBUTE\",\n    \"SHOW_CDATA_SECTION\",\n    \"SHOW_COMMENT\",\n    \"SHOW_DOCUMENT\",\n    \"SHOW_DOCUMENT_FRAGMENT\",\n    \"SHOW_DOCUMENT_TYPE\",\n    \"SHOW_ELEMENT\",\n    \"SHOW_ENTITY\",\n    \"SHOW_ENTITY_REFERENCE\",\n    \"SHOW_NOTATION\",\n    \"SHOW_PROCESSING_INSTRUCTION\",\n    \"SHOW_TEXT\",\n    \"SINE\",\n    \"SOUNDFIELD\",\n    \"SQLException\",\n    \"SQRT1_2\",\n    \"SQRT2\",\n    \"SQUARE\",\n    \"SRC_ALPHA\",\n    \"SRC_ALPHA_SATURATE\",\n    \"SRC_COLOR\",\n    \"START_TO_END\",\n    \"START_TO_START\",\n    \"STATIC_DRAW\",\n    \"STENCIL_ATTACHMENT\",\n    \"STENCIL_BACK_FAIL\",\n    \"STENCIL_BACK_FUNC\",\n    \"STENCIL_BACK_PASS_DEPTH_FAIL\",\n    \"STENCIL_BACK_PASS_DEPTH_PASS\",\n    \"STENCIL_BACK_REF\",\n    \"STENCIL_BACK_VALUE_MASK\",\n    \"STENCIL_BACK_WRITEMASK\",\n    \"STENCIL_BITS\",\n    \"STENCIL_BUFFER_BIT\",\n    \"STENCIL_CLEAR_VALUE\",\n    \"STENCIL_FAIL\",\n    \"STENCIL_FUNC\",\n    \"STENCIL_INDEX\",\n    \"STENCIL_INDEX8\",\n    \"STENCIL_PASS_DEPTH_FAIL\",\n    \"STENCIL_PASS_DEPTH_PASS\",\n    \"STENCIL_REF\",\n    \"STENCIL_TEST\",\n    \"STENCIL_VALUE_MASK\",\n    \"STENCIL_WRITEMASK\",\n    \"STREAM_DRAW\",\n    \"STRING_TYPE\",\n    \"STYLE_RULE\",\n    \"SUBPIXEL_BITS\",\n    \"SUPPORTS_RULE\",\n    \"SVGAElement\",\n    \"SVGAltGlyphDefElement\",\n    \"SVGAltGlyphElement\",\n    \"SVGAltGlyphItemElement\",\n    \"SVGAngle\",\n    \"SVGAnimateColorElement\",\n    \"SVGAnimateElement\",\n    \"SVGAnimateMotionElement\",\n    \"SVGAnimateTransformElement\",\n    \"SVGAnimatedAngle\",\n    \"SVGAnimatedBoolean\",\n    \"SVGAnimatedEnumeration\",\n    \"SVGAnimatedInteger\",\n    \"SVGAnimatedLength\",\n    \"SVGAnimatedLengthList\",\n    \"SVGAnimatedNumber\",\n    \"SVGAnimatedNumberList\",\n    \"SVGAnimatedPreserveAspectRatio\",\n    \"SVGAnimatedRect\",\n    \"SVGAnimatedString\",\n    \"SVGAnimatedTransformList\",\n    \"SVGAnimationElement\",\n    \"SVGCircleElement\",\n    \"SVGClipPathElement\",\n    \"SVGColor\",\n    \"SVGComponentTransferFunctionElement\",\n    \"SVGCursorElement\",\n    \"SVGDefsElement\",\n    \"SVGDescElement\",\n    \"SVGDiscardElement\",\n    \"SVGDocument\",\n    \"SVGElement\",\n    \"SVGElementInstance\",\n    \"SVGElementInstanceList\",\n    \"SVGEllipseElement\",\n    \"SVGException\",\n    \"SVGFEBlendElement\",\n    \"SVGFEColorMatrixElement\",\n    \"SVGFEComponentTransferElement\",\n    \"SVGFECompositeElement\",\n    \"SVGFEConvolveMatrixElement\",\n    \"SVGFEDiffuseLightingElement\",\n    \"SVGFEDisplacementMapElement\",\n    \"SVGFEDistantLightElement\",\n    \"SVGFEDropShadowElement\",\n    \"SVGFEFloodElement\",\n    \"SVGFEFuncAElement\",\n    \"SVGFEFuncBElement\",\n    \"SVGFEFuncGElement\",\n    \"SVGFEFuncRElement\",\n    \"SVGFEGaussianBlurElement\",\n    \"SVGFEImageElement\",\n    \"SVGFEMergeElement\",\n    \"SVGFEMergeNodeElement\",\n    \"SVGFEMorphologyElement\",\n    \"SVGFEOffsetElement\",\n    \"SVGFEPointLightElement\",\n    \"SVGFESpecularLightingElement\",\n    \"SVGFESpotLightElement\",\n    \"SVGFETileElement\",\n    \"SVGFETurbulenceElement\",\n    \"SVGFilterElement\",\n    \"SVGFontElement\",\n    \"SVGFontFaceElement\",\n    \"SVGFontFaceFormatElement\",\n    \"SVGFontFaceNameElement\",\n    \"SVGFontFaceSrcElement\",\n    \"SVGFontFaceUriElement\",\n    \"SVGForeignObjectElement\",\n    \"SVGGElement\",\n    \"SVGGeometryElement\",\n    \"SVGGlyphElement\",\n    \"SVGGlyphRefElement\",\n    \"SVGGradientElement\",\n    \"SVGGraphicsElement\",\n    \"SVGHKernElement\",\n    \"SVGImageElement\",\n    \"SVGLength\",\n    \"SVGLengthList\",\n    \"SVGLineElement\",\n    \"SVGLinearGradientElement\",\n    \"SVGMPathElement\",\n    \"SVGMarkerElement\",\n    \"SVGMaskElement\",\n    \"SVGMatrix\",\n    \"SVGMetadataElement\",\n    \"SVGMissingGlyphElement\",\n    \"SVGNumber\",\n    \"SVGNumberList\",\n    \"SVGPaint\",\n    \"SVGPathElement\",\n    \"SVGPathSeg\",\n    \"SVGPathSegArcAbs\",\n    \"SVGPathSegArcRel\",\n    \"SVGPathSegClosePath\",\n    \"SVGPathSegCurvetoCubicAbs\",\n    \"SVGPathSegCurvetoCubicRel\",\n    \"SVGPathSegCurvetoCubicSmoothAbs\",\n    \"SVGPathSegCurvetoCubicSmoothRel\",\n    \"SVGPathSegCurvetoQuadraticAbs\",\n    \"SVGPathSegCurvetoQuadraticRel\",\n    \"SVGPathSegCurvetoQuadraticSmoothAbs\",\n    \"SVGPathSegCurvetoQuadraticSmoothRel\",\n    \"SVGPathSegLinetoAbs\",\n    \"SVGPathSegLinetoHorizontalAbs\",\n    \"SVGPathSegLinetoHorizontalRel\",\n    \"SVGPathSegLinetoRel\",\n    \"SVGPathSegLinetoVerticalAbs\",\n    \"SVGPathSegLinetoVerticalRel\",\n    \"SVGPathSegList\",\n    \"SVGPathSegMovetoAbs\",\n    \"SVGPathSegMovetoRel\",\n    \"SVGPatternElement\",\n    \"SVGPoint\",\n    \"SVGPointList\",\n    \"SVGPolygonElement\",\n    \"SVGPolylineElement\",\n    \"SVGPreserveAspectRatio\",\n    \"SVGRadialGradientElement\",\n    \"SVGRect\",\n    \"SVGRectElement\",\n    \"SVGRenderingIntent\",\n    \"SVGSVGElement\",\n    \"SVGScriptElement\",\n    \"SVGSetElement\",\n    \"SVGStopElement\",\n    \"SVGStringList\",\n    \"SVGStyleElement\",\n    \"SVGSwitchElement\",\n    \"SVGSymbolElement\",\n    \"SVGTRefElement\",\n    \"SVGTSpanElement\",\n    \"SVGTextContentElement\",\n    \"SVGTextElement\",\n    \"SVGTextPathElement\",\n    \"SVGTextPositioningElement\",\n    \"SVGTitleElement\",\n    \"SVGTransform\",\n    \"SVGTransformList\",\n    \"SVGUnitTypes\",\n    \"SVGUseElement\",\n    \"SVGVKernElement\",\n    \"SVGViewElement\",\n    \"SVGViewSpec\",\n    \"SVGZoomAndPan\",\n    \"SVGZoomEvent\",\n    \"SVG_ANGLETYPE_DEG\",\n    \"SVG_ANGLETYPE_GRAD\",\n    \"SVG_ANGLETYPE_RAD\",\n    \"SVG_ANGLETYPE_UNKNOWN\",\n    \"SVG_ANGLETYPE_UNSPECIFIED\",\n    \"SVG_CHANNEL_A\",\n    \"SVG_CHANNEL_B\",\n    \"SVG_CHANNEL_G\",\n    \"SVG_CHANNEL_R\",\n    \"SVG_CHANNEL_UNKNOWN\",\n    \"SVG_COLORTYPE_CURRENTCOLOR\",\n    \"SVG_COLORTYPE_RGBCOLOR\",\n    \"SVG_COLORTYPE_RGBCOLOR_ICCCOLOR\",\n    \"SVG_COLORTYPE_UNKNOWN\",\n    \"SVG_EDGEMODE_DUPLICATE\",\n    \"SVG_EDGEMODE_NONE\",\n    \"SVG_EDGEMODE_UNKNOWN\",\n    \"SVG_EDGEMODE_WRAP\",\n    \"SVG_FEBLEND_MODE_COLOR\",\n    \"SVG_FEBLEND_MODE_COLOR_BURN\",\n    \"SVG_FEBLEND_MODE_COLOR_DODGE\",\n    \"SVG_FEBLEND_MODE_DARKEN\",\n    \"SVG_FEBLEND_MODE_DIFFERENCE\",\n    \"SVG_FEBLEND_MODE_EXCLUSION\",\n    \"SVG_FEBLEND_MODE_HARD_LIGHT\",\n    \"SVG_FEBLEND_MODE_HUE\",\n    \"SVG_FEBLEND_MODE_LIGHTEN\",\n    \"SVG_FEBLEND_MODE_LUMINOSITY\",\n    \"SVG_FEBLEND_MODE_MULTIPLY\",\n    \"SVG_FEBLEND_MODE_NORMAL\",\n    \"SVG_FEBLEND_MODE_OVERLAY\",\n    \"SVG_FEBLEND_MODE_SATURATION\",\n    \"SVG_FEBLEND_MODE_SCREEN\",\n    \"SVG_FEBLEND_MODE_SOFT_LIGHT\",\n    \"SVG_FEBLEND_MODE_UNKNOWN\",\n    \"SVG_FECOLORMATRIX_TYPE_HUEROTATE\",\n    \"SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA\",\n    \"SVG_FECOLORMATRIX_TYPE_MATRIX\",\n    \"SVG_FECOLORMATRIX_TYPE_SATURATE\",\n    \"SVG_FECOLORMATRIX_TYPE_UNKNOWN\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_GAMMA\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_LINEAR\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_TABLE\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN\",\n    \"SVG_FECOMPOSITE_OPERATOR_ARITHMETIC\",\n    \"SVG_FECOMPOSITE_OPERATOR_ATOP\",\n    \"SVG_FECOMPOSITE_OPERATOR_IN\",\n    \"SVG_FECOMPOSITE_OPERATOR_OUT\",\n    \"SVG_FECOMPOSITE_OPERATOR_OVER\",\n    \"SVG_FECOMPOSITE_OPERATOR_UNKNOWN\",\n    \"SVG_FECOMPOSITE_OPERATOR_XOR\",\n    \"SVG_INVALID_VALUE_ERR\",\n    \"SVG_LENGTHTYPE_CM\",\n    \"SVG_LENGTHTYPE_EMS\",\n    \"SVG_LENGTHTYPE_EXS\",\n    \"SVG_LENGTHTYPE_IN\",\n    \"SVG_LENGTHTYPE_MM\",\n    \"SVG_LENGTHTYPE_NUMBER\",\n    \"SVG_LENGTHTYPE_PC\",\n    \"SVG_LENGTHTYPE_PERCENTAGE\",\n    \"SVG_LENGTHTYPE_PT\",\n    \"SVG_LENGTHTYPE_PX\",\n    \"SVG_LENGTHTYPE_UNKNOWN\",\n    \"SVG_MARKERUNITS_STROKEWIDTH\",\n    \"SVG_MARKERUNITS_UNKNOWN\",\n    \"SVG_MARKERUNITS_USERSPACEONUSE\",\n    \"SVG_MARKER_ORIENT_ANGLE\",\n    \"SVG_MARKER_ORIENT_AUTO\",\n    \"SVG_MARKER_ORIENT_UNKNOWN\",\n    \"SVG_MASKTYPE_ALPHA\",\n    \"SVG_MASKTYPE_LUMINANCE\",\n    \"SVG_MATRIX_NOT_INVERTABLE\",\n    \"SVG_MEETORSLICE_MEET\",\n    \"SVG_MEETORSLICE_SLICE\",\n    \"SVG_MEETORSLICE_UNKNOWN\",\n    \"SVG_MORPHOLOGY_OPERATOR_DILATE\",\n    \"SVG_MORPHOLOGY_OPERATOR_ERODE\",\n    \"SVG_MORPHOLOGY_OPERATOR_UNKNOWN\",\n    \"SVG_PAINTTYPE_CURRENTCOLOR\",\n    \"SVG_PAINTTYPE_NONE\",\n    \"SVG_PAINTTYPE_RGBCOLOR\",\n    \"SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR\",\n    \"SVG_PAINTTYPE_UNKNOWN\",\n    \"SVG_PAINTTYPE_URI\",\n    \"SVG_PAINTTYPE_URI_CURRENTCOLOR\",\n    \"SVG_PAINTTYPE_URI_NONE\",\n    \"SVG_PAINTTYPE_URI_RGBCOLOR\",\n    \"SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR\",\n    \"SVG_PRESERVEASPECTRATIO_NONE\",\n    \"SVG_PRESERVEASPECTRATIO_UNKNOWN\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMIN\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMIN\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMIN\",\n    \"SVG_SPREADMETHOD_PAD\",\n    \"SVG_SPREADMETHOD_REFLECT\",\n    \"SVG_SPREADMETHOD_REPEAT\",\n    \"SVG_SPREADMETHOD_UNKNOWN\",\n    \"SVG_STITCHTYPE_NOSTITCH\",\n    \"SVG_STITCHTYPE_STITCH\",\n    \"SVG_STITCHTYPE_UNKNOWN\",\n    \"SVG_TRANSFORM_MATRIX\",\n    \"SVG_TRANSFORM_ROTATE\",\n    \"SVG_TRANSFORM_SCALE\",\n    \"SVG_TRANSFORM_SKEWX\",\n    \"SVG_TRANSFORM_SKEWY\",\n    \"SVG_TRANSFORM_TRANSLATE\",\n    \"SVG_TRANSFORM_UNKNOWN\",\n    \"SVG_TURBULENCE_TYPE_FRACTALNOISE\",\n    \"SVG_TURBULENCE_TYPE_TURBULENCE\",\n    \"SVG_TURBULENCE_TYPE_UNKNOWN\",\n    \"SVG_UNIT_TYPE_OBJECTBOUNDINGBOX\",\n    \"SVG_UNIT_TYPE_UNKNOWN\",\n    \"SVG_UNIT_TYPE_USERSPACEONUSE\",\n    \"SVG_WRONG_TYPE_ERR\",\n    \"SVG_ZOOMANDPAN_DISABLE\",\n    \"SVG_ZOOMANDPAN_MAGNIFY\",\n    \"SVG_ZOOMANDPAN_UNKNOWN\",\n    \"SYNTAX_ERR\",\n    \"SavedPages\",\n    \"Screen\",\n    \"ScreenOrientation\",\n    \"Script\",\n    \"ScriptProcessorNode\",\n    \"ScrollAreaEvent\",\n    \"SecurityPolicyViolationEvent\",\n    \"Selection\",\n    \"ServiceWorker\",\n    \"ServiceWorkerContainer\",\n    \"ServiceWorkerRegistration\",\n    \"SessionDescription\",\n    \"Set\",\n    \"ShadowRoot\",\n    \"SharedWorker\",\n    \"SimpleGestureEvent\",\n    \"SpeechSynthesisEvent\",\n    \"SpeechSynthesisUtterance\",\n    \"StopIteration\",\n    \"Storage\",\n    \"StorageEvent\",\n    \"String\",\n    \"StyleSheet\",\n    \"StyleSheetList\",\n    \"SubtleCrypto\",\n    \"Symbol\",\n    \"SyntaxError\",\n    \"TEMPORARY\",\n    \"TEXTPATH_METHODTYPE_ALIGN\",\n    \"TEXTPATH_METHODTYPE_STRETCH\",\n    \"TEXTPATH_METHODTYPE_UNKNOWN\",\n    \"TEXTPATH_SPACINGTYPE_AUTO\",\n    \"TEXTPATH_SPACINGTYPE_EXACT\",\n    \"TEXTPATH_SPACINGTYPE_UNKNOWN\",\n    \"TEXTURE\",\n    \"TEXTURE0\",\n    \"TEXTURE1\",\n    \"TEXTURE10\",\n    \"TEXTURE11\",\n    \"TEXTURE12\",\n    \"TEXTURE13\",\n    \"TEXTURE14\",\n    \"TEXTURE15\",\n    \"TEXTURE16\",\n    \"TEXTURE17\",\n    \"TEXTURE18\",\n    \"TEXTURE19\",\n    \"TEXTURE2\",\n    \"TEXTURE20\",\n    \"TEXTURE21\",\n    \"TEXTURE22\",\n    \"TEXTURE23\",\n    \"TEXTURE24\",\n    \"TEXTURE25\",\n    \"TEXTURE26\",\n    \"TEXTURE27\",\n    \"TEXTURE28\",\n    \"TEXTURE29\",\n    \"TEXTURE3\",\n    \"TEXTURE30\",\n    \"TEXTURE31\",\n    \"TEXTURE4\",\n    \"TEXTURE5\",\n    \"TEXTURE6\",\n    \"TEXTURE7\",\n    \"TEXTURE8\",\n    \"TEXTURE9\",\n    \"TEXTURE_2D\",\n    \"TEXTURE_BINDING_2D\",\n    \"TEXTURE_BINDING_CUBE_MAP\",\n    \"TEXTURE_CUBE_MAP\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_X\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Y\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Z\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_X\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_Y\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_Z\",\n    \"TEXTURE_MAG_FILTER\",\n    \"TEXTURE_MAX_ANISOTROPY_EXT\",\n    \"TEXTURE_MIN_FILTER\",\n    \"TEXTURE_WRAP_S\",\n    \"TEXTURE_WRAP_T\",\n    \"TEXT_NODE\",\n    \"TIMEOUT\",\n    \"TIMEOUT_ERR\",\n    \"TOO_LARGE_ERR\",\n    \"TRANSACTION_INACTIVE_ERR\",\n    \"TRIANGLE\",\n    \"TRIANGLES\",\n    \"TRIANGLE_FAN\",\n    \"TRIANGLE_STRIP\",\n    \"TYPE_BACK_FORWARD\",\n    \"TYPE_ERR\",\n    \"TYPE_MISMATCH_ERR\",\n    \"TYPE_NAVIGATE\",\n    \"TYPE_RELOAD\",\n    \"TYPE_RESERVED\",\n    \"Text\",\n    \"TextDecoder\",\n    \"TextEncoder\",\n    \"TextEvent\",\n    \"TextMetrics\",\n    \"TextTrack\",\n    \"TextTrackCue\",\n    \"TextTrackCueList\",\n    \"TextTrackList\",\n    \"TimeEvent\",\n    \"TimeRanges\",\n    \"Touch\",\n    \"TouchEvent\",\n    \"TouchList\",\n    \"TrackEvent\",\n    \"TransitionEvent\",\n    \"TreeWalker\",\n    \"TypeError\",\n    \"UIEvent\",\n    \"UNCACHED\",\n    \"UNKNOWN_ERR\",\n    \"UNKNOWN_RULE\",\n    \"UNMASKED_RENDERER_WEBGL\",\n    \"UNMASKED_VENDOR_WEBGL\",\n    \"UNORDERED_NODE_ITERATOR_TYPE\",\n    \"UNORDERED_NODE_SNAPSHOT_TYPE\",\n    \"UNPACK_ALIGNMENT\",\n    \"UNPACK_COLORSPACE_CONVERSION_WEBGL\",\n    \"UNPACK_FLIP_Y_WEBGL\",\n    \"UNPACK_PREMULTIPLY_ALPHA_WEBGL\",\n    \"UNSCHEDULED_STATE\",\n    \"UNSENT\",\n    \"UNSIGNED_BYTE\",\n    \"UNSIGNED_INT\",\n    \"UNSIGNED_SHORT\",\n    \"UNSIGNED_SHORT_4_4_4_4\",\n    \"UNSIGNED_SHORT_5_5_5_1\",\n    \"UNSIGNED_SHORT_5_6_5\",\n    \"UNSPECIFIED_EVENT_TYPE_ERR\",\n    \"UPDATEREADY\",\n    \"URIError\",\n    \"URL\",\n    \"URLSearchParams\",\n    \"URLUnencoded\",\n    \"URL_MISMATCH_ERR\",\n    \"UTC\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"UserMessageHandler\",\n    \"UserMessageHandlersNamespace\",\n    \"UserProximityEvent\",\n    \"VALIDATE_STATUS\",\n    \"VALIDATION_ERR\",\n    \"VARIABLES_RULE\",\n    \"VENDOR\",\n    \"VERSION\",\n    \"VERSION_CHANGE\",\n    \"VERSION_ERR\",\n    \"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\",\n    \"VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE\",\n    \"VERTEX_ATTRIB_ARRAY_ENABLED\",\n    \"VERTEX_ATTRIB_ARRAY_NORMALIZED\",\n    \"VERTEX_ATTRIB_ARRAY_POINTER\",\n    \"VERTEX_ATTRIB_ARRAY_SIZE\",\n    \"VERTEX_ATTRIB_ARRAY_STRIDE\",\n    \"VERTEX_ATTRIB_ARRAY_TYPE\",\n    \"VERTEX_SHADER\",\n    \"VERTICAL\",\n    \"VERTICAL_AXIS\",\n    \"VER_ERR\",\n    \"VIEWPORT\",\n    \"VIEWPORT_RULE\",\n    \"VTTCue\",\n    \"VTTRegion\",\n    \"ValidityState\",\n    \"VideoStreamTrack\",\n    \"WEBKIT_FILTER_RULE\",\n    \"WEBKIT_KEYFRAMES_RULE\",\n    \"WEBKIT_KEYFRAME_RULE\",\n    \"WEBKIT_REGION_RULE\",\n    \"WRONG_DOCUMENT_ERR\",\n    \"WaveShaperNode\",\n    \"WeakMap\",\n    \"WeakSet\",\n    \"WebGLActiveInfo\",\n    \"WebGLBuffer\",\n    \"WebGLContextEvent\",\n    \"WebGLFramebuffer\",\n    \"WebGLProgram\",\n    \"WebGLRenderbuffer\",\n    \"WebGLRenderingContext\",\n    \"WebGLShader\",\n    \"WebGLShaderPrecisionFormat\",\n    \"WebGLTexture\",\n    \"WebGLUniformLocation\",\n    \"WebGLVertexArray\",\n    \"WebKitAnimationEvent\",\n    \"WebKitBlobBuilder\",\n    \"WebKitCSSFilterRule\",\n    \"WebKitCSSFilterValue\",\n    \"WebKitCSSKeyframeRule\",\n    \"WebKitCSSKeyframesRule\",\n    \"WebKitCSSMatrix\",\n    \"WebKitCSSRegionRule\",\n    \"WebKitCSSTransformValue\",\n    \"WebKitDataCue\",\n    \"WebKitGamepad\",\n    \"WebKitMediaKeyError\",\n    \"WebKitMediaKeyMessageEvent\",\n    \"WebKitMediaKeySession\",\n    \"WebKitMediaKeys\",\n    \"WebKitMediaSource\",\n    \"WebKitMutationObserver\",\n    \"WebKitNamespace\",\n    \"WebKitPlaybackTargetAvailabilityEvent\",\n    \"WebKitPoint\",\n    \"WebKitShadowRoot\",\n    \"WebKitSourceBuffer\",\n    \"WebKitSourceBufferList\",\n    \"WebKitTransitionEvent\",\n    \"WebSocket\",\n    \"WheelEvent\",\n    \"Window\",\n    \"Worker\",\n    \"XMLDocument\",\n    \"XMLHttpRequest\",\n    \"XMLHttpRequestEventTarget\",\n    \"XMLHttpRequestException\",\n    \"XMLHttpRequestProgressEvent\",\n    \"XMLHttpRequestUpload\",\n    \"XMLSerializer\",\n    \"XMLStylesheetProcessingInstruction\",\n    \"XPathEvaluator\",\n    \"XPathException\",\n    \"XPathExpression\",\n    \"XPathNSResolver\",\n    \"XPathResult\",\n    \"XSLTProcessor\",\n    \"ZERO\",\n    \"_XD0M_\",\n    \"_YD0M_\",\n    \"__defineGetter__\",\n    \"__defineSetter__\",\n    \"__lookupGetter__\",\n    \"__lookupSetter__\",\n    \"__opera\",\n    \"__proto__\",\n    \"_browserjsran\",\n    \"a\",\n    \"aLink\",\n    \"abbr\",\n    \"abort\",\n    \"abs\",\n    \"absolute\",\n    \"acceleration\",\n    \"accelerationIncludingGravity\",\n    \"accelerator\",\n    \"accept\",\n    \"acceptCharset\",\n    \"acceptNode\",\n    \"accessKey\",\n    \"accessKeyLabel\",\n    \"accuracy\",\n    \"acos\",\n    \"acosh\",\n    \"action\",\n    \"actionURL\",\n    \"active\",\n    \"activeCues\",\n    \"activeElement\",\n    \"activeSourceBuffers\",\n    \"activeSourceCount\",\n    \"activeTexture\",\n    \"add\",\n    \"addBehavior\",\n    \"addCandidate\",\n    \"addColorStop\",\n    \"addCue\",\n    \"addElement\",\n    \"addEventListener\",\n    \"addFilter\",\n    \"addFromString\",\n    \"addFromUri\",\n    \"addIceCandidate\",\n    \"addImport\",\n    \"addListener\",\n    \"addNamed\",\n    \"addPageRule\",\n    \"addPath\",\n    \"addPointer\",\n    \"addRange\",\n    \"addRegion\",\n    \"addRule\",\n    \"addSearchEngine\",\n    \"addSourceBuffer\",\n    \"addStream\",\n    \"addTextTrack\",\n    \"addTrack\",\n    \"addWakeLockListener\",\n    \"addedNodes\",\n    \"additionalName\",\n    \"additiveSymbols\",\n    \"addons\",\n    \"adoptNode\",\n    \"adr\",\n    \"advance\",\n    \"alert\",\n    \"algorithm\",\n    \"align\",\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"alignContent\",\n    \"alignItems\",\n    \"alignSelf\",\n    \"alignmentBaseline\",\n    \"alinkColor\",\n    \"all\",\n    \"allowFullscreen\",\n    \"allowedDirections\",\n    \"alpha\",\n    \"alt\",\n    \"altGraphKey\",\n    \"altHtml\",\n    \"altKey\",\n    \"altLeft\",\n    \"altitude\",\n    \"altitudeAccuracy\",\n    \"amplitude\",\n    \"ancestorOrigins\",\n    \"anchor\",\n    \"anchorNode\",\n    \"anchorOffset\",\n    \"anchors\",\n    \"angle\",\n    \"animVal\",\n    \"animate\",\n    \"animatedInstanceRoot\",\n    \"animatedNormalizedPathSegList\",\n    \"animatedPathSegList\",\n    \"animatedPoints\",\n    \"animation\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-timing-function\",\n    \"animationDelay\",\n    \"animationDirection\",\n    \"animationDuration\",\n    \"animationFillMode\",\n    \"animationIterationCount\",\n    \"animationName\",\n    \"animationPlayState\",\n    \"animationStartTime\",\n    \"animationTimingFunction\",\n    \"animationsPaused\",\n    \"anniversary\",\n    \"app\",\n    \"appCodeName\",\n    \"appMinorVersion\",\n    \"appName\",\n    \"appNotifications\",\n    \"appVersion\",\n    \"append\",\n    \"appendBuffer\",\n    \"appendChild\",\n    \"appendData\",\n    \"appendItem\",\n    \"appendMedium\",\n    \"appendNamed\",\n    \"appendRule\",\n    \"appendStream\",\n    \"appendWindowEnd\",\n    \"appendWindowStart\",\n    \"applets\",\n    \"applicationCache\",\n    \"apply\",\n    \"applyElement\",\n    \"arc\",\n    \"arcTo\",\n    \"archive\",\n    \"areas\",\n    \"arguments\",\n    \"arrayBuffer\",\n    \"asin\",\n    \"asinh\",\n    \"assert\",\n    \"assign\",\n    \"async\",\n    \"atEnd\",\n    \"atan\",\n    \"atan2\",\n    \"atanh\",\n    \"atob\",\n    \"attachEvent\",\n    \"attachShader\",\n    \"attachShadow\",\n    \"attachments\",\n    \"attack\",\n    \"attrChange\",\n    \"attrName\",\n    \"attributeFilter\",\n    \"attributeName\",\n    \"attributeNamespace\",\n    \"attributeOldValue\",\n    \"attributes\",\n    \"audioTracks\",\n    \"autoIncrement\",\n    \"autobuffer\",\n    \"autocapitalize\",\n    \"autocomplete\",\n    \"autocorrect\",\n    \"autofocus\",\n    \"autoplay\",\n    \"availHeight\",\n    \"availLeft\",\n    \"availTop\",\n    \"availWidth\",\n    \"availability\",\n    \"available\",\n    \"aversion\",\n    \"axes\",\n    \"axis\",\n    \"azimuth\",\n    \"b\",\n    \"back\",\n    \"backface-visibility\",\n    \"backfaceVisibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-repeat\",\n    \"background-size\",\n    \"backgroundAttachment\",\n    \"backgroundBlendMode\",\n    \"backgroundClip\",\n    \"backgroundColor\",\n    \"backgroundImage\",\n    \"backgroundOrigin\",\n    \"backgroundPosition\",\n    \"backgroundPositionX\",\n    \"backgroundPositionY\",\n    \"backgroundRepeat\",\n    \"backgroundSize\",\n    \"badInput\",\n    \"balance\",\n    \"baseFrequencyX\",\n    \"baseFrequencyY\",\n    \"baseNode\",\n    \"baseOffset\",\n    \"baseURI\",\n    \"baseVal\",\n    \"baselineShift\",\n    \"battery\",\n    \"bday\",\n    \"beginElement\",\n    \"beginElementAt\",\n    \"beginPath\",\n    \"behavior\",\n    \"behaviorCookie\",\n    \"behaviorPart\",\n    \"behaviorUrns\",\n    \"beta\",\n    \"bezierCurveTo\",\n    \"bgColor\",\n    \"bgProperties\",\n    \"bias\",\n    \"big\",\n    \"binaryType\",\n    \"bind\",\n    \"bindAttribLocation\",\n    \"bindBuffer\",\n    \"bindFramebuffer\",\n    \"bindRenderbuffer\",\n    \"bindTexture\",\n    \"blendColor\",\n    \"blendEquation\",\n    \"blendEquationSeparate\",\n    \"blendFunc\",\n    \"blendFuncSeparate\",\n    \"blink\",\n    \"blob\",\n    \"blockDirection\",\n    \"blue\",\n    \"blur\",\n    \"body\",\n    \"bodyUsed\",\n    \"bold\",\n    \"bookmarks\",\n    \"booleanValue\",\n    \"border\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"borderBottom\",\n    \"borderBottomColor\",\n    \"borderBottomLeftRadius\",\n    \"borderBottomRightRadius\",\n    \"borderBottomStyle\",\n    \"borderBottomWidth\",\n    \"borderCollapse\",\n    \"borderColor\",\n    \"borderColorDark\",\n    \"borderColorLight\",\n    \"borderImage\",\n    \"borderImageOutset\",\n    \"borderImageRepeat\",\n    \"borderImageSlice\",\n    \"borderImageSource\",\n    \"borderImageWidth\",\n    \"borderLeft\",\n    \"borderLeftColor\",\n    \"borderLeftStyle\",\n    \"borderLeftWidth\",\n    \"borderRadius\",\n    \"borderRight\",\n    \"borderRightColor\",\n    \"borderRightStyle\",\n    \"borderRightWidth\",\n    \"borderSpacing\",\n    \"borderStyle\",\n    \"borderTop\",\n    \"borderTopColor\",\n    \"borderTopLeftRadius\",\n    \"borderTopRightRadius\",\n    \"borderTopStyle\",\n    \"borderTopWidth\",\n    \"borderWidth\",\n    \"bottom\",\n    \"bottomMargin\",\n    \"bound\",\n    \"boundElements\",\n    \"boundingClientRect\",\n    \"boundingHeight\",\n    \"boundingLeft\",\n    \"boundingTop\",\n    \"boundingWidth\",\n    \"bounds\",\n    \"box-decoration-break\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"boxDecorationBreak\",\n    \"boxShadow\",\n    \"boxSizing\",\n    \"breakAfter\",\n    \"breakBefore\",\n    \"breakInside\",\n    \"browserLanguage\",\n    \"btoa\",\n    \"bubbles\",\n    \"buffer\",\n    \"bufferData\",\n    \"bufferDepth\",\n    \"bufferSize\",\n    \"bufferSubData\",\n    \"buffered\",\n    \"bufferedAmount\",\n    \"buildID\",\n    \"buildNumber\",\n    \"button\",\n    \"buttonID\",\n    \"buttons\",\n    \"byteLength\",\n    \"byteOffset\",\n    \"c\",\n    \"call\",\n    \"caller\",\n    \"canBeFormatted\",\n    \"canBeMounted\",\n    \"canBeShared\",\n    \"canHaveChildren\",\n    \"canHaveHTML\",\n    \"canPlayType\",\n    \"cancel\",\n    \"cancelAnimationFrame\",\n    \"cancelBubble\",\n    \"cancelScheduledValues\",\n    \"cancelable\",\n    \"candidate\",\n    \"canvas\",\n    \"caption\",\n    \"caption-side\",\n    \"captionSide\",\n    \"captureEvents\",\n    \"captureStackTrace\",\n    \"caretPositionFromPoint\",\n    \"caretRangeFromPoint\",\n    \"cast\",\n    \"catch\",\n    \"category\",\n    \"cbrt\",\n    \"cd\",\n    \"ceil\",\n    \"cellIndex\",\n    \"cellPadding\",\n    \"cellSpacing\",\n    \"cells\",\n    \"ch\",\n    \"chOff\",\n    \"chain\",\n    \"challenge\",\n    \"changedTouches\",\n    \"channel\",\n    \"channelCount\",\n    \"channelCountMode\",\n    \"channelInterpretation\",\n    \"char\",\n    \"charAt\",\n    \"charCode\",\n    \"charCodeAt\",\n    \"charIndex\",\n    \"characterSet\",\n    \"characterData\",\n    \"characterDataOldValue\",\n    \"charging\",\n    \"chargingTime\",\n    \"charset\",\n    \"checkEnclosure\",\n    \"checkFramebufferStatus\",\n    \"checkIntersection\",\n    \"checkValidity\",\n    \"checked\",\n    \"childElementCount\",\n    \"childList\",\n    \"childNodes\",\n    \"children\",\n    \"chrome\",\n    \"ciphertext\",\n    \"cite\",\n    \"classList\",\n    \"className\",\n    \"classid\",\n    \"clear\",\n    \"clearAttributes\",\n    \"clearColor\",\n    \"clearData\",\n    \"clearDepth\",\n    \"clearImmediate\",\n    \"clearInterval\",\n    \"clearMarks\",\n    \"clearMeasures\",\n    \"clearParameters\",\n    \"clearRect\",\n    \"clearResourceTimings\",\n    \"clearShadow\",\n    \"clearStencil\",\n    \"clearTimeout\",\n    \"clearWatch\",\n    \"click\",\n    \"clickCount\",\n    \"clientHeight\",\n    \"clientInformation\",\n    \"clientLeft\",\n    \"clientRect\",\n    \"clientRects\",\n    \"clientTop\",\n    \"clientWidth\",\n    \"clientX\",\n    \"clientY\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"clipBottom\",\n    \"clipLeft\",\n    \"clipPath\",\n    \"clipPathUnits\",\n    \"clipRight\",\n    \"clipRule\",\n    \"clipTop\",\n    \"clipboardData\",\n    \"clone\",\n    \"cloneContents\",\n    \"cloneNode\",\n    \"cloneRange\",\n    \"close\",\n    \"closePath\",\n    \"closed\",\n    \"closest\",\n    \"clz\",\n    \"clz32\",\n    \"cmp\",\n    \"code\",\n    \"codeBase\",\n    \"codePointAt\",\n    \"codeType\",\n    \"colSpan\",\n    \"collapse\",\n    \"collapseToEnd\",\n    \"collapseToStart\",\n    \"collapsed\",\n    \"collect\",\n    \"colno\",\n    \"color\",\n    \"color-interpolation\",\n    \"color-interpolation-filters\",\n    \"colorDepth\",\n    \"colorInterpolation\",\n    \"colorInterpolationFilters\",\n    \"colorMask\",\n    \"colorType\",\n    \"cols\",\n    \"columnCount\",\n    \"columnFill\",\n    \"columnGap\",\n    \"columnNumber\",\n    \"columnRule\",\n    \"columnRuleColor\",\n    \"columnRuleStyle\",\n    \"columnRuleWidth\",\n    \"columnSpan\",\n    \"columnWidth\",\n    \"columns\",\n    \"command\",\n    \"commitPreferences\",\n    \"commonAncestorContainer\",\n    \"compact\",\n    \"compareBoundaryPoints\",\n    \"compareDocumentPosition\",\n    \"compareEndPoints\",\n    \"compareNode\",\n    \"comparePoint\",\n    \"compatMode\",\n    \"compatible\",\n    \"compile\",\n    \"compileShader\",\n    \"complete\",\n    \"componentFromPoint\",\n    \"compositionEndOffset\",\n    \"compositionStartOffset\",\n    \"compressedTexImage2D\",\n    \"compressedTexSubImage2D\",\n    \"concat\",\n    \"conditionText\",\n    \"coneInnerAngle\",\n    \"coneOuterAngle\",\n    \"coneOuterGain\",\n    \"confirm\",\n    \"confirmComposition\",\n    \"confirmSiteSpecificTrackingException\",\n    \"confirmWebWideTrackingException\",\n    \"connect\",\n    \"connectEnd\",\n    \"connectStart\",\n    \"connected\",\n    \"connection\",\n    \"connectionSpeed\",\n    \"console\",\n    \"consolidate\",\n    \"constrictionActive\",\n    \"constructor\",\n    \"contactID\",\n    \"contains\",\n    \"containsNode\",\n    \"content\",\n    \"contentDocument\",\n    \"contentEditable\",\n    \"contentOverflow\",\n    \"contentScriptType\",\n    \"contentStyleType\",\n    \"contentType\",\n    \"contentWindow\",\n    \"context\",\n    \"contextMenu\",\n    \"contextmenu\",\n    \"continue\",\n    \"continuous\",\n    \"control\",\n    \"controller\",\n    \"controls\",\n    \"convertToSpecifiedUnits\",\n    \"cookie\",\n    \"cookieEnabled\",\n    \"coords\",\n    \"copyFromChannel\",\n    \"copyTexImage2D\",\n    \"copyTexSubImage2D\",\n    \"copyToChannel\",\n    \"copyWithin\",\n    \"correspondingElement\",\n    \"correspondingUseElement\",\n    \"cos\",\n    \"cosh\",\n    \"count\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"counterIncrement\",\n    \"counterReset\",\n    \"cpuClass\",\n    \"cpuSleepAllowed\",\n    \"create\",\n    \"createAnalyser\",\n    \"createAnswer\",\n    \"createAttribute\",\n    \"createAttributeNS\",\n    \"createBiquadFilter\",\n    \"createBuffer\",\n    \"createBufferSource\",\n    \"createCDATASection\",\n    \"createCSSStyleSheet\",\n    \"createCaption\",\n    \"createChannelMerger\",\n    \"createChannelSplitter\",\n    \"createComment\",\n    \"createContextualFragment\",\n    \"createControlRange\",\n    \"createConvolver\",\n    \"createDTMFSender\",\n    \"createDataChannel\",\n    \"createDelay\",\n    \"createDelayNode\",\n    \"createDocument\",\n    \"createDocumentFragment\",\n    \"createDocumentType\",\n    \"createDynamicsCompressor\",\n    \"createElement\",\n    \"createElementNS\",\n    \"createEntityReference\",\n    \"createEvent\",\n    \"createEventObject\",\n    \"createExpression\",\n    \"createFramebuffer\",\n    \"createFunction\",\n    \"createGain\",\n    \"createGainNode\",\n    \"createHTMLDocument\",\n    \"createImageBitmap\",\n    \"createImageData\",\n    \"createIndex\",\n    \"createJavaScriptNode\",\n    \"createLinearGradient\",\n    \"createMediaElementSource\",\n    \"createMediaKeys\",\n    \"createMediaStreamDestination\",\n    \"createMediaStreamSource\",\n    \"createMutableFile\",\n    \"createNSResolver\",\n    \"createNodeIterator\",\n    \"createNotification\",\n    \"createObjectStore\",\n    \"createObjectURL\",\n    \"createOffer\",\n    \"createOscillator\",\n    \"createPanner\",\n    \"createPattern\",\n    \"createPeriodicWave\",\n    \"createPopup\",\n    \"createProcessingInstruction\",\n    \"createProgram\",\n    \"createRadialGradient\",\n    \"createRange\",\n    \"createRangeCollection\",\n    \"createRenderbuffer\",\n    \"createSVGAngle\",\n    \"createSVGLength\",\n    \"createSVGMatrix\",\n    \"createSVGNumber\",\n    \"createSVGPathSegArcAbs\",\n    \"createSVGPathSegArcRel\",\n    \"createSVGPathSegClosePath\",\n    \"createSVGPathSegCurvetoCubicAbs\",\n    \"createSVGPathSegCurvetoCubicRel\",\n    \"createSVGPathSegCurvetoCubicSmoothAbs\",\n    \"createSVGPathSegCurvetoCubicSmoothRel\",\n    \"createSVGPathSegCurvetoQuadraticAbs\",\n    \"createSVGPathSegCurvetoQuadraticRel\",\n    \"createSVGPathSegCurvetoQuadraticSmoothAbs\",\n    \"createSVGPathSegCurvetoQuadraticSmoothRel\",\n    \"createSVGPathSegLinetoAbs\",\n    \"createSVGPathSegLinetoHorizontalAbs\",\n    \"createSVGPathSegLinetoHorizontalRel\",\n    \"createSVGPathSegLinetoRel\",\n    \"createSVGPathSegLinetoVerticalAbs\",\n    \"createSVGPathSegLinetoVerticalRel\",\n    \"createSVGPathSegMovetoAbs\",\n    \"createSVGPathSegMovetoRel\",\n    \"createSVGPoint\",\n    \"createSVGRect\",\n    \"createSVGTransform\",\n    \"createSVGTransformFromMatrix\",\n    \"createScriptProcessor\",\n    \"createSession\",\n    \"createShader\",\n    \"createShadowRoot\",\n    \"createStereoPanner\",\n    \"createStyleSheet\",\n    \"createTBody\",\n    \"createTFoot\",\n    \"createTHead\",\n    \"createTextNode\",\n    \"createTextRange\",\n    \"createTexture\",\n    \"createTouch\",\n    \"createTouchList\",\n    \"createTreeWalker\",\n    \"createWaveShaper\",\n    \"creationTime\",\n    \"crossOrigin\",\n    \"crypto\",\n    \"csi\",\n    \"cssFloat\",\n    \"cssRules\",\n    \"cssText\",\n    \"cssValueType\",\n    \"ctrlKey\",\n    \"ctrlLeft\",\n    \"cues\",\n    \"cullFace\",\n    \"currentNode\",\n    \"currentPage\",\n    \"currentScale\",\n    \"currentScript\",\n    \"currentSrc\",\n    \"currentState\",\n    \"currentStyle\",\n    \"currentTarget\",\n    \"currentTime\",\n    \"currentTranslate\",\n    \"currentView\",\n    \"cursor\",\n    \"curve\",\n    \"customError\",\n    \"cx\",\n    \"cy\",\n    \"d\",\n    \"data\",\n    \"dataFld\",\n    \"dataFormatAs\",\n    \"dataPageSize\",\n    \"dataSrc\",\n    \"dataTransfer\",\n    \"database\",\n    \"dataset\",\n    \"dateTime\",\n    \"db\",\n    \"debug\",\n    \"debuggerEnabled\",\n    \"declare\",\n    \"decode\",\n    \"decodeAudioData\",\n    \"decodingInfo\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"decrypt\",\n    \"default\",\n    \"defaultCharset\",\n    \"defaultChecked\",\n    \"defaultMuted\",\n    \"defaultPlaybackRate\",\n    \"defaultPrevented\",\n    \"defaultSelected\",\n    \"defaultStatus\",\n    \"defaultURL\",\n    \"defaultValue\",\n    \"defaultView\",\n    \"defaultstatus\",\n    \"defer\",\n    \"defineMagicFunction\",\n    \"defineMagicVariable\",\n    \"defineProperties\",\n    \"defineProperty\",\n    \"delayTime\",\n    \"delete\",\n    \"deleteBuffer\",\n    \"deleteCaption\",\n    \"deleteCell\",\n    \"deleteContents\",\n    \"deleteData\",\n    \"deleteDatabase\",\n    \"deleteFramebuffer\",\n    \"deleteFromDocument\",\n    \"deleteIndex\",\n    \"deleteMedium\",\n    \"deleteObjectStore\",\n    \"deleteProgram\",\n    \"deleteRenderbuffer\",\n    \"deleteRow\",\n    \"deleteRule\",\n    \"deleteShader\",\n    \"deleteTFoot\",\n    \"deleteTHead\",\n    \"deleteTexture\",\n    \"deliverChangeRecords\",\n    \"delivery\",\n    \"deliveryInfo\",\n    \"deliveryStatus\",\n    \"deliveryTimestamp\",\n    \"delta\",\n    \"deltaMode\",\n    \"deltaX\",\n    \"deltaY\",\n    \"deltaZ\",\n    \"depthFunc\",\n    \"depthMask\",\n    \"depthRange\",\n    \"deriveBits\",\n    \"deriveKey\",\n    \"description\",\n    \"deselectAll\",\n    \"designMode\",\n    \"destination\",\n    \"destinationURL\",\n    \"detach\",\n    \"detachEvent\",\n    \"detachShader\",\n    \"detail\",\n    \"detune\",\n    \"devicePixelRatio\",\n    \"deviceXDPI\",\n    \"deviceYDPI\",\n    \"diffuseConstant\",\n    \"digest\",\n    \"dimensions\",\n    \"dir\",\n    \"dirName\",\n    \"direction\",\n    \"dirxml\",\n    \"disable\",\n    \"disableVertexAttribArray\",\n    \"disabled\",\n    \"dischargingTime\",\n    \"disconnect\",\n    \"dispatchEvent\",\n    \"display\",\n    \"distanceModel\",\n    \"divisor\",\n    \"djsapi\",\n    \"djsproxy\",\n    \"doImport\",\n    \"doNotTrack\",\n    \"doScroll\",\n    \"doctype\",\n    \"document\",\n    \"documentElement\",\n    \"documentMode\",\n    \"documentURI\",\n    \"dolphin\",\n    \"dolphinGameCenter\",\n    \"dolphininfo\",\n    \"dolphinmeta\",\n    \"domComplete\",\n    \"domContentLoadedEventEnd\",\n    \"domContentLoadedEventStart\",\n    \"domInteractive\",\n    \"domLoading\",\n    \"domain\",\n    \"domainLookupEnd\",\n    \"domainLookupStart\",\n    \"dominant-baseline\",\n    \"dominantBaseline\",\n    \"done\",\n    \"dopplerFactor\",\n    \"download\",\n    \"dragDrop\",\n    \"draggable\",\n    \"drawArrays\",\n    \"drawArraysInstancedANGLE\",\n    \"drawCustomFocusRing\",\n    \"drawElements\",\n    \"drawElementsInstancedANGLE\",\n    \"drawFocusIfNeeded\",\n    \"drawImage\",\n    \"drawImageFromRect\",\n    \"drawSystemFocusRing\",\n    \"drawingBufferHeight\",\n    \"drawingBufferWidth\",\n    \"dropEffect\",\n    \"droppedVideoFrames\",\n    \"dropzone\",\n    \"dump\",\n    \"duplicate\",\n    \"duration\",\n    \"dvname\",\n    \"dvnum\",\n    \"dx\",\n    \"dy\",\n    \"dynsrc\",\n    \"e\",\n    \"edgeMode\",\n    \"effectAllowed\",\n    \"elapsedTime\",\n    \"elementFromPoint\",\n    \"elements\",\n    \"elevation\",\n    \"ellipse\",\n    \"email\",\n    \"embeds\",\n    \"empty\",\n    \"empty-cells\",\n    \"emptyCells\",\n    \"enable\",\n    \"enableBackground\",\n    \"enableStyleSheetsForSet\",\n    \"enableVertexAttribArray\",\n    \"enabled\",\n    \"enabledPlugin\",\n    \"encode\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"encoding\",\n    \"encrypt\",\n    \"enctype\",\n    \"end\",\n    \"endContainer\",\n    \"endElement\",\n    \"endElementAt\",\n    \"endOfStream\",\n    \"endOffset\",\n    \"endTime\",\n    \"ended\",\n    \"endsWith\",\n    \"entities\",\n    \"entries\",\n    \"entryType\",\n    \"enumerate\",\n    \"enumerateEditable\",\n    \"error\",\n    \"errorCode\",\n    \"escape\",\n    \"eval\",\n    \"evaluate\",\n    \"event\",\n    \"eventPhase\",\n    \"every\",\n    \"exception\",\n    \"exec\",\n    \"execCommand\",\n    \"execCommandShowHelp\",\n    \"execScript\",\n    \"exitFullscreen\",\n    \"exitPointerLock\",\n    \"exp\",\n    \"expand\",\n    \"expandEntityReferences\",\n    \"expando\",\n    \"expansion\",\n    \"expiryDate\",\n    \"explicitOriginalTarget\",\n    \"expm1\",\n    \"exponent\",\n    \"exponentialRampToValueAtTime\",\n    \"exportKey\",\n    \"extend\",\n    \"extensions\",\n    \"extentNode\",\n    \"extentOffset\",\n    \"external\",\n    \"externalResourcesRequired\",\n    \"extractContents\",\n    \"extractable\",\n    \"f\",\n    \"face\",\n    \"factoryReset\",\n    \"fallback\",\n    \"familyName\",\n    \"farthestViewportElement\",\n    \"fastSeek\",\n    \"fatal\",\n    \"fetch\",\n    \"fetchStart\",\n    \"fftSize\",\n    \"fgColor\",\n    \"fileCreatedDate\",\n    \"fileHandle\",\n    \"fileModifiedDate\",\n    \"fileName\",\n    \"fileSize\",\n    \"fileUpdatedDate\",\n    \"filename\",\n    \"files\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"fillOpacity\",\n    \"fillRect\",\n    \"fillRule\",\n    \"fillStyle\",\n    \"fillText\",\n    \"filter\",\n    \"filterResX\",\n    \"filterResY\",\n    \"filterUnits\",\n    \"filters\",\n    \"finally\",\n    \"find\",\n    \"findIndex\",\n    \"findRule\",\n    \"findText\",\n    \"finish\",\n    \"fireEvent\",\n    \"firstChild\",\n    \"firstElementChild\",\n    \"firstPage\",\n    \"fixed\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"flexBasis\",\n    \"flexDirection\",\n    \"flexFlow\",\n    \"flexGrow\",\n    \"flexShrink\",\n    \"flexWrap\",\n    \"flipX\",\n    \"flipY\",\n    \"float\",\n    \"flood-color\",\n    \"flood-opacity\",\n    \"floodColor\",\n    \"floodOpacity\",\n    \"floor\",\n    \"flush\",\n    \"focus\",\n    \"focusNode\",\n    \"focusOffset\",\n    \"font\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-variant\",\n    \"font-variant-alternates\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-weight\",\n    \"fontFamily\",\n    \"fontFeatureSettings\",\n    \"fontKerning\",\n    \"fontLanguageOverride\",\n    \"fontSize\",\n    \"fontSizeAdjust\",\n    \"fontSmoothingEnabled\",\n    \"fontStretch\",\n    \"fontStyle\",\n    \"fontSynthesis\",\n    \"fontVariant\",\n    \"fontVariantAlternates\",\n    \"fontVariantCaps\",\n    \"fontVariantEastAsian\",\n    \"fontVariantLigatures\",\n    \"fontVariantNumeric\",\n    \"fontVariantPosition\",\n    \"fontWeight\",\n    \"fontcolor\",\n    \"fonts\",\n    \"fontsize\",\n    \"for\",\n    \"forEach\",\n    \"forceRedraw\",\n    \"form\",\n    \"formAction\",\n    \"formEnctype\",\n    \"formMethod\",\n    \"formNoValidate\",\n    \"formTarget\",\n    \"format\",\n    \"formatToParts\",\n    \"forms\",\n    \"forward\",\n    \"fr\",\n    \"frame\",\n    \"frameBorder\",\n    \"frameElement\",\n    \"frameSpacing\",\n    \"framebufferRenderbuffer\",\n    \"framebufferTexture2D\",\n    \"frames\",\n    \"freeSpace\",\n    \"freeze\",\n    \"frequency\",\n    \"frequencyBinCount\",\n    \"from\",\n    \"fromCharCode\",\n    \"fromCodePoint\",\n    \"fromElement\",\n    \"frontFace\",\n    \"fround\",\n    \"fullScreen\",\n    \"fullscreenElement\",\n    \"fullscreenEnabled\",\n    \"fx\",\n    \"fy\",\n    \"gain\",\n    \"gamepad\",\n    \"gamma\",\n    \"genderIdentity\",\n    \"generateKey\",\n    \"generateMipmap\",\n    \"generateRequest\",\n    \"geolocation\",\n    \"gestureObject\",\n    \"get\",\n    \"getActiveAttrib\",\n    \"getActiveUniform\",\n    \"getAdjacentText\",\n    \"getAll\",\n    \"getAllResponseHeaders\",\n    \"getAsFile\",\n    \"getAsString\",\n    \"getAttachedShaders\",\n    \"getAttribLocation\",\n    \"getAttribute\",\n    \"getAttributeNS\",\n    \"getAttributeNode\",\n    \"getAttributeNodeNS\",\n    \"getAudioTracks\",\n    \"getBBox\",\n    \"getBattery\",\n    \"getBlob\",\n    \"getBookmark\",\n    \"getBoundingClientRect\",\n    \"getBufferParameter\",\n    \"getByteFrequencyData\",\n    \"getByteTimeDomainData\",\n    \"getCSSCanvasContext\",\n    \"getCTM\",\n    \"getCandidateWindowClientRect\",\n    \"getChannelData\",\n    \"getCharNumAtPosition\",\n    \"getClientRect\",\n    \"getClientRects\",\n    \"getCompositionAlternatives\",\n    \"getComputedStyle\",\n    \"getComputedTextLength\",\n    \"getConfiguration\",\n    \"getContext\",\n    \"getContextAttributes\",\n    \"getCounterValue\",\n    \"getCueAsHTML\",\n    \"getCueById\",\n    \"getCurrentPosition\",\n    \"getCurrentTime\",\n    \"getData\",\n    \"getDatabaseNames\",\n    \"getDate\",\n    \"getDay\",\n    \"getDefaultComputedStyle\",\n    \"getDestinationInsertionPoints\",\n    \"getDistributedNodes\",\n    \"getEditable\",\n    \"getElementById\",\n    \"getElementsByClassName\",\n    \"getElementsByName\",\n    \"getElementsByTagName\",\n    \"getElementsByTagNameNS\",\n    \"getEnclosureList\",\n    \"getEndPositionOfChar\",\n    \"getEntries\",\n    \"getEntriesByName\",\n    \"getEntriesByType\",\n    \"getError\",\n    \"getExtension\",\n    \"getExtentOfChar\",\n    \"getFeature\",\n    \"getFile\",\n    \"getFloat32\",\n    \"getFloat64\",\n    \"getFloatFrequencyData\",\n    \"getFloatTimeDomainData\",\n    \"getFloatValue\",\n    \"getFramebufferAttachmentParameter\",\n    \"getFrequencyResponse\",\n    \"getFullYear\",\n    \"getGamepads\",\n    \"getHours\",\n    \"getImageData\",\n    \"getInt16\",\n    \"getInt32\",\n    \"getInt8\",\n    \"getIntersectionList\",\n    \"getItem\",\n    \"getItems\",\n    \"getKey\",\n    \"getLineDash\",\n    \"getLocalStreams\",\n    \"getMarks\",\n    \"getMatchedCSSRules\",\n    \"getMeasures\",\n    \"getMetadata\",\n    \"getMilliseconds\",\n    \"getMinutes\",\n    \"getModifierState\",\n    \"getMonth\",\n    \"getNamedItem\",\n    \"getNamedItemNS\",\n    \"getNotifier\",\n    \"getNumberOfChars\",\n    \"getOverrideHistoryNavigationMode\",\n    \"getOverrideStyle\",\n    \"getOwnPropertyDescriptor\",\n    \"getOwnPropertyNames\",\n    \"getOwnPropertySymbols\",\n    \"getParameter\",\n    \"getPathSegAtLength\",\n    \"getPointAtLength\",\n    \"getPreference\",\n    \"getPreferenceDefault\",\n    \"getPresentationAttribute\",\n    \"getPreventDefault\",\n    \"getProgramInfoLog\",\n    \"getProgramParameter\",\n    \"getPropertyCSSValue\",\n    \"getPropertyPriority\",\n    \"getPropertyShorthand\",\n    \"getPropertyValue\",\n    \"getPrototypeOf\",\n    \"getRGBColorValue\",\n    \"getRandomValues\",\n    \"getRangeAt\",\n    \"getReceivers\",\n    \"getRectValue\",\n    \"getRegistration\",\n    \"getRemoteStreams\",\n    \"getRenderbufferParameter\",\n    \"getResponseHeader\",\n    \"getRoot\",\n    \"getRotationOfChar\",\n    \"getSVGDocument\",\n    \"getScreenCTM\",\n    \"getSeconds\",\n    \"getSelection\",\n    \"getSenders\",\n    \"getShaderInfoLog\",\n    \"getShaderParameter\",\n    \"getShaderPrecisionFormat\",\n    \"getShaderSource\",\n    \"getSimpleDuration\",\n    \"getSiteIcons\",\n    \"getSources\",\n    \"getSpeculativeParserUrls\",\n    \"getStartPositionOfChar\",\n    \"getStartTime\",\n    \"getStats\",\n    \"getStorageUpdates\",\n    \"getStreamById\",\n    \"getStringValue\",\n    \"getSubStringLength\",\n    \"getSubscription\",\n    \"getSupportedExtensions\",\n    \"getTexParameter\",\n    \"getTime\",\n    \"getTimezoneOffset\",\n    \"getTotalLength\",\n    \"getTrackById\",\n    \"getTracks\",\n    \"getTransformToElement\",\n    \"getUTCDate\",\n    \"getUTCDay\",\n    \"getUTCFullYear\",\n    \"getUTCHours\",\n    \"getUTCMilliseconds\",\n    \"getUTCMinutes\",\n    \"getUTCMonth\",\n    \"getUTCSeconds\",\n    \"getUint16\",\n    \"getUint32\",\n    \"getUint8\",\n    \"getUniform\",\n    \"getUniformLocation\",\n    \"getUserMedia\",\n    \"getValues\",\n    \"getVarDate\",\n    \"getVariableValue\",\n    \"getVertexAttrib\",\n    \"getVertexAttribOffset\",\n    \"getVideoPlaybackQuality\",\n    \"getVideoTracks\",\n    \"getWakeLockState\",\n    \"getYear\",\n    \"givenName\",\n    \"global\",\n    \"globalAlpha\",\n    \"globalCompositeOperation\",\n    \"glyphOrientationHorizontal\",\n    \"glyphOrientationVertical\",\n    \"glyphRef\",\n    \"go\",\n    \"gradientTransform\",\n    \"gradientUnits\",\n    \"grammars\",\n    \"green\",\n    \"group\",\n    \"groupCollapsed\",\n    \"groupEnd\",\n    \"hardwareConcurrency\",\n    \"has\",\n    \"hasAttribute\",\n    \"hasAttributeNS\",\n    \"hasAttributes\",\n    \"hasChildNodes\",\n    \"hasComposition\",\n    \"hasExtension\",\n    \"hasFeature\",\n    \"hasFocus\",\n    \"hasLayout\",\n    \"hasOwnProperty\",\n    \"hash\",\n    \"head\",\n    \"headers\",\n    \"heading\",\n    \"height\",\n    \"hidden\",\n    \"hide\",\n    \"hideFocus\",\n    \"high\",\n    \"hint\",\n    \"history\",\n    \"honorificPrefix\",\n    \"honorificSuffix\",\n    \"horizontalOverflow\",\n    \"host\",\n    \"hostname\",\n    \"href\",\n    \"hreflang\",\n    \"hspace\",\n    \"html5TagCheckInerface\",\n    \"htmlFor\",\n    \"htmlText\",\n    \"httpEquiv\",\n    \"hwTimestamp\",\n    \"hypot\",\n    \"iccId\",\n    \"iceConnectionState\",\n    \"iceGatheringState\",\n    \"icon\",\n    \"id\",\n    \"identifier\",\n    \"identity\",\n    \"ignoreBOM\",\n    \"ignoreCase\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"imageOrientation\",\n    \"imageRendering\",\n    \"images\",\n    \"ime-mode\",\n    \"imeMode\",\n    \"implementation\",\n    \"importKey\",\n    \"importNode\",\n    \"importStylesheet\",\n    \"imports\",\n    \"impp\",\n    \"imul\",\n    \"in1\",\n    \"in2\",\n    \"inBandMetadataTrackDispatchType\",\n    \"inRange\",\n    \"includes\",\n    \"incremental\",\n    \"indeterminate\",\n    \"index\",\n    \"indexNames\",\n    \"indexOf\",\n    \"indexedDB\",\n    \"inertiaDestinationX\",\n    \"inertiaDestinationY\",\n    \"info\",\n    \"init\",\n    \"initAnimationEvent\",\n    \"initBeforeLoadEvent\",\n    \"initClipboardEvent\",\n    \"initCloseEvent\",\n    \"initCommandEvent\",\n    \"initCompositionEvent\",\n    \"initCustomEvent\",\n    \"initData\",\n    \"initDeviceMotionEvent\",\n    \"initDeviceOrientationEvent\",\n    \"initDragEvent\",\n    \"initErrorEvent\",\n    \"initEvent\",\n    \"initFocusEvent\",\n    \"initGestureEvent\",\n    \"initHashChangeEvent\",\n    \"initKeyEvent\",\n    \"initKeyboardEvent\",\n    \"initMSManipulationEvent\",\n    \"initMessageEvent\",\n    \"initMouseEvent\",\n    \"initMouseScrollEvent\",\n    \"initMouseWheelEvent\",\n    \"initMutationEvent\",\n    \"initNSMouseEvent\",\n    \"initOverflowEvent\",\n    \"initPageEvent\",\n    \"initPageTransitionEvent\",\n    \"initPointerEvent\",\n    \"initPopStateEvent\",\n    \"initProgressEvent\",\n    \"initScrollAreaEvent\",\n    \"initSimpleGestureEvent\",\n    \"initStorageEvent\",\n    \"initTextEvent\",\n    \"initTimeEvent\",\n    \"initTouchEvent\",\n    \"initTransitionEvent\",\n    \"initUIEvent\",\n    \"initWebKitAnimationEvent\",\n    \"initWebKitTransitionEvent\",\n    \"initWebKitWheelEvent\",\n    \"initWheelEvent\",\n    \"initialTime\",\n    \"initialize\",\n    \"initiatorType\",\n    \"inner\",\n    \"innerHTML\",\n    \"innerHeight\",\n    \"innerText\",\n    \"innerWidth\",\n    \"input\",\n    \"inputBuffer\",\n    \"inputEncoding\",\n    \"inputMethod\",\n    \"insertAdjacentElement\",\n    \"insertAdjacentHTML\",\n    \"insertAdjacentText\",\n    \"insertBefore\",\n    \"insertCell\",\n    \"insertData\",\n    \"insertItemBefore\",\n    \"insertNode\",\n    \"insertRow\",\n    \"insertRule\",\n    \"instanceRoot\",\n    \"intercept\",\n    \"interimResults\",\n    \"internalSubset\",\n    \"intersectsNode\",\n    \"interval\",\n    \"invalidIteratorState\",\n    \"inverse\",\n    \"invertSelf\",\n    \"is\",\n    \"is2D\",\n    \"isAlternate\",\n    \"isArray\",\n    \"isBingCurrentSearchDefault\",\n    \"isBuffer\",\n    \"isCandidateWindowVisible\",\n    \"isChar\",\n    \"isCollapsed\",\n    \"isComposing\",\n    \"isContentEditable\",\n    \"isContentHandlerRegistered\",\n    \"isContextLost\",\n    \"isDefaultNamespace\",\n    \"isDisabled\",\n    \"isEnabled\",\n    \"isEqual\",\n    \"isEqualNode\",\n    \"isExtensible\",\n    \"isFinite\",\n    \"isFramebuffer\",\n    \"isFrozen\",\n    \"isGenerator\",\n    \"isId\",\n    \"isInjected\",\n    \"isInteger\",\n    \"isMap\",\n    \"isMultiLine\",\n    \"isNaN\",\n    \"isOpen\",\n    \"isPointInFill\",\n    \"isPointInPath\",\n    \"isPointInRange\",\n    \"isPointInStroke\",\n    \"isPrefAlternate\",\n    \"isPrimary\",\n    \"isProgram\",\n    \"isPropertyImplicit\",\n    \"isProtocolHandlerRegistered\",\n    \"isPrototypeOf\",\n    \"isRenderbuffer\",\n    \"isSafeInteger\",\n    \"isSameNode\",\n    \"isSealed\",\n    \"isShader\",\n    \"isSupported\",\n    \"isTextEdit\",\n    \"isTexture\",\n    \"isTrusted\",\n    \"isTypeSupported\",\n    \"isView\",\n    \"isolation\",\n    \"italics\",\n    \"item\",\n    \"itemId\",\n    \"itemProp\",\n    \"itemRef\",\n    \"itemScope\",\n    \"itemType\",\n    \"itemValue\",\n    \"iterateNext\",\n    \"iterator\",\n    \"javaEnabled\",\n    \"jobTitle\",\n    \"join\",\n    \"json\",\n    \"justify-content\",\n    \"justifyContent\",\n    \"k1\",\n    \"k2\",\n    \"k3\",\n    \"k4\",\n    \"kernelMatrix\",\n    \"kernelUnitLengthX\",\n    \"kernelUnitLengthY\",\n    \"kerning\",\n    \"key\",\n    \"keyCode\",\n    \"keyFor\",\n    \"keyIdentifier\",\n    \"keyLightEnabled\",\n    \"keyLocation\",\n    \"keyPath\",\n    \"keySystem\",\n    \"keyText\",\n    \"keyUsage\",\n    \"keys\",\n    \"keytype\",\n    \"kind\",\n    \"knee\",\n    \"label\",\n    \"labels\",\n    \"lang\",\n    \"language\",\n    \"languages\",\n    \"largeArcFlag\",\n    \"lastChild\",\n    \"lastElementChild\",\n    \"lastEventId\",\n    \"lastIndex\",\n    \"lastIndexOf\",\n    \"lastMatch\",\n    \"lastMessageSubject\",\n    \"lastMessageType\",\n    \"lastModified\",\n    \"lastModifiedDate\",\n    \"lastPage\",\n    \"lastParen\",\n    \"lastState\",\n    \"lastStyleSheetSet\",\n    \"latitude\",\n    \"layerX\",\n    \"layerY\",\n    \"layoutFlow\",\n    \"layoutGrid\",\n    \"layoutGridChar\",\n    \"layoutGridLine\",\n    \"layoutGridMode\",\n    \"layoutGridType\",\n    \"lbound\",\n    \"left\",\n    \"leftContext\",\n    \"leftMargin\",\n    \"length\",\n    \"lengthAdjust\",\n    \"lengthComputable\",\n    \"letter-spacing\",\n    \"letterSpacing\",\n    \"level\",\n    \"lighting-color\",\n    \"lightingColor\",\n    \"limitingConeAngle\",\n    \"line\",\n    \"line-height\",\n    \"lineAlign\",\n    \"lineBreak\",\n    \"lineCap\",\n    \"lineDashOffset\",\n    \"lineHeight\",\n    \"lineJoin\",\n    \"lineNumber\",\n    \"lineTo\",\n    \"lineWidth\",\n    \"linearRampToValueAtTime\",\n    \"lineno\",\n    \"link\",\n    \"linkColor\",\n    \"linkProgram\",\n    \"links\",\n    \"list\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"listStyle\",\n    \"listStyleImage\",\n    \"listStylePosition\",\n    \"listStyleType\",\n    \"listener\",\n    \"load\",\n    \"loadEventEnd\",\n    \"loadEventStart\",\n    \"loadTimes\",\n    \"loaded\",\n    \"localDescription\",\n    \"localName\",\n    \"localStorage\",\n    \"locale\",\n    \"localeCompare\",\n    \"location\",\n    \"locationbar\",\n    \"lock\",\n    \"lockedFile\",\n    \"log\",\n    \"log10\",\n    \"log1p\",\n    \"log2\",\n    \"logicalXDPI\",\n    \"logicalYDPI\",\n    \"longDesc\",\n    \"longitude\",\n    \"lookupNamespaceURI\",\n    \"lookupPrefix\",\n    \"loop\",\n    \"loopEnd\",\n    \"loopStart\",\n    \"looping\",\n    \"low\",\n    \"lower\",\n    \"lowerBound\",\n    \"lowerOpen\",\n    \"lowsrc\",\n    \"m11\",\n    \"m12\",\n    \"m13\",\n    \"m14\",\n    \"m21\",\n    \"m22\",\n    \"m23\",\n    \"m24\",\n    \"m31\",\n    \"m32\",\n    \"m33\",\n    \"m34\",\n    \"m41\",\n    \"m42\",\n    \"m43\",\n    \"m44\",\n    \"manifest\",\n    \"map\",\n    \"mapping\",\n    \"margin\",\n    \"margin-bottom\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"marginBottom\",\n    \"marginHeight\",\n    \"marginLeft\",\n    \"marginRight\",\n    \"marginTop\",\n    \"marginWidth\",\n    \"mark\",\n    \"marker\",\n    \"marker-end\",\n    \"marker-mid\",\n    \"marker-offset\",\n    \"marker-start\",\n    \"markerEnd\",\n    \"markerHeight\",\n    \"markerMid\",\n    \"markerOffset\",\n    \"markerStart\",\n    \"markerUnits\",\n    \"markerWidth\",\n    \"marks\",\n    \"mask\",\n    \"mask-type\",\n    \"maskContentUnits\",\n    \"maskType\",\n    \"maskUnits\",\n    \"match\",\n    \"matchMedia\",\n    \"matchMedium\",\n    \"matches\",\n    \"matrix\",\n    \"matrixTransform\",\n    \"max\",\n    \"max-height\",\n    \"max-width\",\n    \"maxAlternatives\",\n    \"maxChannelCount\",\n    \"maxConnectionsPerServer\",\n    \"maxDecibels\",\n    \"maxDistance\",\n    \"maxHeight\",\n    \"maxLength\",\n    \"maxTouchPoints\",\n    \"maxValue\",\n    \"maxWidth\",\n    \"measure\",\n    \"measureText\",\n    \"media\",\n    \"mediaCapabilities\",\n    \"mediaDevices\",\n    \"mediaElement\",\n    \"mediaGroup\",\n    \"mediaKeys\",\n    \"mediaText\",\n    \"meetOrSlice\",\n    \"memory\",\n    \"menubar\",\n    \"mergeAttributes\",\n    \"message\",\n    \"messageClass\",\n    \"messageHandlers\",\n    \"metaKey\",\n    \"method\",\n    \"mimeType\",\n    \"mimeTypes\",\n    \"min\",\n    \"min-height\",\n    \"min-width\",\n    \"minDecibels\",\n    \"minHeight\",\n    \"minValue\",\n    \"minWidth\",\n    \"miterLimit\",\n    \"mix-blend-mode\",\n    \"mixBlendMode\",\n    \"mode\",\n    \"modify\",\n    \"mount\",\n    \"move\",\n    \"moveBy\",\n    \"moveEnd\",\n    \"moveFirst\",\n    \"moveFocusDown\",\n    \"moveFocusLeft\",\n    \"moveFocusRight\",\n    \"moveFocusUp\",\n    \"moveNext\",\n    \"moveRow\",\n    \"moveStart\",\n    \"moveTo\",\n    \"moveToBookmark\",\n    \"moveToElementText\",\n    \"moveToPoint\",\n    \"mozAdd\",\n    \"mozAnimationStartTime\",\n    \"mozAnon\",\n    \"mozApps\",\n    \"mozAudioCaptured\",\n    \"mozAudioChannelType\",\n    \"mozAutoplayEnabled\",\n    \"mozCancelAnimationFrame\",\n    \"mozCancelFullScreen\",\n    \"mozCancelRequestAnimationFrame\",\n    \"mozCaptureStream\",\n    \"mozCaptureStreamUntilEnded\",\n    \"mozClearDataAt\",\n    \"mozContact\",\n    \"mozContacts\",\n    \"mozCreateFileHandle\",\n    \"mozCurrentTransform\",\n    \"mozCurrentTransformInverse\",\n    \"mozCursor\",\n    \"mozDash\",\n    \"mozDashOffset\",\n    \"mozDecodedFrames\",\n    \"mozExitPointerLock\",\n    \"mozFillRule\",\n    \"mozFragmentEnd\",\n    \"mozFrameDelay\",\n    \"mozFullScreen\",\n    \"mozFullScreenElement\",\n    \"mozFullScreenEnabled\",\n    \"mozGetAll\",\n    \"mozGetAllKeys\",\n    \"mozGetAsFile\",\n    \"mozGetDataAt\",\n    \"mozGetMetadata\",\n    \"mozGetUserMedia\",\n    \"mozHasAudio\",\n    \"mozHasItem\",\n    \"mozHidden\",\n    \"mozImageSmoothingEnabled\",\n    \"mozIndexedDB\",\n    \"mozInnerScreenX\",\n    \"mozInnerScreenY\",\n    \"mozInputSource\",\n    \"mozIsTextField\",\n    \"mozItem\",\n    \"mozItemCount\",\n    \"mozItems\",\n    \"mozLength\",\n    \"mozLockOrientation\",\n    \"mozMatchesSelector\",\n    \"mozMovementX\",\n    \"mozMovementY\",\n    \"mozOpaque\",\n    \"mozOrientation\",\n    \"mozPaintCount\",\n    \"mozPaintedFrames\",\n    \"mozParsedFrames\",\n    \"mozPay\",\n    \"mozPointerLockElement\",\n    \"mozPresentedFrames\",\n    \"mozPreservesPitch\",\n    \"mozPressure\",\n    \"mozPrintCallback\",\n    \"mozRTCIceCandidate\",\n    \"mozRTCPeerConnection\",\n    \"mozRTCSessionDescription\",\n    \"mozRemove\",\n    \"mozRequestAnimationFrame\",\n    \"mozRequestFullScreen\",\n    \"mozRequestPointerLock\",\n    \"mozSetDataAt\",\n    \"mozSetImageElement\",\n    \"mozSourceNode\",\n    \"mozSrcObject\",\n    \"mozSystem\",\n    \"mozTCPSocket\",\n    \"mozTextStyle\",\n    \"mozTypesAt\",\n    \"mozUnlockOrientation\",\n    \"mozUserCancelled\",\n    \"mozVisibilityState\",\n    \"msAnimation\",\n    \"msAnimationDelay\",\n    \"msAnimationDirection\",\n    \"msAnimationDuration\",\n    \"msAnimationFillMode\",\n    \"msAnimationIterationCount\",\n    \"msAnimationName\",\n    \"msAnimationPlayState\",\n    \"msAnimationStartTime\",\n    \"msAnimationTimingFunction\",\n    \"msBackfaceVisibility\",\n    \"msBlockProgression\",\n    \"msCSSOMElementFloatMetrics\",\n    \"msCaching\",\n    \"msCachingEnabled\",\n    \"msCancelRequestAnimationFrame\",\n    \"msCapsLockWarningOff\",\n    \"msClearImmediate\",\n    \"msClose\",\n    \"msContentZoomChaining\",\n    \"msContentZoomFactor\",\n    \"msContentZoomLimit\",\n    \"msContentZoomLimitMax\",\n    \"msContentZoomLimitMin\",\n    \"msContentZoomSnap\",\n    \"msContentZoomSnapPoints\",\n    \"msContentZoomSnapType\",\n    \"msContentZooming\",\n    \"msConvertURL\",\n    \"msCrypto\",\n    \"msDoNotTrack\",\n    \"msElementsFromPoint\",\n    \"msElementsFromRect\",\n    \"msExitFullscreen\",\n    \"msExtendedCode\",\n    \"msFillRule\",\n    \"msFirstPaint\",\n    \"msFlex\",\n    \"msFlexAlign\",\n    \"msFlexDirection\",\n    \"msFlexFlow\",\n    \"msFlexItemAlign\",\n    \"msFlexLinePack\",\n    \"msFlexNegative\",\n    \"msFlexOrder\",\n    \"msFlexPack\",\n    \"msFlexPositive\",\n    \"msFlexPreferredSize\",\n    \"msFlexWrap\",\n    \"msFlowFrom\",\n    \"msFlowInto\",\n    \"msFontFeatureSettings\",\n    \"msFullscreenElement\",\n    \"msFullscreenEnabled\",\n    \"msGetInputContext\",\n    \"msGetRegionContent\",\n    \"msGetUntransformedBounds\",\n    \"msGraphicsTrustStatus\",\n    \"msGridColumn\",\n    \"msGridColumnAlign\",\n    \"msGridColumnSpan\",\n    \"msGridColumns\",\n    \"msGridRow\",\n    \"msGridRowAlign\",\n    \"msGridRowSpan\",\n    \"msGridRows\",\n    \"msHidden\",\n    \"msHighContrastAdjust\",\n    \"msHyphenateLimitChars\",\n    \"msHyphenateLimitLines\",\n    \"msHyphenateLimitZone\",\n    \"msHyphens\",\n    \"msImageSmoothingEnabled\",\n    \"msImeAlign\",\n    \"msIndexedDB\",\n    \"msInterpolationMode\",\n    \"msIsStaticHTML\",\n    \"msKeySystem\",\n    \"msKeys\",\n    \"msLaunchUri\",\n    \"msLockOrientation\",\n    \"msManipulationViewsEnabled\",\n    \"msMatchMedia\",\n    \"msMatchesSelector\",\n    \"msMaxTouchPoints\",\n    \"msOrientation\",\n    \"msOverflowStyle\",\n    \"msPerspective\",\n    \"msPerspectiveOrigin\",\n    \"msPlayToDisabled\",\n    \"msPlayToPreferredSourceUri\",\n    \"msPlayToPrimary\",\n    \"msPointerEnabled\",\n    \"msRegionOverflow\",\n    \"msReleasePointerCapture\",\n    \"msRequestAnimationFrame\",\n    \"msRequestFullscreen\",\n    \"msSaveBlob\",\n    \"msSaveOrOpenBlob\",\n    \"msScrollChaining\",\n    \"msScrollLimit\",\n    \"msScrollLimitXMax\",\n    \"msScrollLimitXMin\",\n    \"msScrollLimitYMax\",\n    \"msScrollLimitYMin\",\n    \"msScrollRails\",\n    \"msScrollSnapPointsX\",\n    \"msScrollSnapPointsY\",\n    \"msScrollSnapType\",\n    \"msScrollSnapX\",\n    \"msScrollSnapY\",\n    \"msScrollTranslation\",\n    \"msSetImmediate\",\n    \"msSetMediaKeys\",\n    \"msSetPointerCapture\",\n    \"msTextCombineHorizontal\",\n    \"msTextSizeAdjust\",\n    \"msToBlob\",\n    \"msTouchAction\",\n    \"msTouchSelect\",\n    \"msTraceAsyncCallbackCompleted\",\n    \"msTraceAsyncCallbackStarting\",\n    \"msTraceAsyncOperationCompleted\",\n    \"msTraceAsyncOperationStarting\",\n    \"msTransform\",\n    \"msTransformOrigin\",\n    \"msTransformStyle\",\n    \"msTransition\",\n    \"msTransitionDelay\",\n    \"msTransitionDuration\",\n    \"msTransitionProperty\",\n    \"msTransitionTimingFunction\",\n    \"msUnlockOrientation\",\n    \"msUpdateAsyncCallbackRelation\",\n    \"msUserSelect\",\n    \"msVisibilityState\",\n    \"msWrapFlow\",\n    \"msWrapMargin\",\n    \"msWrapThrough\",\n    \"msWriteProfilerMark\",\n    \"msZoom\",\n    \"msZoomTo\",\n    \"mt\",\n    \"multiEntry\",\n    \"multiSelectionObj\",\n    \"multiline\",\n    \"multiple\",\n    \"multiply\",\n    \"multiplySelf\",\n    \"mutableFile\",\n    \"muted\",\n    \"n\",\n    \"name\",\n    \"nameProp\",\n    \"namedItem\",\n    \"namedRecordset\",\n    \"names\",\n    \"namespaceURI\",\n    \"namespaces\",\n    \"naturalHeight\",\n    \"naturalWidth\",\n    \"navigate\",\n    \"navigation\",\n    \"navigationMode\",\n    \"navigationStart\",\n    \"navigator\",\n    \"near\",\n    \"nearestViewportElement\",\n    \"negative\",\n    \"netscape\",\n    \"networkState\",\n    \"newScale\",\n    \"newTranslate\",\n    \"newURL\",\n    \"newValue\",\n    \"newValueSpecifiedUnits\",\n    \"newVersion\",\n    \"newhome\",\n    \"next\",\n    \"nextElementSibling\",\n    \"nextNode\",\n    \"nextPage\",\n    \"nextSibling\",\n    \"nickname\",\n    \"noHref\",\n    \"noResize\",\n    \"noShade\",\n    \"noValidate\",\n    \"noWrap\",\n    \"nodeName\",\n    \"nodeType\",\n    \"nodeValue\",\n    \"normalize\",\n    \"normalizedPathSegList\",\n    \"notationName\",\n    \"notations\",\n    \"note\",\n    \"noteGrainOn\",\n    \"noteOff\",\n    \"noteOn\",\n    \"now\",\n    \"numOctaves\",\n    \"number\",\n    \"numberOfChannels\",\n    \"numberOfInputs\",\n    \"numberOfItems\",\n    \"numberOfOutputs\",\n    \"numberValue\",\n    \"oMatchesSelector\",\n    \"object\",\n    \"object-fit\",\n    \"object-position\",\n    \"objectFit\",\n    \"objectPosition\",\n    \"objectStore\",\n    \"objectStoreNames\",\n    \"observe\",\n    \"of\",\n    \"offscreenBuffering\",\n    \"offset\",\n    \"offsetHeight\",\n    \"offsetLeft\",\n    \"offsetNode\",\n    \"offsetParent\",\n    \"offsetTop\",\n    \"offsetWidth\",\n    \"offsetX\",\n    \"offsetY\",\n    \"ok\",\n    \"oldURL\",\n    \"oldValue\",\n    \"oldVersion\",\n    \"olderShadowRoot\",\n    \"onLine\",\n    \"onabort\",\n    \"onactivate\",\n    \"onactive\",\n    \"onaddstream\",\n    \"onaddtrack\",\n    \"onafterprint\",\n    \"onafterscriptexecute\",\n    \"onafterupdate\",\n    \"onaudioend\",\n    \"onaudioprocess\",\n    \"onaudiostart\",\n    \"onautocomplete\",\n    \"onautocompleteerror\",\n    \"onbeforeactivate\",\n    \"onbeforecopy\",\n    \"onbeforecut\",\n    \"onbeforedeactivate\",\n    \"onbeforeeditfocus\",\n    \"onbeforepaste\",\n    \"onbeforeprint\",\n    \"onbeforescriptexecute\",\n    \"onbeforeunload\",\n    \"onbeforeupdate\",\n    \"onblocked\",\n    \"onblur\",\n    \"onbounce\",\n    \"onboundary\",\n    \"oncached\",\n    \"oncancel\",\n    \"oncandidatewindowhide\",\n    \"oncandidatewindowshow\",\n    \"oncandidatewindowupdate\",\n    \"oncanplay\",\n    \"oncanplaythrough\",\n    \"oncellchange\",\n    \"onchange\",\n    \"onchargingchange\",\n    \"onchargingtimechange\",\n    \"onchecking\",\n    \"onclick\",\n    \"onclose\",\n    \"oncompassneedscalibration\",\n    \"oncomplete\",\n    \"oncontextmenu\",\n    \"oncontrolselect\",\n    \"oncopy\",\n    \"oncuechange\",\n    \"oncut\",\n    \"ondataavailable\",\n    \"ondatachannel\",\n    \"ondatasetchanged\",\n    \"ondatasetcomplete\",\n    \"ondblclick\",\n    \"ondeactivate\",\n    \"ondevicelight\",\n    \"ondevicemotion\",\n    \"ondeviceorientation\",\n    \"ondeviceproximity\",\n    \"ondischargingtimechange\",\n    \"ondisplay\",\n    \"ondownloading\",\n    \"ondrag\",\n    \"ondragend\",\n    \"ondragenter\",\n    \"ondragleave\",\n    \"ondragover\",\n    \"ondragstart\",\n    \"ondrop\",\n    \"ondurationchange\",\n    \"onemptied\",\n    \"onencrypted\",\n    \"onend\",\n    \"onended\",\n    \"onenter\",\n    \"onerror\",\n    \"onerrorupdate\",\n    \"onexit\",\n    \"onfilterchange\",\n    \"onfinish\",\n    \"onfocus\",\n    \"onfocusin\",\n    \"onfocusout\",\n    \"onfullscreenchange\",\n    \"onfullscreenerror\",\n    \"ongesturechange\",\n    \"ongestureend\",\n    \"ongesturestart\",\n    \"ongotpointercapture\",\n    \"onhashchange\",\n    \"onhelp\",\n    \"onicecandidate\",\n    \"oniceconnectionstatechange\",\n    \"oninactive\",\n    \"oninput\",\n    \"oninvalid\",\n    \"onkeydown\",\n    \"onkeypress\",\n    \"onkeyup\",\n    \"onlanguagechange\",\n    \"onlayoutcomplete\",\n    \"onlevelchange\",\n    \"onload\",\n    \"onloadeddata\",\n    \"onloadedmetadata\",\n    \"onloadend\",\n    \"onloadstart\",\n    \"onlosecapture\",\n    \"onlostpointercapture\",\n    \"only\",\n    \"onmark\",\n    \"onmessage\",\n    \"onmousedown\",\n    \"onmouseenter\",\n    \"onmouseleave\",\n    \"onmousemove\",\n    \"onmouseout\",\n    \"onmouseover\",\n    \"onmouseup\",\n    \"onmousewheel\",\n    \"onmove\",\n    \"onmoveend\",\n    \"onmovestart\",\n    \"onmozfullscreenchange\",\n    \"onmozfullscreenerror\",\n    \"onmozorientationchange\",\n    \"onmozpointerlockchange\",\n    \"onmozpointerlockerror\",\n    \"onmscontentzoom\",\n    \"onmsfullscreenchange\",\n    \"onmsfullscreenerror\",\n    \"onmsgesturechange\",\n    \"onmsgesturedoubletap\",\n    \"onmsgestureend\",\n    \"onmsgesturehold\",\n    \"onmsgesturestart\",\n    \"onmsgesturetap\",\n    \"onmsgotpointercapture\",\n    \"onmsinertiastart\",\n    \"onmslostpointercapture\",\n    \"onmsmanipulationstatechanged\",\n    \"onmsneedkey\",\n    \"onmsorientationchange\",\n    \"onmspointercancel\",\n    \"onmspointerdown\",\n    \"onmspointerenter\",\n    \"onmspointerhover\",\n    \"onmspointerleave\",\n    \"onmspointermove\",\n    \"onmspointerout\",\n    \"onmspointerover\",\n    \"onmspointerup\",\n    \"onmssitemodejumplistitemremoved\",\n    \"onmsthumbnailclick\",\n    \"onnegotiationneeded\",\n    \"onnomatch\",\n    \"onnoupdate\",\n    \"onobsolete\",\n    \"onoffline\",\n    \"ononline\",\n    \"onopen\",\n    \"onorientationchange\",\n    \"onpagechange\",\n    \"onpagehide\",\n    \"onpageshow\",\n    \"onpaste\",\n    \"onpause\",\n    \"onplay\",\n    \"onplaying\",\n    \"onpluginstreamstart\",\n    \"onpointercancel\",\n    \"onpointerdown\",\n    \"onpointerenter\",\n    \"onpointerleave\",\n    \"onpointerlockchange\",\n    \"onpointerlockerror\",\n    \"onpointermove\",\n    \"onpointerout\",\n    \"onpointerover\",\n    \"onpointerup\",\n    \"onpopstate\",\n    \"onprogress\",\n    \"onpropertychange\",\n    \"onratechange\",\n    \"onreadystatechange\",\n    \"onremovestream\",\n    \"onremovetrack\",\n    \"onreset\",\n    \"onresize\",\n    \"onresizeend\",\n    \"onresizestart\",\n    \"onresourcetimingbufferfull\",\n    \"onresult\",\n    \"onresume\",\n    \"onrowenter\",\n    \"onrowexit\",\n    \"onrowsdelete\",\n    \"onrowsinserted\",\n    \"onscroll\",\n    \"onsearch\",\n    \"onseeked\",\n    \"onseeking\",\n    \"onselect\",\n    \"onselectionchange\",\n    \"onselectstart\",\n    \"onshow\",\n    \"onsignalingstatechange\",\n    \"onsoundend\",\n    \"onsoundstart\",\n    \"onspeechend\",\n    \"onspeechstart\",\n    \"onstalled\",\n    \"onstart\",\n    \"onstatechange\",\n    \"onstop\",\n    \"onstorage\",\n    \"onstoragecommit\",\n    \"onsubmit\",\n    \"onsuccess\",\n    \"onsuspend\",\n    \"ontextinput\",\n    \"ontimeout\",\n    \"ontimeupdate\",\n    \"ontoggle\",\n    \"ontouchcancel\",\n    \"ontouchend\",\n    \"ontouchmove\",\n    \"ontouchstart\",\n    \"ontransitionend\",\n    \"onunload\",\n    \"onupdateready\",\n    \"onupgradeneeded\",\n    \"onuserproximity\",\n    \"onversionchange\",\n    \"onvoiceschanged\",\n    \"onvolumechange\",\n    \"onwaiting\",\n    \"onwarning\",\n    \"onwebkitanimationend\",\n    \"onwebkitanimationiteration\",\n    \"onwebkitanimationstart\",\n    \"onwebkitcurrentplaybacktargetiswirelesschanged\",\n    \"onwebkitfullscreenchange\",\n    \"onwebkitfullscreenerror\",\n    \"onwebkitkeyadded\",\n    \"onwebkitkeyerror\",\n    \"onwebkitkeymessage\",\n    \"onwebkitneedkey\",\n    \"onwebkitorientationchange\",\n    \"onwebkitplaybacktargetavailabilitychanged\",\n    \"onwebkitpointerlockchange\",\n    \"onwebkitpointerlockerror\",\n    \"onwebkitresourcetimingbufferfull\",\n    \"onwebkittransitionend\",\n    \"onwheel\",\n    \"onzoom\",\n    \"opacity\",\n    \"open\",\n    \"openCursor\",\n    \"openDatabase\",\n    \"openKeyCursor\",\n    \"opener\",\n    \"opera\",\n    \"operationType\",\n    \"operator\",\n    \"opr\",\n    \"optimum\",\n    \"options\",\n    \"order\",\n    \"orderX\",\n    \"orderY\",\n    \"ordered\",\n    \"org\",\n    \"orient\",\n    \"orientAngle\",\n    \"orientType\",\n    \"orientation\",\n    \"origin\",\n    \"originalTarget\",\n    \"orphans\",\n    \"oscpu\",\n    \"outerHTML\",\n    \"outerHeight\",\n    \"outerText\",\n    \"outerWidth\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"outlineColor\",\n    \"outlineOffset\",\n    \"outlineStyle\",\n    \"outlineWidth\",\n    \"outputBuffer\",\n    \"overflow\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"overflowX\",\n    \"overflowY\",\n    \"overrideMimeType\",\n    \"oversample\",\n    \"ownerDocument\",\n    \"ownerElement\",\n    \"ownerNode\",\n    \"ownerRule\",\n    \"ownerSVGElement\",\n    \"owningElement\",\n    \"p1\",\n    \"p2\",\n    \"p3\",\n    \"p4\",\n    \"pad\",\n    \"padding\",\n    \"padding-bottom\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"paddingBottom\",\n    \"paddingLeft\",\n    \"paddingRight\",\n    \"paddingTop\",\n    \"page\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"pageBreakAfter\",\n    \"pageBreakBefore\",\n    \"pageBreakInside\",\n    \"pageCount\",\n    \"pageX\",\n    \"pageXOffset\",\n    \"pageY\",\n    \"pageYOffset\",\n    \"pages\",\n    \"paint-order\",\n    \"paintOrder\",\n    \"paintRequests\",\n    \"paintType\",\n    \"palette\",\n    \"panningModel\",\n    \"parent\",\n    \"parentElement\",\n    \"parentNode\",\n    \"parentRule\",\n    \"parentStyleSheet\",\n    \"parentTextEdit\",\n    \"parentWindow\",\n    \"parse\",\n    \"parseFloat\",\n    \"parseFromString\",\n    \"parseInt\",\n    \"participants\",\n    \"password\",\n    \"pasteHTML\",\n    \"path\",\n    \"pathLength\",\n    \"pathSegList\",\n    \"pathSegType\",\n    \"pathSegTypeAsLetter\",\n    \"pathname\",\n    \"pattern\",\n    \"patternContentUnits\",\n    \"patternMismatch\",\n    \"patternTransform\",\n    \"patternUnits\",\n    \"pause\",\n    \"pauseAnimations\",\n    \"pauseOnExit\",\n    \"paused\",\n    \"pending\",\n    \"performance\",\n    \"permission\",\n    \"persisted\",\n    \"personalbar\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"perspectiveOrigin\",\n    \"phoneticFamilyName\",\n    \"phoneticGivenName\",\n    \"photo\",\n    \"ping\",\n    \"pitch\",\n    \"pixelBottom\",\n    \"pixelDepth\",\n    \"pixelHeight\",\n    \"pixelLeft\",\n    \"pixelRight\",\n    \"pixelStorei\",\n    \"pixelTop\",\n    \"pixelUnitToMillimeterX\",\n    \"pixelUnitToMillimeterY\",\n    \"pixelWidth\",\n    \"placeholder\",\n    \"platform\",\n    \"play\",\n    \"playbackRate\",\n    \"playbackState\",\n    \"playbackTime\",\n    \"played\",\n    \"plugins\",\n    \"pluginspage\",\n    \"pname\",\n    \"pointer-events\",\n    \"pointerBeforeReferenceNode\",\n    \"pointerEnabled\",\n    \"pointerEvents\",\n    \"pointerId\",\n    \"pointerLockElement\",\n    \"pointerType\",\n    \"points\",\n    \"pointsAtX\",\n    \"pointsAtY\",\n    \"pointsAtZ\",\n    \"polygonOffset\",\n    \"pop\",\n    \"popupWindowFeatures\",\n    \"popupWindowName\",\n    \"popupWindowURI\",\n    \"port\",\n    \"port1\",\n    \"port2\",\n    \"ports\",\n    \"posBottom\",\n    \"posHeight\",\n    \"posLeft\",\n    \"posRight\",\n    \"posTop\",\n    \"posWidth\",\n    \"position\",\n    \"positionAlign\",\n    \"postError\",\n    \"postMessage\",\n    \"poster\",\n    \"pow\",\n    \"powerOff\",\n    \"preMultiplySelf\",\n    \"precision\",\n    \"preferredStyleSheetSet\",\n    \"preferredStylesheetSet\",\n    \"prefix\",\n    \"preload\",\n    \"preserveAlpha\",\n    \"preserveAspectRatio\",\n    \"preserveAspectRatioString\",\n    \"pressed\",\n    \"pressure\",\n    \"prevValue\",\n    \"preventDefault\",\n    \"preventExtensions\",\n    \"previousElementSibling\",\n    \"previousNode\",\n    \"previousPage\",\n    \"previousScale\",\n    \"previousSibling\",\n    \"previousTranslate\",\n    \"primaryKey\",\n    \"primitiveType\",\n    \"primitiveUnits\",\n    \"principals\",\n    \"print\",\n    \"privateKey\",\n    \"probablySupportsContext\",\n    \"process\",\n    \"processIceMessage\",\n    \"product\",\n    \"productSub\",\n    \"profile\",\n    \"profileEnd\",\n    \"profiles\",\n    \"prompt\",\n    \"properties\",\n    \"propertyIsEnumerable\",\n    \"propertyName\",\n    \"protocol\",\n    \"protocolLong\",\n    \"prototype\",\n    \"pseudoClass\",\n    \"pseudoElement\",\n    \"publicId\",\n    \"publicKey\",\n    \"published\",\n    \"push\",\n    \"pushNotification\",\n    \"pushState\",\n    \"put\",\n    \"putImageData\",\n    \"quadraticCurveTo\",\n    \"qualifier\",\n    \"queryCommandEnabled\",\n    \"queryCommandIndeterm\",\n    \"queryCommandState\",\n    \"queryCommandSupported\",\n    \"queryCommandText\",\n    \"queryCommandValue\",\n    \"querySelector\",\n    \"querySelectorAll\",\n    \"quote\",\n    \"quotes\",\n    \"r\",\n    \"r1\",\n    \"r2\",\n    \"race\",\n    \"radiogroup\",\n    \"radiusX\",\n    \"radiusY\",\n    \"random\",\n    \"range\",\n    \"rangeCount\",\n    \"rangeMax\",\n    \"rangeMin\",\n    \"rangeOffset\",\n    \"rangeOverflow\",\n    \"rangeParent\",\n    \"rangeUnderflow\",\n    \"rate\",\n    \"ratio\",\n    \"raw\",\n    \"read\",\n    \"readAsArrayBuffer\",\n    \"readAsBinaryString\",\n    \"readAsBlob\",\n    \"readAsDataURL\",\n    \"readAsText\",\n    \"readOnly\",\n    \"readPixels\",\n    \"readReportRequested\",\n    \"readyState\",\n    \"reason\",\n    \"reboot\",\n    \"receiver\",\n    \"receivers\",\n    \"recordNumber\",\n    \"recordset\",\n    \"rect\",\n    \"red\",\n    \"redirectCount\",\n    \"redirectEnd\",\n    \"redirectStart\",\n    \"reduce\",\n    \"reduceRight\",\n    \"reduction\",\n    \"refDistance\",\n    \"refX\",\n    \"refY\",\n    \"referenceNode\",\n    \"referrer\",\n    \"refresh\",\n    \"region\",\n    \"regionAnchorX\",\n    \"regionAnchorY\",\n    \"regionId\",\n    \"regions\",\n    \"register\",\n    \"registerContentHandler\",\n    \"registerElement\",\n    \"registerProtocolHandler\",\n    \"reject\",\n    \"rel\",\n    \"relList\",\n    \"relatedNode\",\n    \"relatedTarget\",\n    \"release\",\n    \"releaseCapture\",\n    \"releaseEvents\",\n    \"releasePointerCapture\",\n    \"releaseShaderCompiler\",\n    \"reliable\",\n    \"reload\",\n    \"remainingSpace\",\n    \"remoteDescription\",\n    \"remove\",\n    \"removeAllRanges\",\n    \"removeAttribute\",\n    \"removeAttributeNS\",\n    \"removeAttributeNode\",\n    \"removeBehavior\",\n    \"removeChild\",\n    \"removeCue\",\n    \"removeEventListener\",\n    \"removeFilter\",\n    \"removeImport\",\n    \"removeItem\",\n    \"removeListener\",\n    \"removeNamedItem\",\n    \"removeNamedItemNS\",\n    \"removeNode\",\n    \"removeParameter\",\n    \"removeProperty\",\n    \"removeRange\",\n    \"removeRegion\",\n    \"removeRule\",\n    \"removeSiteSpecificTrackingException\",\n    \"removeSourceBuffer\",\n    \"removeStream\",\n    \"removeTrack\",\n    \"removeVariable\",\n    \"removeWakeLockListener\",\n    \"removeWebWideTrackingException\",\n    \"removedNodes\",\n    \"renderbufferStorage\",\n    \"renderedBuffer\",\n    \"renderingMode\",\n    \"repeat\",\n    \"replace\",\n    \"replaceAdjacentText\",\n    \"replaceChild\",\n    \"replaceData\",\n    \"replaceId\",\n    \"replaceItem\",\n    \"replaceNode\",\n    \"replaceState\",\n    \"replaceTrack\",\n    \"replaceWholeText\",\n    \"reportValidity\",\n    \"requestAnimationFrame\",\n    \"requestAutocomplete\",\n    \"requestData\",\n    \"requestFullscreen\",\n    \"requestMediaKeySystemAccess\",\n    \"requestPermission\",\n    \"requestPointerLock\",\n    \"requestStart\",\n    \"requestingWindow\",\n    \"required\",\n    \"requiredExtensions\",\n    \"requiredFeatures\",\n    \"reset\",\n    \"resetTransform\",\n    \"resize\",\n    \"resizeBy\",\n    \"resizeTo\",\n    \"resolve\",\n    \"response\",\n    \"responseBody\",\n    \"responseEnd\",\n    \"responseStart\",\n    \"responseText\",\n    \"responseType\",\n    \"responseURL\",\n    \"responseXML\",\n    \"restore\",\n    \"result\",\n    \"resultType\",\n    \"resume\",\n    \"returnValue\",\n    \"rev\",\n    \"reverse\",\n    \"reversed\",\n    \"revocable\",\n    \"revokeObjectURL\",\n    \"rgbColor\",\n    \"right\",\n    \"rightContext\",\n    \"rightMargin\",\n    \"rolloffFactor\",\n    \"root\",\n    \"rootElement\",\n    \"rotate\",\n    \"rotateAxisAngle\",\n    \"rotateAxisAngleSelf\",\n    \"rotateFromVector\",\n    \"rotateFromVectorSelf\",\n    \"rotateSelf\",\n    \"rotation\",\n    \"rotationRate\",\n    \"round\",\n    \"rowIndex\",\n    \"rowSpan\",\n    \"rows\",\n    \"rubyAlign\",\n    \"rubyOverhang\",\n    \"rubyPosition\",\n    \"rules\",\n    \"runtime\",\n    \"runtimeStyle\",\n    \"rx\",\n    \"ry\",\n    \"safari\",\n    \"sampleCoverage\",\n    \"sampleRate\",\n    \"sandbox\",\n    \"save\",\n    \"scale\",\n    \"scale3d\",\n    \"scale3dSelf\",\n    \"scaleNonUniform\",\n    \"scaleNonUniformSelf\",\n    \"scaleSelf\",\n    \"scheme\",\n    \"scissor\",\n    \"scope\",\n    \"scopeName\",\n    \"scoped\",\n    \"screen\",\n    \"screenBrightness\",\n    \"screenEnabled\",\n    \"screenLeft\",\n    \"screenPixelToMillimeterX\",\n    \"screenPixelToMillimeterY\",\n    \"screenTop\",\n    \"screenX\",\n    \"screenY\",\n    \"scripts\",\n    \"scroll\",\n    \"scroll-behavior\",\n    \"scrollAmount\",\n    \"scrollBehavior\",\n    \"scrollBy\",\n    \"scrollByLines\",\n    \"scrollByPages\",\n    \"scrollDelay\",\n    \"scrollHeight\",\n    \"scrollIntoView\",\n    \"scrollIntoViewIfNeeded\",\n    \"scrollLeft\",\n    \"scrollLeftMax\",\n    \"scrollMaxX\",\n    \"scrollMaxY\",\n    \"scrollTo\",\n    \"scrollTop\",\n    \"scrollTopMax\",\n    \"scrollWidth\",\n    \"scrollX\",\n    \"scrollY\",\n    \"scrollbar3dLightColor\",\n    \"scrollbarArrowColor\",\n    \"scrollbarBaseColor\",\n    \"scrollbarDarkShadowColor\",\n    \"scrollbarFaceColor\",\n    \"scrollbarHighlightColor\",\n    \"scrollbarShadowColor\",\n    \"scrollbarTrackColor\",\n    \"scrollbars\",\n    \"scrolling\",\n    \"sdp\",\n    \"sdpMLineIndex\",\n    \"sdpMid\",\n    \"seal\",\n    \"search\",\n    \"searchBox\",\n    \"searchBoxJavaBridge_\",\n    \"searchParams\",\n    \"sectionRowIndex\",\n    \"secureConnectionStart\",\n    \"security\",\n    \"seed\",\n    \"seekable\",\n    \"seeking\",\n    \"select\",\n    \"selectAllChildren\",\n    \"selectNode\",\n    \"selectNodeContents\",\n    \"selectNodes\",\n    \"selectSingleNode\",\n    \"selectSubString\",\n    \"selected\",\n    \"selectedIndex\",\n    \"selectedOptions\",\n    \"selectedStyleSheetSet\",\n    \"selectedStylesheetSet\",\n    \"selection\",\n    \"selectionDirection\",\n    \"selectionEnd\",\n    \"selectionStart\",\n    \"selector\",\n    \"selectorText\",\n    \"self\",\n    \"send\",\n    \"sendAsBinary\",\n    \"sendBeacon\",\n    \"sender\",\n    \"sentTimestamp\",\n    \"separator\",\n    \"serializeToString\",\n    \"serviceWorker\",\n    \"sessionId\",\n    \"sessionStorage\",\n    \"set\",\n    \"setActive\",\n    \"setAlpha\",\n    \"setAttribute\",\n    \"setAttributeNS\",\n    \"setAttributeNode\",\n    \"setAttributeNodeNS\",\n    \"setBaseAndExtent\",\n    \"setBingCurrentSearchDefault\",\n    \"setCapture\",\n    \"setColor\",\n    \"setCompositeOperation\",\n    \"setCurrentTime\",\n    \"setCustomValidity\",\n    \"setData\",\n    \"setDate\",\n    \"setDragImage\",\n    \"setEnd\",\n    \"setEndAfter\",\n    \"setEndBefore\",\n    \"setEndPoint\",\n    \"setFillColor\",\n    \"setFilterRes\",\n    \"setFloat32\",\n    \"setFloat64\",\n    \"setFloatValue\",\n    \"setFullYear\",\n    \"setHours\",\n    \"setImmediate\",\n    \"setInt16\",\n    \"setInt32\",\n    \"setInt8\",\n    \"setInterval\",\n    \"setItem\",\n    \"setLineCap\",\n    \"setLineDash\",\n    \"setLineJoin\",\n    \"setLineWidth\",\n    \"setLocalDescription\",\n    \"setMatrix\",\n    \"setMatrixValue\",\n    \"setMediaKeys\",\n    \"setMilliseconds\",\n    \"setMinutes\",\n    \"setMiterLimit\",\n    \"setMonth\",\n    \"setNamedItem\",\n    \"setNamedItemNS\",\n    \"setNonUserCodeExceptions\",\n    \"setOrientToAngle\",\n    \"setOrientToAuto\",\n    \"setOrientation\",\n    \"setOverrideHistoryNavigationMode\",\n    \"setPaint\",\n    \"setParameter\",\n    \"setPeriodicWave\",\n    \"setPointerCapture\",\n    \"setPosition\",\n    \"setPreference\",\n    \"setProperty\",\n    \"setPrototypeOf\",\n    \"setRGBColor\",\n    \"setRGBColorICCColor\",\n    \"setRadius\",\n    \"setRangeText\",\n    \"setRemoteDescription\",\n    \"setRequestHeader\",\n    \"setResizable\",\n    \"setResourceTimingBufferSize\",\n    \"setRotate\",\n    \"setScale\",\n    \"setSeconds\",\n    \"setSelectionRange\",\n    \"setServerCertificate\",\n    \"setShadow\",\n    \"setSkewX\",\n    \"setSkewY\",\n    \"setStart\",\n    \"setStartAfter\",\n    \"setStartBefore\",\n    \"setStdDeviation\",\n    \"setStringValue\",\n    \"setStrokeColor\",\n    \"setSuggestResult\",\n    \"setTargetAtTime\",\n    \"setTargetValueAtTime\",\n    \"setTime\",\n    \"setTimeout\",\n    \"setTransform\",\n    \"setTranslate\",\n    \"setUTCDate\",\n    \"setUTCFullYear\",\n    \"setUTCHours\",\n    \"setUTCMilliseconds\",\n    \"setUTCMinutes\",\n    \"setUTCMonth\",\n    \"setUTCSeconds\",\n    \"setUint16\",\n    \"setUint32\",\n    \"setUint8\",\n    \"setUri\",\n    \"setValueAtTime\",\n    \"setValueCurveAtTime\",\n    \"setVariable\",\n    \"setVelocity\",\n    \"setVersion\",\n    \"setYear\",\n    \"settingName\",\n    \"settingValue\",\n    \"sex\",\n    \"shaderSource\",\n    \"shadowBlur\",\n    \"shadowColor\",\n    \"shadowOffsetX\",\n    \"shadowOffsetY\",\n    \"shadowRoot\",\n    \"shape\",\n    \"shape-rendering\",\n    \"shapeRendering\",\n    \"sheet\",\n    \"shift\",\n    \"shiftKey\",\n    \"shiftLeft\",\n    \"show\",\n    \"showHelp\",\n    \"showModal\",\n    \"showModalDialog\",\n    \"showModelessDialog\",\n    \"showNotification\",\n    \"sidebar\",\n    \"sign\",\n    \"signalingState\",\n    \"sin\",\n    \"singleNodeValue\",\n    \"sinh\",\n    \"size\",\n    \"sizeToContent\",\n    \"sizes\",\n    \"skewX\",\n    \"skewXSelf\",\n    \"skewY\",\n    \"skewYSelf\",\n    \"slice\",\n    \"slope\",\n    \"small\",\n    \"smooth\",\n    \"smil\",\n    \"smoothingTimeConstant\",\n    \"snapToLines\",\n    \"snapshotItem\",\n    \"snapshotLength\",\n    \"some\",\n    \"sort\",\n    \"source\",\n    \"sourceBuffer\",\n    \"sourceBuffers\",\n    \"sourceIndex\",\n    \"spacing\",\n    \"span\",\n    \"speakAs\",\n    \"speaking\",\n    \"specified\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"speechSynthesis\",\n    \"speed\",\n    \"speedOfSound\",\n    \"spellcheck\",\n    \"splice\",\n    \"split\",\n    \"splitText\",\n    \"spreadMethod\",\n    \"sqrt\",\n    \"src\",\n    \"srcElement\",\n    \"srcFilter\",\n    \"srcUrn\",\n    \"srcdoc\",\n    \"srclang\",\n    \"srcset\",\n    \"stack\",\n    \"stackTraceLimit\",\n    \"stacktrace\",\n    \"standalone\",\n    \"standby\",\n    \"start\",\n    \"startContainer\",\n    \"startIce\",\n    \"startOffset\",\n    \"startRendering\",\n    \"startTime\",\n    \"startsWith\",\n    \"state\",\n    \"status\",\n    \"statusMessage\",\n    \"statusText\",\n    \"statusbar\",\n    \"stdDeviationX\",\n    \"stdDeviationY\",\n    \"stencilFunc\",\n    \"stencilFuncSeparate\",\n    \"stencilMask\",\n    \"stencilMaskSeparate\",\n    \"stencilOp\",\n    \"stencilOpSeparate\",\n    \"step\",\n    \"stepDown\",\n    \"stepMismatch\",\n    \"stepUp\",\n    \"sticky\",\n    \"stitchTiles\",\n    \"stop\",\n    \"stop-color\",\n    \"stop-opacity\",\n    \"stopColor\",\n    \"stopImmediatePropagation\",\n    \"stopOpacity\",\n    \"stopPropagation\",\n    \"storageArea\",\n    \"storageName\",\n    \"storageStatus\",\n    \"storeSiteSpecificTrackingException\",\n    \"storeWebWideTrackingException\",\n    \"stpVersion\",\n    \"stream\",\n    \"strike\",\n    \"stringValue\",\n    \"stringify\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"strokeDasharray\",\n    \"strokeDashoffset\",\n    \"strokeLinecap\",\n    \"strokeLinejoin\",\n    \"strokeMiterlimit\",\n    \"strokeOpacity\",\n    \"strokeRect\",\n    \"strokeStyle\",\n    \"strokeText\",\n    \"strokeWidth\",\n    \"style\",\n    \"styleFloat\",\n    \"styleMedia\",\n    \"styleSheet\",\n    \"styleSheetSets\",\n    \"styleSheets\",\n    \"sub\",\n    \"subarray\",\n    \"subject\",\n    \"submit\",\n    \"subscribe\",\n    \"substr\",\n    \"substring\",\n    \"substringData\",\n    \"subtle\",\n    \"subtree\",\n    \"suffix\",\n    \"suffixes\",\n    \"summary\",\n    \"sup\",\n    \"supports\",\n    \"surfaceScale\",\n    \"surroundContents\",\n    \"suspend\",\n    \"suspendRedraw\",\n    \"swapCache\",\n    \"swapNode\",\n    \"sweepFlag\",\n    \"symbols\",\n    \"system\",\n    \"systemCode\",\n    \"systemId\",\n    \"systemLanguage\",\n    \"systemXDPI\",\n    \"systemYDPI\",\n    \"tBodies\",\n    \"tFoot\",\n    \"tHead\",\n    \"tabIndex\",\n    \"table\",\n    \"table-layout\",\n    \"tableLayout\",\n    \"tableValues\",\n    \"tag\",\n    \"tagName\",\n    \"tagUrn\",\n    \"tags\",\n    \"taintEnabled\",\n    \"takeRecords\",\n    \"tan\",\n    \"tanh\",\n    \"target\",\n    \"targetElement\",\n    \"targetTouches\",\n    \"targetX\",\n    \"targetY\",\n    \"tel\",\n    \"terminate\",\n    \"test\",\n    \"texImage2D\",\n    \"texParameterf\",\n    \"texParameteri\",\n    \"texSubImage2D\",\n    \"text\",\n    \"text-align\",\n    \"text-anchor\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-style\",\n    \"text-indent\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-transform\",\n    \"textAlign\",\n    \"textAlignLast\",\n    \"textAnchor\",\n    \"textAutospace\",\n    \"textBaseline\",\n    \"textContent\",\n    \"textDecoration\",\n    \"textDecorationBlink\",\n    \"textDecorationColor\",\n    \"textDecorationLine\",\n    \"textDecorationLineThrough\",\n    \"textDecorationNone\",\n    \"textDecorationOverline\",\n    \"textDecorationStyle\",\n    \"textDecorationUnderline\",\n    \"textIndent\",\n    \"textJustify\",\n    \"textJustifyTrim\",\n    \"textKashida\",\n    \"textKashidaSpace\",\n    \"textLength\",\n    \"textOverflow\",\n    \"textRendering\",\n    \"textShadow\",\n    \"textTracks\",\n    \"textTransform\",\n    \"textUnderlinePosition\",\n    \"then\",\n    \"threadId\",\n    \"threshold\",\n    \"tiltX\",\n    \"tiltY\",\n    \"time\",\n    \"timeEnd\",\n    \"timeStamp\",\n    \"timeout\",\n    \"timestamp\",\n    \"timestampOffset\",\n    \"timing\",\n    \"title\",\n    \"toArray\",\n    \"toBlob\",\n    \"toDataURL\",\n    \"toDateString\",\n    \"toElement\",\n    \"toExponential\",\n    \"toFixed\",\n    \"toFloat32Array\",\n    \"toFloat64Array\",\n    \"toGMTString\",\n    \"toISOString\",\n    \"toJSON\",\n    \"toLocaleDateString\",\n    \"toLocaleFormat\",\n    \"toLocaleLowerCase\",\n    \"toLocaleString\",\n    \"toLocaleTimeString\",\n    \"toLocaleUpperCase\",\n    \"toLowerCase\",\n    \"toMethod\",\n    \"toPrecision\",\n    \"toSdp\",\n    \"toSource\",\n    \"toStaticHTML\",\n    \"toString\",\n    \"toStringTag\",\n    \"toTimeString\",\n    \"toUTCString\",\n    \"toUpperCase\",\n    \"toggle\",\n    \"toggleLongPressEnabled\",\n    \"tooLong\",\n    \"toolbar\",\n    \"top\",\n    \"topMargin\",\n    \"total\",\n    \"totalFrameDelay\",\n    \"totalVideoFrames\",\n    \"touchAction\",\n    \"touches\",\n    \"trace\",\n    \"track\",\n    \"transaction\",\n    \"transactions\",\n    \"transform\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transformOrigin\",\n    \"transformPoint\",\n    \"transformString\",\n    \"transformStyle\",\n    \"transformToDocument\",\n    \"transformToFragment\",\n    \"transition\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"transitionDelay\",\n    \"transitionDuration\",\n    \"transitionProperty\",\n    \"transitionTimingFunction\",\n    \"translate\",\n    \"translateSelf\",\n    \"translationX\",\n    \"translationY\",\n    \"trim\",\n    \"trimLeft\",\n    \"trimRight\",\n    \"trueSpeed\",\n    \"trunc\",\n    \"truncate\",\n    \"type\",\n    \"typeDetail\",\n    \"typeMismatch\",\n    \"typeMustMatch\",\n    \"types\",\n    \"ubound\",\n    \"undefined\",\n    \"unescape\",\n    \"uneval\",\n    \"unicode-bidi\",\n    \"unicodeBidi\",\n    \"uniform1f\",\n    \"uniform1fv\",\n    \"uniform1i\",\n    \"uniform1iv\",\n    \"uniform2f\",\n    \"uniform2fv\",\n    \"uniform2i\",\n    \"uniform2iv\",\n    \"uniform3f\",\n    \"uniform3fv\",\n    \"uniform3i\",\n    \"uniform3iv\",\n    \"uniform4f\",\n    \"uniform4fv\",\n    \"uniform4i\",\n    \"uniform4iv\",\n    \"uniformMatrix2fv\",\n    \"uniformMatrix3fv\",\n    \"uniformMatrix4fv\",\n    \"unique\",\n    \"uniqueID\",\n    \"uniqueNumber\",\n    \"unitType\",\n    \"units\",\n    \"unloadEventEnd\",\n    \"unloadEventStart\",\n    \"unlock\",\n    \"unmount\",\n    \"unobserve\",\n    \"unpause\",\n    \"unpauseAnimations\",\n    \"unreadCount\",\n    \"unregister\",\n    \"unregisterContentHandler\",\n    \"unregisterProtocolHandler\",\n    \"unscopables\",\n    \"unselectable\",\n    \"unshift\",\n    \"unsubscribe\",\n    \"unsuspendRedraw\",\n    \"unsuspendRedrawAll\",\n    \"unwatch\",\n    \"unwrapKey\",\n    \"update\",\n    \"updateCommands\",\n    \"updateIce\",\n    \"updateInterval\",\n    \"updateSettings\",\n    \"updated\",\n    \"updating\",\n    \"upload\",\n    \"upper\",\n    \"upperBound\",\n    \"upperOpen\",\n    \"uri\",\n    \"url\",\n    \"urn\",\n    \"urns\",\n    \"usages\",\n    \"useCurrentView\",\n    \"useMap\",\n    \"useProgram\",\n    \"usedSpace\",\n    \"userAgent\",\n    \"userLanguage\",\n    \"username\",\n    \"v8BreakIterator\",\n    \"vAlign\",\n    \"vLink\",\n    \"valid\",\n    \"validateProgram\",\n    \"validationMessage\",\n    \"validity\",\n    \"value\",\n    \"valueAsDate\",\n    \"valueAsNumber\",\n    \"valueAsString\",\n    \"valueInSpecifiedUnits\",\n    \"valueMissing\",\n    \"valueOf\",\n    \"valueText\",\n    \"valueType\",\n    \"values\",\n    \"vector-effect\",\n    \"vectorEffect\",\n    \"velocityAngular\",\n    \"velocityExpansion\",\n    \"velocityX\",\n    \"velocityY\",\n    \"vendor\",\n    \"vendorSub\",\n    \"verify\",\n    \"version\",\n    \"vertexAttrib1f\",\n    \"vertexAttrib1fv\",\n    \"vertexAttrib2f\",\n    \"vertexAttrib2fv\",\n    \"vertexAttrib3f\",\n    \"vertexAttrib3fv\",\n    \"vertexAttrib4f\",\n    \"vertexAttrib4fv\",\n    \"vertexAttribDivisorANGLE\",\n    \"vertexAttribPointer\",\n    \"vertical\",\n    \"vertical-align\",\n    \"verticalAlign\",\n    \"verticalOverflow\",\n    \"vibrate\",\n    \"videoHeight\",\n    \"videoTracks\",\n    \"videoWidth\",\n    \"view\",\n    \"viewBox\",\n    \"viewBoxString\",\n    \"viewTarget\",\n    \"viewTargetString\",\n    \"viewport\",\n    \"viewportAnchorX\",\n    \"viewportAnchorY\",\n    \"viewportElement\",\n    \"visibility\",\n    \"visibilityState\",\n    \"visible\",\n    \"vlinkColor\",\n    \"voice\",\n    \"volume\",\n    \"vrml\",\n    \"vspace\",\n    \"w\",\n    \"wand\",\n    \"warn\",\n    \"wasClean\",\n    \"watch\",\n    \"watchPosition\",\n    \"webdriver\",\n    \"webkitAddKey\",\n    \"webkitAnimation\",\n    \"webkitAnimationDelay\",\n    \"webkitAnimationDirection\",\n    \"webkitAnimationDuration\",\n    \"webkitAnimationFillMode\",\n    \"webkitAnimationIterationCount\",\n    \"webkitAnimationName\",\n    \"webkitAnimationPlayState\",\n    \"webkitAnimationTimingFunction\",\n    \"webkitAppearance\",\n    \"webkitAudioContext\",\n    \"webkitAudioDecodedByteCount\",\n    \"webkitAudioPannerNode\",\n    \"webkitBackfaceVisibility\",\n    \"webkitBackground\",\n    \"webkitBackgroundAttachment\",\n    \"webkitBackgroundClip\",\n    \"webkitBackgroundColor\",\n    \"webkitBackgroundImage\",\n    \"webkitBackgroundOrigin\",\n    \"webkitBackgroundPosition\",\n    \"webkitBackgroundPositionX\",\n    \"webkitBackgroundPositionY\",\n    \"webkitBackgroundRepeat\",\n    \"webkitBackgroundSize\",\n    \"webkitBackingStorePixelRatio\",\n    \"webkitBorderImage\",\n    \"webkitBorderImageOutset\",\n    \"webkitBorderImageRepeat\",\n    \"webkitBorderImageSlice\",\n    \"webkitBorderImageSource\",\n    \"webkitBorderImageWidth\",\n    \"webkitBoxAlign\",\n    \"webkitBoxDirection\",\n    \"webkitBoxFlex\",\n    \"webkitBoxOrdinalGroup\",\n    \"webkitBoxOrient\",\n    \"webkitBoxPack\",\n    \"webkitBoxSizing\",\n    \"webkitCancelAnimationFrame\",\n    \"webkitCancelFullScreen\",\n    \"webkitCancelKeyRequest\",\n    \"webkitCancelRequestAnimationFrame\",\n    \"webkitClearResourceTimings\",\n    \"webkitClosedCaptionsVisible\",\n    \"webkitConvertPointFromNodeToPage\",\n    \"webkitConvertPointFromPageToNode\",\n    \"webkitCreateShadowRoot\",\n    \"webkitCurrentFullScreenElement\",\n    \"webkitCurrentPlaybackTargetIsWireless\",\n    \"webkitDirectionInvertedFromDevice\",\n    \"webkitDisplayingFullscreen\",\n    \"webkitEnterFullScreen\",\n    \"webkitEnterFullscreen\",\n    \"webkitExitFullScreen\",\n    \"webkitExitFullscreen\",\n    \"webkitExitPointerLock\",\n    \"webkitFullScreenKeyboardInputAllowed\",\n    \"webkitFullscreenElement\",\n    \"webkitFullscreenEnabled\",\n    \"webkitGenerateKeyRequest\",\n    \"webkitGetAsEntry\",\n    \"webkitGetDatabaseNames\",\n    \"webkitGetEntries\",\n    \"webkitGetEntriesByName\",\n    \"webkitGetEntriesByType\",\n    \"webkitGetFlowByName\",\n    \"webkitGetGamepads\",\n    \"webkitGetImageDataHD\",\n    \"webkitGetNamedFlows\",\n    \"webkitGetRegionFlowRanges\",\n    \"webkitGetUserMedia\",\n    \"webkitHasClosedCaptions\",\n    \"webkitHidden\",\n    \"webkitIDBCursor\",\n    \"webkitIDBDatabase\",\n    \"webkitIDBDatabaseError\",\n    \"webkitIDBDatabaseException\",\n    \"webkitIDBFactory\",\n    \"webkitIDBIndex\",\n    \"webkitIDBKeyRange\",\n    \"webkitIDBObjectStore\",\n    \"webkitIDBRequest\",\n    \"webkitIDBTransaction\",\n    \"webkitImageSmoothingEnabled\",\n    \"webkitIndexedDB\",\n    \"webkitInitMessageEvent\",\n    \"webkitIsFullScreen\",\n    \"webkitKeys\",\n    \"webkitLineDashOffset\",\n    \"webkitLockOrientation\",\n    \"webkitMatchesSelector\",\n    \"webkitMediaStream\",\n    \"webkitNotifications\",\n    \"webkitOfflineAudioContext\",\n    \"webkitOrientation\",\n    \"webkitPeerConnection00\",\n    \"webkitPersistentStorage\",\n    \"webkitPointerLockElement\",\n    \"webkitPostMessage\",\n    \"webkitPreservesPitch\",\n    \"webkitPutImageDataHD\",\n    \"webkitRTCPeerConnection\",\n    \"webkitRegionOverset\",\n    \"webkitRequestAnimationFrame\",\n    \"webkitRequestFileSystem\",\n    \"webkitRequestFullScreen\",\n    \"webkitRequestFullscreen\",\n    \"webkitRequestPointerLock\",\n    \"webkitResolveLocalFileSystemURL\",\n    \"webkitSetMediaKeys\",\n    \"webkitSetResourceTimingBufferSize\",\n    \"webkitShadowRoot\",\n    \"webkitShowPlaybackTargetPicker\",\n    \"webkitSlice\",\n    \"webkitSpeechGrammar\",\n    \"webkitSpeechGrammarList\",\n    \"webkitSpeechRecognition\",\n    \"webkitSpeechRecognitionError\",\n    \"webkitSpeechRecognitionEvent\",\n    \"webkitStorageInfo\",\n    \"webkitSupportsFullscreen\",\n    \"webkitTemporaryStorage\",\n    \"webkitTextSizeAdjust\",\n    \"webkitTransform\",\n    \"webkitTransformOrigin\",\n    \"webkitTransition\",\n    \"webkitTransitionDelay\",\n    \"webkitTransitionDuration\",\n    \"webkitTransitionProperty\",\n    \"webkitTransitionTimingFunction\",\n    \"webkitURL\",\n    \"webkitUnlockOrientation\",\n    \"webkitUserSelect\",\n    \"webkitVideoDecodedByteCount\",\n    \"webkitVisibilityState\",\n    \"webkitWirelessVideoPlaybackDisabled\",\n    \"webkitdropzone\",\n    \"webstore\",\n    \"weight\",\n    \"whatToShow\",\n    \"wheelDelta\",\n    \"wheelDeltaX\",\n    \"wheelDeltaY\",\n    \"which\",\n    \"white-space\",\n    \"whiteSpace\",\n    \"wholeText\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"willChange\",\n    \"willValidate\",\n    \"window\",\n    \"withCredentials\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"wordBreak\",\n    \"wordSpacing\",\n    \"wordWrap\",\n    \"wrap\",\n    \"wrapKey\",\n    \"write\",\n    \"writeln\",\n    \"writingMode\",\n    \"x\",\n    \"x1\",\n    \"x2\",\n    \"xChannelSelector\",\n    \"xmlEncoding\",\n    \"xmlStandalone\",\n    \"xmlVersion\",\n    \"xmlbase\",\n    \"xmllang\",\n    \"xmlspace\",\n    \"y\",\n    \"y1\",\n    \"y2\",\n    \"yChannelSelector\",\n    \"yandex\",\n    \"z\",\n    \"z-index\",\n    \"zIndex\",\n    \"zoom\",\n    \"zoomAndPan\",\n    \"zoomRectScreen\"\n]\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n/* global global, self */\n\nimport {\n    defaults,\n    push_uniq,\n} from \"./utils/index.js\";\nimport { base54 } from \"./scope\";\nimport {\n    AST_Call,\n    AST_Conditional,\n    AST_Dot,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    TreeTransformer,\n    TreeWalker,\n} from \"./ast.js\";\nimport { domprops } from \"../tools/domprops.js\";\n\nfunction find_builtins(reserved) {\n    domprops.forEach(add);\n\n    // Compatibility fix for some standard defined globals not defined on every js environment\n    var new_globals = [\"Symbol\", \"Map\", \"Promise\", \"Proxy\", \"Reflect\", \"Set\", \"WeakMap\", \"WeakSet\"];\n    var objects = {};\n    var global_ref = typeof global === \"object\" ? global : self;\n\n    new_globals.forEach(function (new_global) {\n        objects[new_global] = global_ref[new_global] || new Function();\n    });\n\n    // NaN will be included due to Number.NaN\n    [\n        \"null\",\n        \"true\",\n        \"false\",\n        \"Infinity\",\n        \"-Infinity\",\n        \"undefined\",\n    ].forEach(add);\n    [ Object, Array, Function, Number,\n      String, Boolean, Error, Math,\n      Date, RegExp, objects.Symbol, ArrayBuffer,\n      DataView, decodeURI, decodeURIComponent,\n      encodeURI, encodeURIComponent, eval, EvalError,\n      Float32Array, Float64Array, Int8Array, Int16Array,\n      Int32Array, isFinite, isNaN, JSON, objects.Map, parseFloat,\n      parseInt, objects.Promise, objects.Proxy, RangeError, ReferenceError,\n      objects.Reflect, objects.Set, SyntaxError, TypeError, Uint8Array,\n      Uint8ClampedArray, Uint16Array, Uint32Array, URIError,\n      objects.WeakMap, objects.WeakSet\n    ].forEach(function(ctor) {\n        Object.getOwnPropertyNames(ctor).map(add);\n        if (ctor.prototype) {\n            Object.getOwnPropertyNames(ctor.prototype).map(add);\n        }\n    });\n    function add(name) {\n        reserved.add(name);\n    }\n}\n\nfunction reserve_quoted_keys(ast, reserved) {\n    function add(name) {\n        push_uniq(reserved, name);\n    }\n\n    ast.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_ObjectKeyVal && node.quote) {\n            add(node.key);\n        } else if (node instanceof AST_ObjectProperty && node.quote) {\n            add(node.key.name);\n        } else if (node instanceof AST_Sub) {\n            addStrings(node.property, add);\n        }\n    }));\n}\n\nfunction addStrings(node, add) {\n    node.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Sequence) {\n            addStrings(node.tail_node(), add);\n        } else if (node instanceof AST_String) {\n            add(node.value);\n        } else if (node instanceof AST_Conditional) {\n            addStrings(node.consequent, add);\n            addStrings(node.alternative, add);\n        }\n        return true;\n    }));\n}\n\nfunction mangle_properties(ast, options) {\n    options = defaults(options, {\n        builtins: false,\n        cache: null,\n        debug: false,\n        keep_quoted: false,\n        only_cache: false,\n        regex: null,\n        reserved: null,\n        undeclared: false,\n    }, true);\n\n    var reserved_option = options.reserved;\n    if (!Array.isArray(reserved_option)) reserved_option = [reserved_option];\n    var reserved = new Set(reserved_option);\n    if (!options.builtins) find_builtins(reserved);\n\n    var cname = -1;\n    var cache;\n    if (options.cache) {\n        cache = options.cache.props;\n        cache.forEach(function(mangled_name) {\n            reserved.add(mangled_name);\n        });\n    } else {\n        cache = new Map();\n    }\n\n    var regex = options.regex && new RegExp(options.regex);\n\n    // note debug is either false (disabled), or a string of the debug suffix to use (enabled).\n    // note debug may be enabled as an empty string, which is falsey. Also treat passing 'true'\n    // the same as passing an empty string.\n    var debug = options.debug !== false;\n    var debug_name_suffix;\n    if (debug) {\n        debug_name_suffix = (options.debug === true ? \"\" : options.debug);\n    }\n\n    var names_to_mangle = new Set();\n    var unmangleable = new Set();\n\n    var keep_quoted_strict = options.keep_quoted === \"strict\";\n\n    // step 1: find candidates to mangle\n    ast.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_ObjectKeyVal) {\n            if (typeof node.key == \"string\" &&\n                (!keep_quoted_strict || !node.quote)) {\n                add(node.key);\n            }\n        } else if (node instanceof AST_ObjectProperty) {\n            // setter or getter, since KeyVal is handled above\n            if (!keep_quoted_strict || !node.key.end.quote) {\n                add(node.key.name);\n            }\n        } else if (node instanceof AST_Dot) {\n            var declared = !!options.undeclared;\n            if (!declared) {\n                var root = node;\n                while (root.expression) {\n                    root = root.expression;\n                }\n                declared = !(root.thedef && root.thedef.undeclared);\n            }\n            if (declared &&\n                (!keep_quoted_strict || !node.quote)) {\n                add(node.property);\n            }\n        } else if (node instanceof AST_Sub) {\n            if (!keep_quoted_strict) {\n                addStrings(node.property, add);\n            }\n        } else if (node instanceof AST_Call\n            && node.expression.print_to_string() == \"Object.defineProperty\") {\n            addStrings(node.args[1], add);\n        }\n    }));\n\n    // step 2: transform the tree, renaming properties\n    return ast.transform(new TreeTransformer(function(node) {\n        if (node instanceof AST_ObjectKeyVal) {\n            if (typeof node.key == \"string\" &&\n                (!keep_quoted_strict || !node.quote)) {\n                node.key = mangle(node.key);\n            }\n        } else if (node instanceof AST_ObjectProperty) {\n            // setter or getter\n            if (!keep_quoted_strict || !node.key.end.quote) {\n                node.key.name = mangle(node.key.name);\n            }\n        } else if (node instanceof AST_Dot) {\n            if (!keep_quoted_strict || !node.quote) {\n                node.property = mangle(node.property);\n            }\n        } else if (!options.keep_quoted && node instanceof AST_Sub) {\n            node.property = mangleStrings(node.property);\n        } else if (node instanceof AST_Call\n            && node.expression.print_to_string() == \"Object.defineProperty\") {\n            node.args[1] = mangleStrings(node.args[1]);\n        }\n    }));\n\n    // only function declarations after this line\n\n    function can_mangle(name) {\n        if (unmangleable.has(name)) return false;\n        if (reserved.has(name)) return false;\n        if (options.only_cache) {\n            return cache.has(name);\n        }\n        if (/^-?[0-9]+(\\.[0-9]+)?(e[+-][0-9]+)?$/.test(name)) return false;\n        return true;\n    }\n\n    function should_mangle(name) {\n        if (regex && !regex.test(name)) return false;\n        if (reserved.has(name)) return false;\n        return cache.has(name)\n            || names_to_mangle.has(name);\n    }\n\n    function add(name) {\n        if (can_mangle(name))\n            names_to_mangle.add(name);\n\n        if (!should_mangle(name)) {\n            unmangleable.add(name);\n        }\n    }\n\n    function mangle(name) {\n        if (!should_mangle(name)) {\n            return name;\n        }\n\n        var mangled = cache.get(name);\n        if (!mangled) {\n            if (debug) {\n                // debug mode: use a prefix and suffix to preserve readability, e.g. o.foo -> o._$foo$NNN_.\n                var debug_mangled = \"_$\" + name + \"$\" + debug_name_suffix + \"_\";\n\n                if (can_mangle(debug_mangled)) {\n                    mangled = debug_mangled;\n                }\n            }\n\n            // either debug mode is off, or it is on and we could not use the mangled name\n            if (!mangled) {\n                do {\n                    mangled = base54(++cname);\n                } while (!can_mangle(mangled));\n            }\n\n            cache.set(name, mangled);\n        }\n        return mangled;\n    }\n\n    function mangleStrings(node) {\n        return node.transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Sequence) {\n                var last = node.expressions.length - 1;\n                node.expressions[last] = mangleStrings(node.expressions[last]);\n            } else if (node instanceof AST_String) {\n                node.value = mangle(node.value);\n            } else if (node instanceof AST_Conditional) {\n                node.consequent = mangleStrings(node.consequent);\n                node.alternative = mangleStrings(node.alternative);\n            }\n            return node;\n        }));\n    }\n}\n\nexport {\n    reserve_quoted_keys,\n    mangle_properties,\n};\n","\"use strict\";\n/* eslint-env browser, es6, node */\n\nimport {\n    defaults,\n    map_from_object,\n    map_to_object,\n    HOP,\n} from \"./utils/index.js\";\nimport {\n    AST_Node,\n    AST_Toplevel,\n} from \"./ast.js\";\nimport { parse } from \"./parse.js\";\nimport { OutputStream } from \"./output.js\";\nimport { Compressor } from \"./compress/index.js\";\nimport { base54 } from \"./scope.js\";\nimport { SourceMap } from \"./sourcemap.js\";\nimport {\n    mangle_properties,\n    reserve_quoted_keys,\n} from \"./propmangle.js\";\n\nvar to_ascii = typeof atob == \"undefined\" ? function(b64) {\n    return Buffer.from(b64, \"base64\").toString();\n} : atob;\nvar to_base64 = typeof btoa == \"undefined\" ? function(str) {\n    return Buffer.from(str).toString(\"base64\");\n} : btoa;\n\nfunction read_source_map(code) {\n    var match = /(?:^|[^.])\\/\\/# sourceMappingURL=data:application\\/json(;[\\w=-]*)?;base64,([+/0-9A-Za-z]*=*)\\s*$/.exec(code);\n    if (!match) {\n        AST_Node.warn(\"inline source map not found\");\n        return null;\n    }\n    return to_ascii(match[2]);\n}\n\nfunction set_shorthand(name, options, keys) {\n    if (options[name]) {\n        keys.forEach(function(key) {\n            if (options[key]) {\n                if (typeof options[key] != \"object\") options[key] = {};\n                if (!(name in options[key])) options[key][name] = options[name];\n            }\n        });\n    }\n}\n\nfunction init_cache(cache) {\n    if (!cache) return;\n    if (!(\"props\" in cache)) {\n        cache.props = new Map();\n    } else if (!(cache.props instanceof Map)) {\n        cache.props = map_from_object(cache.props);\n    }\n}\n\nfunction to_json(cache) {\n    return {\n        props: map_to_object(cache.props)\n    };\n}\n\nfunction minify(files, options) {\n    var warn_function = AST_Node.warn_function;\n    try {\n        options = defaults(options, {\n            compress: {},\n            ecma: undefined,\n            enclose: false,\n            ie8: false,\n            keep_classnames: undefined,\n            keep_fnames: false,\n            mangle: {},\n            module: false,\n            nameCache: null,\n            output: {},\n            parse: {},\n            rename: undefined,\n            safari10: false,\n            sourceMap: false,\n            timings: false,\n            toplevel: false,\n            warnings: false,\n            wrap: false,\n        }, true);\n        var timings = options.timings && {\n            start: Date.now()\n        };\n        if (options.keep_classnames === undefined) {\n            options.keep_classnames = options.keep_fnames;\n        }\n        if (options.rename === undefined) {\n            options.rename = options.compress && options.mangle;\n        }\n        set_shorthand(\"ecma\", options, [ \"parse\", \"compress\", \"output\" ]);\n        set_shorthand(\"ie8\", options, [ \"compress\", \"mangle\", \"output\" ]);\n        set_shorthand(\"keep_classnames\", options, [ \"compress\", \"mangle\" ]);\n        set_shorthand(\"keep_fnames\", options, [ \"compress\", \"mangle\" ]);\n        set_shorthand(\"module\", options, [ \"parse\", \"compress\", \"mangle\" ]);\n        set_shorthand(\"safari10\", options, [ \"mangle\", \"output\" ]);\n        set_shorthand(\"toplevel\", options, [ \"compress\", \"mangle\" ]);\n        set_shorthand(\"warnings\", options, [ \"compress\" ]);\n        var quoted_props;\n        if (options.mangle) {\n            options.mangle = defaults(options.mangle, {\n                cache: options.nameCache && (options.nameCache.vars || {}),\n                eval: false,\n                ie8: false,\n                keep_classnames: false,\n                keep_fnames: false,\n                module: false,\n                properties: false,\n                reserved: [],\n                safari10: false,\n                toplevel: false,\n            }, true);\n            if (options.mangle.properties) {\n                if (typeof options.mangle.properties != \"object\") {\n                    options.mangle.properties = {};\n                }\n                if (options.mangle.properties.keep_quoted) {\n                    quoted_props = options.mangle.properties.reserved;\n                    if (!Array.isArray(quoted_props)) quoted_props = [];\n                    options.mangle.properties.reserved = quoted_props;\n                }\n                if (options.nameCache && !(\"cache\" in options.mangle.properties)) {\n                    options.mangle.properties.cache = options.nameCache.props || {};\n                }\n            }\n            init_cache(options.mangle.cache);\n            init_cache(options.mangle.properties.cache);\n        }\n        if (options.sourceMap) {\n            options.sourceMap = defaults(options.sourceMap, {\n                content: null,\n                filename: null,\n                includeSources: false,\n                root: null,\n                url: null,\n            }, true);\n        }\n        var warnings = [];\n        if (options.warnings && !AST_Node.warn_function) {\n            AST_Node.warn_function = function(warning) {\n                warnings.push(warning);\n            };\n        }\n        if (timings) timings.parse = Date.now();\n        var toplevel;\n        if (files instanceof AST_Toplevel) {\n            toplevel = files;\n        } else {\n            if (typeof files == \"string\") {\n                files = [ files ];\n            }\n            options.parse = options.parse || {};\n            options.parse.toplevel = null;\n            for (var name in files) if (HOP(files, name)) {\n                options.parse.filename = name;\n                options.parse.toplevel = parse(files[name], options.parse);\n                if (options.sourceMap && options.sourceMap.content == \"inline\") {\n                    if (Object.keys(files).length > 1)\n                        throw new Error(\"inline source map only works with singular input\");\n                    options.sourceMap.content = read_source_map(files[name]);\n                }\n            }\n            toplevel = options.parse.toplevel;\n        }\n        if (quoted_props && options.mangle.properties.keep_quoted !== \"strict\") {\n            reserve_quoted_keys(toplevel, quoted_props);\n        }\n        if (options.wrap) {\n            toplevel = toplevel.wrap_commonjs(options.wrap);\n        }\n        if (options.enclose) {\n            toplevel = toplevel.wrap_enclose(options.enclose);\n        }\n        if (timings) timings.rename = Date.now();\n        // disable rename on harmony due to expand_names bug in for-of loops\n        // https://github.com/mishoo/UglifyJS2/issues/2794\n        if (0 && options.rename) {\n            toplevel.figure_out_scope(options.mangle);\n            toplevel.expand_names(options.mangle);\n        }\n        if (timings) timings.compress = Date.now();\n        if (options.compress) toplevel = new Compressor(options.compress).compress(toplevel);\n        if (timings) timings.scope = Date.now();\n        if (options.mangle) toplevel.figure_out_scope(options.mangle);\n        if (timings) timings.mangle = Date.now();\n        if (options.mangle) {\n            base54.reset();\n            toplevel.compute_char_frequency(options.mangle);\n            toplevel.mangle_names(options.mangle);\n        }\n        if (timings) timings.properties = Date.now();\n        if (options.mangle && options.mangle.properties) {\n            toplevel = mangle_properties(toplevel, options.mangle.properties);\n        }\n        if (timings) timings.output = Date.now();\n        var result = {};\n        if (options.output.ast) {\n            result.ast = toplevel;\n        }\n        if (!HOP(options.output, \"code\") || options.output.code) {\n            if (options.sourceMap) {\n                if (typeof options.sourceMap.content == \"string\") {\n                    options.sourceMap.content = JSON.parse(options.sourceMap.content);\n                }\n                options.output.source_map = SourceMap({\n                    file: options.sourceMap.filename,\n                    orig: options.sourceMap.content,\n                    root: options.sourceMap.root\n                });\n                if (options.sourceMap.includeSources) {\n                    if (files instanceof AST_Toplevel) {\n                        throw new Error(\"original source content unavailable\");\n                    } else for (var name in files) if (HOP(files, name)) {\n                        options.output.source_map.get().setSourceContent(name, files[name]);\n                    }\n                }\n            }\n            delete options.output.ast;\n            delete options.output.code;\n            var stream = OutputStream(options.output);\n            toplevel.print(stream);\n            result.code = stream.get();\n            if (options.sourceMap) {\n                result.map = options.output.source_map.toString();\n                if (options.sourceMap.url == \"inline\") {\n                    result.code += \"\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\" + to_base64(result.map);\n                } else if (options.sourceMap.url) {\n                    result.code += \"\\n//# sourceMappingURL=\" + options.sourceMap.url;\n                }\n            }\n        }\n        if (options.nameCache && options.mangle) {\n            if (options.mangle.cache) options.nameCache.vars = to_json(options.mangle.cache);\n            if (options.mangle.properties && options.mangle.properties.cache) {\n                options.nameCache.props = to_json(options.mangle.properties.cache);\n            }\n        }\n        if (timings) {\n            timings.end = Date.now();\n            result.timings = {\n                parse: 1e-3 * (timings.rename - timings.parse),\n                rename: 1e-3 * (timings.compress - timings.rename),\n                compress: 1e-3 * (timings.scope - timings.compress),\n                scope: 1e-3 * (timings.mangle - timings.scope),\n                mangle: 1e-3 * (timings.properties - timings.mangle),\n                properties: 1e-3 * (timings.output - timings.properties),\n                output: 1e-3 * (timings.end - timings.output),\n                total: 1e-3 * (timings.end - timings.start)\n            };\n        }\n        if (warnings.length) {\n            result.warnings = warnings;\n        }\n        return result;\n    } catch (ex) {\n        return { error: ex };\n    } finally {\n        AST_Node.warn_function = warn_function;\n    }\n}\n\nexport {\n  minify,\n  to_ascii,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport MOZ_SourceMap from \"source-map\";\nimport {\n    defaults,\n} from \"./utils/index.js\";\n\n// a small wrapper around fitzgen's source-map library\nfunction SourceMap(options) {\n    options = defaults(options, {\n        file : null,\n        root : null,\n        orig : null,\n\n        orig_line_diff : 0,\n        dest_line_diff : 0,\n    });\n    var generator = new MOZ_SourceMap.SourceMapGenerator({\n        file       : options.file,\n        sourceRoot : options.root\n    });\n    var orig_map = options.orig && new MOZ_SourceMap.SourceMapConsumer(options.orig);\n\n    if (orig_map) {\n        orig_map.sources.forEach(function(source) {\n            var sourceContent = orig_map.sourceContentFor(source, true);\n            if (sourceContent) {\n                generator.setSourceContent(source, sourceContent);\n            }\n        });\n    }\n\n    function add(source, gen_line, gen_col, orig_line, orig_col, name) {\n        if (orig_map) {\n            var info = orig_map.originalPositionFor({\n                line: orig_line,\n                column: orig_col\n            });\n            if (info.source === null) {\n                return;\n            }\n            source = info.source;\n            orig_line = info.line;\n            orig_col = info.column;\n            name = info.name || name;\n        }\n        generator.addMapping({\n            generated : { line: gen_line + options.dest_line_diff, column: gen_col },\n            original  : { line: orig_line + options.orig_line_diff, column: orig_col },\n            source    : source,\n            name      : name\n        });\n    }\n    return {\n        add        : add,\n        get        : function() { return generator; },\n        toString   : function() { return JSON.stringify(generator.toJSON()); }\n    };\n}\n\nexport {\n    SourceMap,\n};\n","import { minify } from \"../lib/minify\";\n\nexport function default_options() {\n    const defs = {};\n\n    Object.keys(infer_options({ 0: 0 })).forEach((component) => {\n        const options = infer_options({\n            [component]: {0: 0}\n        });\n\n        if (options) defs[component] = options;\n    });\n    return defs;\n}\n\nfunction infer_options(options) {\n    var result = minify(\"\", options);\n    return result.error && result.error.defs;\n}\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport * as ast from \"./ast.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Atom,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\n\n(function() {\n\n    var normalize_directives = function(body) {\n        var in_directive = true;\n\n        for (var i = 0; i < body.length; i++) {\n            if (in_directive && body[i] instanceof AST_Statement && body[i].body instanceof AST_String) {\n                body[i] = new AST_Directive({\n                    start: body[i].start,\n                    end: body[i].end,\n                    value: body[i].body.value\n                });\n            } else if (in_directive && !(body[i] instanceof AST_Statement && body[i].body instanceof AST_String)) {\n                in_directive = false;\n            }\n        }\n\n        return body;\n    };\n\n    var MOZ_TO_ME = {\n        Program: function(M) {\n            return new AST_Toplevel({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: normalize_directives(M.body.map(from_moz))\n            });\n        },\n        ArrayPattern: function(M) {\n            return new AST_Destructuring({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                names: M.elements.map(function(elm) {\n                    if (elm === null) {\n                        return new AST_Hole();\n                    }\n                    return from_moz(elm);\n                }),\n                is_array: true\n            });\n        },\n        ObjectPattern: function(M) {\n            return new AST_Destructuring({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                names: M.properties.map(from_moz),\n                is_array: false\n            });\n        },\n        AssignmentPattern: function(M) {\n            var Type = AST_Binary;\n            if(FROM_MOZ_STACK.length > 2) {\n                var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];\n                if(p.type === \"FunctionDeclaration\"\n                   || p.type === \"FunctionExpression\"\n                   || p.type === \"ArrowFunctionExpression\") {\n                    Type = AST_DefaultAssign;\n                }\n            }\n            return new Type({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                left: from_moz(M.left),\n                operator: \"=\",\n                right: from_moz(M.right)\n            });\n        },\n        SpreadElement: function(M) {\n            return new AST_Expansion({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.argument)\n            });\n        },\n        RestElement: function(M) {\n            return new AST_Expansion({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.argument)\n            });\n        },\n        TemplateElement: function(M) {\n            return new AST_TemplateSegment({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                value: M.value.cooked,\n                raw: M.value.raw\n            });\n        },\n        TemplateLiteral: function(M) {\n            var segments = [];\n            for (var i = 0; i < M.quasis.length; i++) {\n                segments.push(from_moz(M.quasis[i]));\n                if (M.expressions[i]) {\n                    segments.push(from_moz(M.expressions[i]));\n                }\n            }\n            return new AST_TemplateString({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                segments: segments\n            });\n        },\n        TaggedTemplateExpression: function(M) {\n            return new AST_PrefixedTemplateString({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                template_string: from_moz(M.quasi),\n                prefix: from_moz(M.tag)\n            });\n        },\n        FunctionDeclaration: function(M) {\n            return new AST_Defun({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                is_generator: M.generator,\n                async: M.async,\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        FunctionExpression: function(M) {\n            return new AST_Function({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                is_generator: M.generator,\n                async: M.async,\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        ArrowFunctionExpression: function(M) {\n            return new AST_Arrow({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                argnames: M.params.map(from_moz),\n                body: from_moz(M.body),\n                async: M.async,\n            });\n        },\n        ExpressionStatement: function(M) {\n            return new AST_SimpleStatement({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: from_moz(M.expression)\n            });\n        },\n        TryStatement: function(M) {\n            var handlers = M.handlers || [M.handler];\n            if (handlers.length > 1 || M.guardedHandlers && M.guardedHandlers.length) {\n                throw new Error(\"Multiple catch clauses are not supported.\");\n            }\n            return new AST_Try({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                body     : from_moz(M.block).body,\n                bcatch   : from_moz(handlers[0]),\n                bfinally : M.finalizer ? new AST_Finally(from_moz(M.finalizer)) : null\n            });\n        },\n        Property: function(M) {\n            var key = M.key;\n            var args = {\n                start    : my_start_token(key || M.value),\n                end      : my_end_token(M.value),\n                key      : key.type == \"Identifier\" ? key.name : key.value,\n                value    : from_moz(M.value)\n            };\n            if (M.computed) {\n                args.key = from_moz(M.key);\n            }\n            if (M.method) {\n                args.is_generator = M.value.generator;\n                args.async = M.value.async;\n                if (!M.computed) {\n                    args.key = new AST_SymbolMethod({ name: args.key });\n                } else {\n                    args.key = from_moz(M.key);\n                }\n                return new AST_ConciseMethod(args);\n            }\n            if (M.kind == \"init\") {\n                if (key.type != \"Identifier\" && key.type != \"Literal\") {\n                    args.key = from_moz(key);\n                }\n                return new AST_ObjectKeyVal(args);\n            }\n            if (typeof args.key === \"string\" || typeof args.key === \"number\") {\n                args.key = new AST_SymbolMethod({\n                    name: args.key\n                });\n            }\n            args.value = new AST_Accessor(args.value);\n            if (M.kind == \"get\") return new AST_ObjectGetter(args);\n            if (M.kind == \"set\") return new AST_ObjectSetter(args);\n            if (M.kind == \"method\") {\n                args.async = M.value.async;\n                args.is_generator = M.value.generator;\n                args.quote = M.computed ? \"\\\"\" : null;\n                return new AST_ConciseMethod(args);\n            }\n        },\n        MethodDefinition: function(M) {\n            var args = {\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                key      : M.computed ? from_moz(M.key) : new AST_SymbolMethod({ name: M.key.name || M.key.value }),\n                value    : from_moz(M.value),\n                static   : M.static,\n            };\n            if (M.kind == \"get\") {\n                return new AST_ObjectGetter(args);\n            }\n            if (M.kind == \"set\") {\n                return new AST_ObjectSetter(args);\n            }\n            args.is_generator = M.value.generator;\n            args.async = M.value.async;\n            return new AST_ConciseMethod(args);\n        },\n        ArrayExpression: function(M) {\n            return new AST_Array({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                elements : M.elements.map(function(elem) {\n                    return elem === null ? new AST_Hole() : from_moz(elem);\n                })\n            });\n        },\n        ObjectExpression: function(M) {\n            return new AST_Object({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                properties : M.properties.map(function(prop) {\n                    if (prop.type === \"SpreadElement\") {\n                        return from_moz(prop);\n                    }\n                    prop.type = \"Property\";\n                    return from_moz(prop);\n                })\n            });\n        },\n        SequenceExpression: function(M) {\n            return new AST_Sequence({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expressions: M.expressions.map(from_moz)\n            });\n        },\n        MemberExpression: function(M) {\n            return new (M.computed ? AST_Sub : AST_Dot)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                property   : M.computed ? from_moz(M.property) : M.property.name,\n                expression : from_moz(M.object)\n            });\n        },\n        SwitchCase: function(M) {\n            return new (M.test ? AST_Case : AST_Default)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expression : from_moz(M.test),\n                body       : M.consequent.map(from_moz)\n            });\n        },\n        VariableDeclaration: function(M) {\n            return new (M.kind === \"const\" ? AST_Const :\n                        M.kind === \"let\" ? AST_Let : AST_Var)({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                definitions : M.declarations.map(from_moz)\n            });\n        },\n\n        ImportDeclaration: function(M) {\n            var imported_name = null;\n            var imported_names = null;\n            M.specifiers.forEach(function (specifier) {\n                if (specifier.type === \"ImportSpecifier\") {\n                    if (!imported_names) { imported_names = []; }\n                    imported_names.push(new AST_NameMapping({\n                        start: my_start_token(specifier),\n                        end: my_end_token(specifier),\n                        foreign_name: from_moz(specifier.imported),\n                        name: from_moz(specifier.local)\n                    }));\n                } else if (specifier.type === \"ImportDefaultSpecifier\") {\n                    imported_name = from_moz(specifier.local);\n                } else if (specifier.type === \"ImportNamespaceSpecifier\") {\n                    if (!imported_names) { imported_names = []; }\n                    imported_names.push(new AST_NameMapping({\n                        start: my_start_token(specifier),\n                        end: my_end_token(specifier),\n                        foreign_name: new AST_SymbolImportForeign({ name: \"*\" }),\n                        name: from_moz(specifier.local)\n                    }));\n                }\n            });\n            return new AST_Import({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                imported_name: imported_name,\n                imported_names : imported_names,\n                module_name : from_moz(M.source)\n            });\n        },\n        ExportAllDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_names: [\n                    new AST_NameMapping({\n                        name: new AST_SymbolExportForeign({ name: \"*\" }),\n                        foreign_name: new AST_SymbolExportForeign({ name: \"*\" })\n                    })\n                ],\n                module_name: from_moz(M.source)\n            });\n        },\n        ExportNamedDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_definition: from_moz(M.declaration),\n                exported_names: M.specifiers && M.specifiers.length ? M.specifiers.map(function (specifier) {\n                    return new AST_NameMapping({\n                        foreign_name: from_moz(specifier.exported),\n                        name: from_moz(specifier.local)\n                    });\n                }) : null,\n                module_name: from_moz(M.source)\n            });\n        },\n        ExportDefaultDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_value: from_moz(M.declaration),\n                is_default: true\n            });\n        },\n        Literal: function(M) {\n            var val = M.value, args = {\n                start  : my_start_token(M),\n                end    : my_end_token(M)\n            };\n            if (val === null) return new AST_Null(args);\n            var rx = M.regex;\n            if (rx && rx.pattern) {\n                // RegExpLiteral as per ESTree AST spec\n                args.value = new RegExp(rx.pattern, rx.flags);\n                var raw = args.value.toString();\n                args.value.raw_source = rx.flags\n                    ? raw.substring(0, raw.length - rx.flags.length) + rx.flags\n                    : raw;\n                return new AST_RegExp(args);\n            } else if (rx) {\n                // support legacy RegExp\n                args.value = M.regex && M.raw ? M.raw : val;\n                return new AST_RegExp(args);\n            }\n            switch (typeof val) {\n              case \"string\":\n                args.value = val;\n                return new AST_String(args);\n              case \"number\":\n                args.value = val;\n                return new AST_Number(args);\n              case \"boolean\":\n                return new (val ? AST_True : AST_False)(args);\n            }\n        },\n        MetaProperty: function(M) {\n            if (M.meta.name === \"new\" && M.property.name === \"target\") {\n                return new AST_NewTarget({\n                    start: my_start_token(M),\n                    end: my_end_token(M)\n                });\n            }\n        },\n        Identifier: function(M) {\n            var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];\n            return new (  p.type == \"LabeledStatement\" ? AST_Label\n                        : p.type == \"VariableDeclarator\" && p.id === M ? (p.kind == \"const\" ? AST_SymbolConst : p.kind == \"let\" ? AST_SymbolLet : AST_SymbolVar)\n                        : /Import.*Specifier/.test(p.type) ? (p.local === M ? AST_SymbolImport : AST_SymbolImportForeign)\n                        : p.type == \"ExportSpecifier\" ? (p.local === M ? AST_SymbolExport : AST_SymbolExportForeign)\n                        : p.type == \"FunctionExpression\" ? (p.id === M ? AST_SymbolLambda : AST_SymbolFunarg)\n                        : p.type == \"FunctionDeclaration\" ? (p.id === M ? AST_SymbolDefun : AST_SymbolFunarg)\n                        : p.type == \"ArrowFunctionExpression\" ? (p.params.includes(M)) ? AST_SymbolFunarg : AST_SymbolRef\n                        : p.type == \"ClassExpression\" ? (p.id === M ? AST_SymbolClass : AST_SymbolRef)\n                        : p.type == \"Property\" ? (p.key === M && p.computed || p.value === M ? AST_SymbolRef : AST_SymbolMethod)\n                        : p.type == \"ClassDeclaration\" ? (p.id === M ? AST_SymbolDefClass : AST_SymbolRef)\n                        : p.type == \"MethodDefinition\" ? (p.computed ? AST_SymbolRef : AST_SymbolMethod)\n                        : p.type == \"CatchClause\" ? AST_SymbolCatch\n                        : p.type == \"BreakStatement\" || p.type == \"ContinueStatement\" ? AST_LabelRef\n                        : AST_SymbolRef)({\n                            start : my_start_token(M),\n                            end   : my_end_token(M),\n                            name  : M.name\n                        });\n        },\n        BigIntLiteral(M) {\n            return new AST_BigInt({\n                start : my_start_token(M),\n                end   : my_end_token(M),\n                value : M.value\n            });\n        }\n    };\n\n    MOZ_TO_ME.UpdateExpression =\n    MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M) {\n        var prefix = \"prefix\" in M ? M.prefix\n            : M.type == \"UnaryExpression\" ? true : false;\n        return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({\n            start      : my_start_token(M),\n            end        : my_end_token(M),\n            operator   : M.operator,\n            expression : from_moz(M.argument)\n        });\n    };\n\n    MOZ_TO_ME.ClassDeclaration =\n    MOZ_TO_ME.ClassExpression = function From_Moz_Class(M) {\n        return new (M.type === \"ClassDeclaration\" ? AST_DefClass : AST_ClassExpression)({\n            start    : my_start_token(M),\n            end      : my_end_token(M),\n            name     : from_moz(M.id),\n            extends  : from_moz(M.superClass),\n            properties: M.body.body.map(from_moz)\n        });\n    };\n\n    map(\"EmptyStatement\", AST_EmptyStatement);\n    map(\"BlockStatement\", AST_BlockStatement, \"body@body\");\n    map(\"IfStatement\", AST_If, \"test>condition, consequent>body, alternate>alternative\");\n    map(\"LabeledStatement\", AST_LabeledStatement, \"label>label, body>body\");\n    map(\"BreakStatement\", AST_Break, \"label>label\");\n    map(\"ContinueStatement\", AST_Continue, \"label>label\");\n    map(\"WithStatement\", AST_With, \"object>expression, body>body\");\n    map(\"SwitchStatement\", AST_Switch, \"discriminant>expression, cases@body\");\n    map(\"ReturnStatement\", AST_Return, \"argument>value\");\n    map(\"ThrowStatement\", AST_Throw, \"argument>value\");\n    map(\"WhileStatement\", AST_While, \"test>condition, body>body\");\n    map(\"DoWhileStatement\", AST_Do, \"test>condition, body>body\");\n    map(\"ForStatement\", AST_For, \"init>init, test>condition, update>step, body>body\");\n    map(\"ForInStatement\", AST_ForIn, \"left>init, right>object, body>body\");\n    map(\"ForOfStatement\", AST_ForOf, \"left>init, right>object, body>body, await=await\");\n    map(\"AwaitExpression\", AST_Await, \"argument>expression\");\n    map(\"YieldExpression\", AST_Yield, \"argument>expression, delegate=is_star\");\n    map(\"DebuggerStatement\", AST_Debugger);\n    map(\"VariableDeclarator\", AST_VarDef, \"id>name, init>value\");\n    map(\"CatchClause\", AST_Catch, \"param>argname, body%body\");\n\n    map(\"ThisExpression\", AST_This);\n    map(\"Super\", AST_Super);\n    map(\"BinaryExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"LogicalExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"AssignmentExpression\", AST_Assign, \"operator=operator, left>left, right>right\");\n    map(\"ConditionalExpression\", AST_Conditional, \"test>condition, consequent>consequent, alternate>alternative\");\n    map(\"NewExpression\", AST_New, \"callee>expression, arguments@args\");\n    map(\"CallExpression\", AST_Call, \"callee>expression, arguments@args\");\n\n    def_to_moz(AST_Toplevel, function To_Moz_Program(M) {\n        return to_moz_scope(\"Program\", M);\n    });\n\n    def_to_moz(AST_Expansion, function To_Moz_Spread(M, parent) {\n        return {\n            type: to_moz_in_destructuring() ? \"RestElement\" : \"SpreadElement\",\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_PrefixedTemplateString, function To_Moz_TaggedTemplateExpression(M) {\n        return {\n            type: \"TaggedTemplateExpression\",\n            tag: to_moz(M.prefix),\n            quasi: to_moz(M.template_string)\n        };\n    });\n\n    def_to_moz(AST_TemplateString, function To_Moz_TemplateLiteral(M) {\n        var quasis = [];\n        var expressions = [];\n        for (var i = 0; i < M.segments.length; i++) {\n            if (i % 2 !== 0) {\n                expressions.push(to_moz(M.segments[i]));\n            } else {\n                quasis.push({\n                    type: \"TemplateElement\",\n                    value: {\n                        raw: M.segments[i].raw,\n                        cooked: M.segments[i].value\n                    },\n                    tail: i === M.segments.length - 1\n                });\n            }\n        }\n        return {\n            type: \"TemplateLiteral\",\n            quasis: quasis,\n            expressions: expressions\n        };\n    });\n\n    def_to_moz(AST_Defun, function To_Moz_FunctionDeclaration(M) {\n        return {\n            type: \"FunctionDeclaration\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            generator: M.is_generator,\n            async: M.async,\n            body: to_moz_scope(\"BlockStatement\", M)\n        };\n    });\n\n    def_to_moz(AST_Function, function To_Moz_FunctionExpression(M, parent) {\n        var is_generator = parent.is_generator !== undefined ?\n            parent.is_generator : M.is_generator;\n        return {\n            type: \"FunctionExpression\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            generator: is_generator,\n            async: M.async,\n            body: to_moz_scope(\"BlockStatement\", M)\n        };\n    });\n\n    def_to_moz(AST_Arrow, function To_Moz_ArrowFunctionExpression(M) {\n        var body = M.body instanceof Array ? {\n            type: \"BlockStatement\",\n            body: M.body.map(to_moz)\n        } : to_moz(M.body);\n        return {\n            type: \"ArrowFunctionExpression\",\n            params: M.argnames.map(to_moz),\n            async: M.async,\n            body: body\n        };\n    });\n\n    def_to_moz(AST_Destructuring, function To_Moz_ObjectPattern(M) {\n        if (M.is_array) {\n            return {\n                type: \"ArrayPattern\",\n                elements: M.names.map(to_moz)\n            };\n        }\n        return {\n            type: \"ObjectPattern\",\n            properties: M.names.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Directive, function To_Moz_Directive(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: {\n                type: \"Literal\",\n                value: M.value\n            }\n        };\n    });\n\n    def_to_moz(AST_SimpleStatement, function To_Moz_ExpressionStatement(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: to_moz(M.body)\n        };\n    });\n\n    def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M) {\n        return {\n            type: \"SwitchCase\",\n            test: to_moz(M.expression),\n            consequent: M.body.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Try, function To_Moz_TryStatement(M) {\n        return {\n            type: \"TryStatement\",\n            block: to_moz_block(M),\n            handler: to_moz(M.bcatch),\n            guardedHandlers: [],\n            finalizer: to_moz(M.bfinally)\n        };\n    });\n\n    def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {\n        return {\n            type: \"CatchClause\",\n            param: to_moz(M.argname),\n            guard: null,\n            body: to_moz_block(M)\n        };\n    });\n\n    def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M) {\n        return {\n            type: \"VariableDeclaration\",\n            kind:\n                M instanceof AST_Const ? \"const\" :\n                M instanceof AST_Let ? \"let\" : \"var\",\n            declarations: M.definitions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Export, function To_Moz_ExportDeclaration(M) {\n        if (M.exported_names) {\n            if (M.exported_names[0].name.name === \"*\") {\n                return {\n                    type: \"ExportAllDeclaration\",\n                    source: to_moz(M.module_name)\n                };\n            }\n            return {\n                type: \"ExportNamedDeclaration\",\n                specifiers: M.exported_names.map(function (name_mapping) {\n                    return {\n                        type: \"ExportSpecifier\",\n                        exported: to_moz(name_mapping.foreign_name),\n                        local: to_moz(name_mapping.name)\n                    };\n                }),\n                declaration: to_moz(M.exported_definition),\n                source: to_moz(M.module_name)\n            };\n        }\n        return {\n            type: M.is_default ? \"ExportDefaultDeclaration\" : \"ExportNamedDeclaration\",\n            declaration: to_moz(M.exported_value || M.exported_definition)\n        };\n    });\n\n    def_to_moz(AST_Import, function To_Moz_ImportDeclaration(M) {\n        var specifiers = [];\n        if (M.imported_name) {\n            specifiers.push({\n                type: \"ImportDefaultSpecifier\",\n                local: to_moz(M.imported_name)\n            });\n        }\n        if (M.imported_names && M.imported_names[0].foreign_name.name === \"*\") {\n            specifiers.push({\n                type: \"ImportNamespaceSpecifier\",\n                local: to_moz(M.imported_names[0].name)\n            });\n        } else if (M.imported_names) {\n            M.imported_names.forEach(function(name_mapping) {\n                specifiers.push({\n                    type: \"ImportSpecifier\",\n                    local: to_moz(name_mapping.name),\n                    imported: to_moz(name_mapping.foreign_name)\n                });\n            });\n        }\n        return {\n            type: \"ImportDeclaration\",\n            specifiers: specifiers,\n            source: to_moz(M.module_name)\n        };\n    });\n\n    def_to_moz(AST_Sequence, function To_Moz_SequenceExpression(M) {\n        return {\n            type: \"SequenceExpression\",\n            expressions: M.expressions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M) {\n        var isComputed = M instanceof AST_Sub;\n        return {\n            type: \"MemberExpression\",\n            object: to_moz(M.expression),\n            computed: isComputed,\n            property: isComputed ? to_moz(M.property) : {type: \"Identifier\", name: M.property}\n        };\n    });\n\n    def_to_moz(AST_Unary, function To_Moz_Unary(M) {\n        return {\n            type: M.operator == \"++\" || M.operator == \"--\" ? \"UpdateExpression\" : \"UnaryExpression\",\n            operator: M.operator,\n            prefix: M instanceof AST_UnaryPrefix,\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {\n        if (M.operator == \"=\" && to_moz_in_destructuring()) {\n            return {\n                type: \"AssignmentPattern\",\n                left: to_moz(M.left),\n                right: to_moz(M.right)\n            };\n        }\n        return {\n            type: M.operator == \"&&\" || M.operator == \"||\" ? \"LogicalExpression\" : \"BinaryExpression\",\n            left: to_moz(M.left),\n            operator: M.operator,\n            right: to_moz(M.right)\n        };\n    });\n\n    def_to_moz(AST_Array, function To_Moz_ArrayExpression(M) {\n        return {\n            type: \"ArrayExpression\",\n            elements: M.elements.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Object, function To_Moz_ObjectExpression(M) {\n        return {\n            type: \"ObjectExpression\",\n            properties: M.properties.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_ObjectProperty, function To_Moz_Property(M, parent) {\n        var key = M.key instanceof AST_Node ? to_moz(M.key) : {\n            type: \"Identifier\",\n            value: M.key\n        };\n        if (typeof M.key === \"number\") {\n            key = {\n                type: \"Literal\",\n                value: Number(M.key)\n            };\n        }\n        if (typeof M.key === \"string\") {\n            key = {\n                type: \"Identifier\",\n                name: M.key\n            };\n        }\n        var kind;\n        var string_or_num = typeof M.key === \"string\" || typeof M.key === \"number\";\n        var computed = string_or_num ? false : !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef;\n        if (M instanceof AST_ObjectKeyVal) {\n            kind = \"init\";\n            computed = !string_or_num;\n        } else\n        if (M instanceof AST_ObjectGetter) {\n            kind = \"get\";\n        } else\n        if (M instanceof AST_ObjectSetter) {\n            kind = \"set\";\n        }\n        if (parent instanceof AST_Class) {\n            return {\n                type: \"MethodDefinition\",\n                computed: computed,\n                kind: kind,\n                static: M.static,\n                key: to_moz(M.key),\n                value: to_moz(M.value)\n            };\n        }\n        return {\n            type: \"Property\",\n            computed: computed,\n            kind: kind,\n            key: key,\n            value: to_moz(M.value)\n        };\n    });\n\n    def_to_moz(AST_ConciseMethod, function To_Moz_MethodDefinition(M, parent) {\n        if (parent instanceof AST_Object) {\n            return {\n                type: \"Property\",\n                computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,\n                kind: \"init\",\n                method: true,\n                shorthand: false,\n                key: to_moz(M.key),\n                value: to_moz(M.value)\n            };\n        }\n        return {\n            type: \"MethodDefinition\",\n            computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,\n            kind: M.key === \"constructor\" ? \"constructor\" : \"method\",\n            static: M.static,\n            key: to_moz(M.key),\n            value: to_moz(M.value)\n        };\n    });\n\n    def_to_moz(AST_Class, function To_Moz_Class(M) {\n        var type = M instanceof AST_ClassExpression ? \"ClassExpression\" : \"ClassDeclaration\";\n        return {\n            type: type,\n            superClass: to_moz(M.extends),\n            id: M.name ? to_moz(M.name) : null,\n            body: {\n                type: \"ClassBody\",\n                body: M.properties.map(to_moz)\n            }\n        };\n    });\n\n    def_to_moz(AST_NewTarget, function To_Moz_MetaProperty(M) {\n        return {\n            type: \"MetaProperty\",\n            meta: {\n                type: \"Identifier\",\n                name: \"new\"\n            },\n            property: {\n                type: \"Identifier\",\n                name: \"target\"\n            }\n        };\n    });\n\n    def_to_moz(AST_Symbol, function To_Moz_Identifier(M, parent) {\n        if (M instanceof AST_SymbolMethod && parent.quote) {\n            return {\n                type: \"Literal\",\n                value: M.name\n            };\n        }\n        var def = M.definition();\n        return {\n            type: \"Identifier\",\n            name: def ? def.mangled_name || def.name : M.name\n        };\n    });\n\n    def_to_moz(AST_RegExp, function To_Moz_RegExpLiteral(M) {\n        var pattern = M.value.source;\n        var flags = M.value.toString().match(/[gimuys]*$/)[0];\n        return {\n            type: \"Literal\",\n            value: new RegExp(pattern, flags),\n            raw: M.value.raw_source,\n            regex: {\n                pattern: pattern,\n                flags: flags,\n            }\n        };\n    });\n\n    def_to_moz(AST_Constant, function To_Moz_Literal(M) {\n        var value = M.value;\n        if (typeof value === \"number\" && (value < 0 || (value === 0 && 1 / value < 0))) {\n            return {\n                type: \"UnaryExpression\",\n                operator: \"-\",\n                prefix: true,\n                argument: {\n                    type: \"Literal\",\n                    value: -value,\n                    raw: M.start.raw\n                }\n            };\n        }\n        return {\n            type: \"Literal\",\n            value: value,\n            raw: M.start.raw\n        };\n    });\n\n    def_to_moz(AST_Atom, function To_Moz_Atom(M) {\n        return {\n            type: \"Identifier\",\n            name: String(M.value)\n        };\n    });\n\n    def_to_moz(AST_BigInt, M => ({\n        type: \"BigIntLiteral\",\n        value: M.value\n    }));\n\n    AST_Boolean.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Null.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Hole.DEFMETHOD(\"to_mozilla_ast\", function To_Moz_ArrayHole() { return null; });\n\n    AST_Block.DEFMETHOD(\"to_mozilla_ast\", AST_BlockStatement.prototype.to_mozilla_ast);\n    AST_Lambda.DEFMETHOD(\"to_mozilla_ast\", AST_Function.prototype.to_mozilla_ast);\n\n    /* -----[ tools ]----- */\n\n    function raw_token(moznode) {\n        if (moznode.type == \"Literal\") {\n            return moznode.raw != null ? moznode.raw : moznode.value + \"\";\n        }\n    }\n\n    function my_start_token(moznode) {\n        var loc = moznode.loc, start = loc && loc.start;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : start && start.line,\n            col     : start && start.column,\n            pos     : range ? range[0] : moznode.start,\n            endline : start && start.line,\n            endcol  : start && start.column,\n            endpos  : range ? range[0] : moznode.start,\n            raw     : raw_token(moznode),\n        });\n    }\n\n    function my_end_token(moznode) {\n        var loc = moznode.loc, end = loc && loc.end;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : end && end.line,\n            col     : end && end.column,\n            pos     : range ? range[1] : moznode.end,\n            endline : end && end.line,\n            endcol  : end && end.column,\n            endpos  : range ? range[1] : moznode.end,\n            raw     : raw_token(moznode),\n        });\n    }\n\n    function map(moztype, mytype, propmap) {\n        var moz_to_me = \"function From_Moz_\" + moztype + \"(M){\\n\";\n        moz_to_me += \"return new U2.\" + mytype.name + \"({\\n\" +\n            \"start: my_start_token(M),\\n\" +\n            \"end: my_end_token(M)\";\n\n        var me_to_moz = \"function To_Moz_\" + moztype + \"(M){\\n\";\n        me_to_moz += \"return {\\n\" +\n            \"type: \" + JSON.stringify(moztype);\n\n        if (propmap) propmap.split(/\\s*,\\s*/).forEach(function(prop) {\n            var m = /([a-z0-9$_]+)([=@>%])([a-z0-9$_]+)/i.exec(prop);\n            if (!m) throw new Error(\"Can't understand property map: \" + prop);\n            var moz = m[1], how = m[2], my = m[3];\n            moz_to_me += \",\\n\" + my + \": \";\n            me_to_moz += \",\\n\" + moz + \": \";\n            switch (how) {\n                case \"@\":\n                    moz_to_me += \"M.\" + moz + \".map(from_moz)\";\n                    me_to_moz += \"M.\" +  my + \".map(to_moz)\";\n                    break;\n                case \">\":\n                    moz_to_me += \"from_moz(M.\" + moz + \")\";\n                    me_to_moz += \"to_moz(M.\" + my + \")\";\n                    break;\n                case \"=\":\n                    moz_to_me += \"M.\" + moz;\n                    me_to_moz += \"M.\" + my;\n                    break;\n                case \"%\":\n                    moz_to_me += \"from_moz(M.\" + moz + \").body\";\n                    me_to_moz += \"to_moz_block(M)\";\n                    break;\n                default:\n                    throw new Error(\"Can't understand operator in propmap: \" + prop);\n            }\n        });\n\n        moz_to_me += \"\\n})\\n}\";\n        me_to_moz += \"\\n}\\n}\";\n\n        //moz_to_me = parse(moz_to_me).print_to_string({ beautify: true });\n        //me_to_moz = parse(me_to_moz).print_to_string({ beautify: true });\n        //console.log(moz_to_me);\n\n        moz_to_me = new Function(\"U2\", \"my_start_token\", \"my_end_token\", \"from_moz\", \"return(\" + moz_to_me + \")\")(\n            ast, my_start_token, my_end_token, from_moz\n        );\n        me_to_moz = new Function(\"to_moz\", \"to_moz_block\", \"to_moz_scope\", \"return(\" + me_to_moz + \")\")(\n            to_moz, to_moz_block, to_moz_scope\n        );\n        MOZ_TO_ME[moztype] = moz_to_me;\n        def_to_moz(mytype, me_to_moz);\n    }\n\n    var FROM_MOZ_STACK = null;\n\n    function from_moz(node) {\n        FROM_MOZ_STACK.push(node);\n        var ret = node != null ? MOZ_TO_ME[node.type](node) : null;\n        FROM_MOZ_STACK.pop();\n        return ret;\n    }\n\n    AST_Node.from_mozilla_ast = function(node) {\n        var save_stack = FROM_MOZ_STACK;\n        FROM_MOZ_STACK = [];\n        var ast = from_moz(node);\n        FROM_MOZ_STACK = save_stack;\n        return ast;\n    };\n\n    function set_moz_loc(mynode, moznode, myparent) {\n        var start = mynode.start;\n        var end = mynode.end;\n        if (start.pos != null && end.endpos != null) {\n            moznode.range = [start.pos, end.endpos];\n        }\n        if (start.line) {\n            moznode.loc = {\n                start: {line: start.line, column: start.col},\n                end: end.endline ? {line: end.endline, column: end.endcol} : null\n            };\n            if (start.file) {\n                moznode.loc.source = start.file;\n            }\n        }\n        return moznode;\n    }\n\n    function def_to_moz(mytype, handler) {\n        mytype.DEFMETHOD(\"to_mozilla_ast\", function(parent) {\n            return set_moz_loc(this, handler(this, parent));\n        });\n    }\n\n    var TO_MOZ_STACK = null;\n\n    function to_moz(node) {\n        if (TO_MOZ_STACK === null) { TO_MOZ_STACK = []; }\n        TO_MOZ_STACK.push(node);\n        var ast = node != null ? node.to_mozilla_ast(TO_MOZ_STACK[TO_MOZ_STACK.length - 2]) : null;\n        TO_MOZ_STACK.pop();\n        if (TO_MOZ_STACK.length === 0) { TO_MOZ_STACK = null; }\n        return ast;\n    }\n\n    function to_moz_in_destructuring() {\n        var i = TO_MOZ_STACK.length;\n        while (i--) {\n            if (TO_MOZ_STACK[i] instanceof AST_Destructuring) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function to_moz_block(node) {\n        return {\n            type: \"BlockStatement\",\n            body: node.body.map(to_moz)\n        };\n    }\n\n    function to_moz_scope(type, node) {\n        var body = node.body.map(to_moz);\n        if (node.body[0] instanceof AST_SimpleStatement && node.body[0].body instanceof AST_String) {\n            body.unshift(to_moz(new AST_EmptyStatement(node.body[0])));\n        }\n        return {\n            type: type,\n            body: body\n        };\n    }\n})();\n"],"names":["characters","str","split","member","name","array","includes","DefaultsError","Error","[object Object]","msg","defs","super","this","message","defaults","args","croak","ret","i","HOP","noop","return_false","return_true","return_this","return_null","MAP","a","f","backwards","top","doit","val","is_last","Last","v","AtTop","Splice","push","apply","slice","reverse","skip","Array","isArray","length","concat","at_top","splice","last","push_uniq","el","string_template","text","props","replace","p","remove","mergeSort","cmp","_ms","m","Math","floor","left","right","b","r","ai","bi","merge","makePredicate","words","Set","map_add","map","key","value","has","get","set","obj","prop","Object","prototype","hasOwnProperty","call","keep_name","keep_setting","RegExp","test","lineTerminatorEscape","\n","\r"," "," ","KEYWORDS","KEYWORDS_ATOM","RESERVED_WORDS","KEYWORDS_BEFORE_EXPRESSION","OPERATOR_CHARS","RE_NUM_LITERAL","RE_HEX_NUMBER","RE_OCT_NUMBER","RE_ES6_OCT_NUMBER","RE_BIN_NUMBER","RE_DEC_NUMBER","RE_BIG_INT","OPERATORS","WHITESPACE_CHARS","NEWLINE_CHARS","PUNC_AFTER_EXPRESSION","PUNC_BEFORE_EXPRESSION","PUNC_CHARS","UNICODE","ID_Start","ID_Continue","get_full_char","pos","char","charAt","is_surrogate_pair_head","next","is_surrogate_pair_tail","prev","code","charCodeAt","is_digit","is_identifier_start","ch","is_identifier_char","is_identifier_string","JS_Parse_Error","filename","line","col","js_error","is_token","token","type","EX_EOF","tokenizer","$TEXT","html5_comments","shebang","S","tokpos","tokline","tokcol","newline_before","regex_allowed","brace_counter","template_braces","comments_before","directives","directive_stack","peek","signal_eof","in_string","forward","looking_at","substr","find","what","indexOf","start_token","prev_was_dot","previous_token","is_comment","UNARY_POSTFIX","endline","endcol","endpos","nlb","file","raw","substring","comments_after","AST_Token","skip_whitespace","parse_error","err","read_num","prefix","has_e","after_e","has_x","has_dot","is_big_int","num","pred","read_while","next_token","has_directive","endsWith","valid","parseInt","parseFloat","parse_js_number","isNaN","read_escaped_char","strict_hex","template_string","String","fromCharCode","hex_bytes","result","strict_octal","read_octal_escape_sequence","n","digit","read_string","with_eof_error","quote","tok","read_template_characters","begin","content","end","tmp","pop","skip_line_comment","find_eol","skip_multiline_comment","surrogates","get_full_char_length","read_name","escaped","read_escaped_identifier_char","read_regexp","source","prev_backslash","in_class","mods","regexp","raw_source","e","read_operator","grow","op","bigger","handle_slash","eof_error","cont","x","ex","force_regexp","word","context","nc","add_directive","directive","undefined","push_directives_stack","pop_directives_stack","UNARY_PREFIX","ASSIGNMENT","PRECEDENCE","j","ATOMIC_START_TOKEN","parse","options","bare_returns","ecma","expression","module","strict","toplevel","input","peeked","in_function","in_async","in_generator","in_directives","in_loop","labels","is","ctx","token_error","unexpected","expect_token","expect","punc","has_newline_before","every","comment","can_insert_semicolon","is_in_generator","is_in_async","semicolon","optional","parenthesised","exp","embed_tokens","parser","start","expr","arguments","handle_regexp","statement","is_export_default","is_for_body","is_if_body","dir","stat","simple_statement","body","AST_String","AST_Directive","function_","AST_Defun","node","imported_name","imported_names","as_symbol","AST_SymbolImport","map_names","mod_str","AST_Import","module_name","import_","label","AST_Label","some","l","AST_IterationStatement","references","forEach","ref","AST_Continue","AST_LabeledStatement","labeled_statement","AST_BlockStatement","block_","AST_EmptyStatement","break_cont","AST_Break","AST_Debugger","condition","AST_Do","AST_While","for_await_error","await_tok","init","var_","let_","const_","is_in","is_of","AST_Definitions","definitions","is_assignable","to_destructuring","AST_Destructuring","AST_ForIn","object","for_in","is_await","lhs","AST_ForOf","await","for_of","step","AST_For","regular_for","for_","class_","AST_DefClass","cond","belse","AST_If","alternative","if_","AST_Return","AST_Switch","switch_body_","AST_Throw","bcatch","bfinally","parameter","AST_SymbolCatch","AST_Catch","argname","AST_Finally","AST_Try","try_","AST_With","is_default","exported_names","exported_value","exported_definition","AST_Export","AST_Lambda","AST_SimpleStatement","export_","ldef","AST_LabelRef","thedef","TYPE","arrow_function","argnames","is_async","_function_body","AST_Arrow","async","ctor","is_generator_property","in_statement","is_generator","AST_SymbolDefun","AST_SymbolLambda","AST_Function","AST_Accessor","AST_SymbolDeclaration","track_used_binding_identifiers","is_parameter","parameters","duplicate","default_assignment","spread","strict_mode","tracker","add_parameter","check_strict","add","mark_default_assignment","mark_spread","mark_strict_mode","is_strict","used_parameters","symbol_type","param","expand","binding_element","AST_DefaultAssign","operator","AST_Expansion","expand_token","elements","first","is_expand","first_token","AST_SymbolFunarg","AST_Hole","names","is_array","AST_ObjectKeyVal","property_token","property","as_property_name","block","generator","loop","current_generator","current_async","params","_verify_symbol","cur","branch","AST_Case","AST_Default","vardefs","no_in","kind","def","sym_type","AST_SymbolVar","AST_SymbolConst","AST_SymbolLet","AST_VarDef","AST_Var","AST_Let","AST_Const","as_atom_node","_make_symbol","AST_SymbolRef","AST_Number","AST_BigInt","AST_RegExp","AST_False","AST_True","AST_Null","to_fun_args","_","__","default_seen_above","insert_default","default_value","AST_Object","properties","AST_Array","AST_Assign","expr_atom","allow_calls","allow_arrows","subscripts","AST_NewTarget","newexp","expr_list","AST_New","mark_pure","new_","exprs","maybe_sequence","spread_token","invalid_sequence","trailing_comma","params_or_seq_","AST_Call","AST_Sequence","expressions","len","unshift","comments_before_length","array_","object_or_destructuring_","func","cls","AST_ClassExpression","tagged","segments","AST_TemplateSegment","AST_TemplateString","closing","allow_trailing_comma","allow_empty","create_accessor","concise","concise_method_or_getset","AST_Node","KindOfClass","method","class_name","extends_","AST_SymbolDefClass","AST_SymbolClass","extends","is_class","get_ast","AST_SymbolMethod","is_static","AST_ConciseMethod","static","AST_ObjectGetter","AST_ObjectSetter","map_name","is_import","make_symbol","foreign_name","foreign_type","AST_SymbolImportForeign","AST_SymbolExportForeign","AST_SymbolExport","AST_NameMapping","map_nameAsterisk","AST_This","AST_Super","sym","noerror","comments","pure","AST_Dot","AST_Sub","call_args","AST_PrefixedTemplateString","maybe_unary","AST_Await","make_unary","AST_UnaryPrefix","AST_UnaryPostfix","expr_op","min_prec","prec","AST_Binary","maybe_conditional","expr_ops","yes","AST_Conditional","consequent","AST_PropAccess","AST_ObjectProperty","maybe_assign","star","has_expression","AST_Yield","is_star","_yield_expression","commas","AST_Toplevel","DEFNODE","methods","base","self_props","PROPS","proto","initialize","Function","BASE","SUBCLASSES","CTOR","SELF_PROPS","DEFMETHOD","_clone","deep","self","clone","transform","TreeTransformer","$documentation","$propdoc","_walk","visitor","_visit","walk","warn_function","warn","txt","AST_Statement","walk_body","clone_block_scope","block_scope","AST_Block","AST_StatementWithBody","TreeWalker","AST_LoopControl","AST_DWLoop","AST_Scope","variables","functions","uses_with","uses_eval","parent_scope","enclosed","cname","get_defun_scope","is_block_scope","Map","pinned","globals","wrap_commonjs","wrapped_tl","wrap_enclose","args_values","index","join","uses_arguments","args_as_names","out","all_symbols","AST_Symbol","seg","AST_Jump","AST_Exit","AST_SwitchBranch","name_import","name_export","AST_Unary","AST_Class","scope","AST_SymbolBlockDeclaration","AST_Constant","getValue","literal","AST_Atom","AST_NaN","AST_Undefined","AST_Infinity","AST_Boolean","callback","visit","stack","create","descend","getPrototypeOf","st","before","after","def_transform","tw","in_list","y","do_list","list","first_in_statement","parent","EXPECT_DIRECTIVE","CODE_LINE_BREAK","CODE_SPACE","is_some_comments","OutputStream","readonly","ascii_only","beautify","braces","ie8","indent_level","indent_start","inline_script","keep_quoted_props","max_line_len","preamble","quote_keys","quote_style","safari10","semicolons","shorthand","source_map","webkit","width","wrap_iife","comment_filter","regex_pos","lastIndexOf","indentation","current_col","current_line","current_pos","OUTPUT","printed_comments","WeakSet","to_utf8","identifier","get_full_char_code","toString","s","encode_string","dq","sq","quote_single","quote_double","make_string","mapping_token","mapping_name","has_parens","might_need_space","might_need_semicolon","might_add_newline","need_newline_indented","need_space","newline_insert","mappings","do_add_mapping","mapping","cline","ccol","ensure_line_len","delta","requireSemicolonChars","print","indent","space","half","back","repeat","with_indent","next_indent","save_indentation","newline","force_semicolon","has_nlb","current_width","should_break","comma","colon","print_name","make_name","print_string","escape_directive","encoded","print_template_string_chars","with_block","with_parens","with_square","add_mapping","option","opt","prepend_comments","shift","filter","c","last_nlb","append_comments","tail","insert","push_node","pop_node","SymbolDef","orig","eliminated","replaced","global","export","mangled_name","undeclared","id","next_id","DEFPRINT","nodetype","in_directive","active_scope","use_asm","PARENS","display_body","is_toplevel","output","allow_directives","stmt","print_braced_empty","print_braced","parenthesize_for_noin","noin","parens","print_property_name","make_num","force_statement","make_block","need_constructor_parens","match","digits","candidates","toLowerCase","exec","best","best_of","DEFMAP","stream","force_parens","_codegen","add_source_map","needs_parens","po","pp","so","sp","p1","startsWith","_do_print_body","nokeyword","arg","_do_print","tag","parenthesize_tag","is_tagged","make_then","definition","get_name","allowShortHand","_print_getter_setter","offset","MASK_EXPORT_DONT_MANGLE","MASK_EXPORT_WANT_MANGLE","next_mangled","ext","base54","reserved","unmangleable","eval","keep_fnames","keep_classnames","mangle","cache","redefined","defun","in_destructuring","for_scopes","save_scope","init_scope_vars","save_defun","save_labels","delete","def_function","mark_export","def_variable","destructuring","mark_enclosed","find_variable","reference","level","exported","def_global","refs","g","d","symbol","mangled_names","tricky_def","tricky_name","_default_mangler_options","lname","to_mangle","collect","save_nesting","avoid","to_avoid","add_def","reset","sort","find_colliding_names","rename","next_name","_print","consider","skip_string","tail_node","print_to_string","chars","frequency","leading","compare","Compressor","false_by_default","arrows","booleans","booleans_as_integers","collapse_vars","comparisons","computed_props","conditionals","dead_code","drop_console","drop_debugger","evaluate","global_defs","hoist_funs","hoist_props","hoist_vars","if_return","inline","join_vars","keep_fargs","keep_infinity","loops","negate_iife","passes","pure_getters","pure_funcs","reduce_funcs","reduce_vars","sequences","side_effects","switches","top_retain","typeofs","unsafe","unsafe_arrows","unsafe_comps","unsafe_Function","unsafe_math","unsafe_methods","unsafe_proto","unsafe_regexp","unsafe_undefined","unused","warnings","funcs","vars","sequences_limit","warnings_produced","resolve_defines","process_expression","min_count","stopping","pass","figure_out_scope","reset_opt_flags","count","info","_squeezed","was_scope","hoist_properties","hoist_declarations","optimize","drop_unused","def_optimize","optimizer","compressor","_optimized","read_property","get_value","make_node_from_constant","fixed_value","is_modified","immutable","is_lhs","is_expr_pure","contains_this","is_func_expr","is_lhs_read_only","is_immutable","is_ref_of","make_node","make_sequence","reduce","merge_sequence","isFinite","maintain_this_binding","as_statement_array","thing","is_empty","can_be_evicted_from_block","loop_body","is_iife_call","is_undeclared_ref","tt","drop_side_effect_free","def_reduce_vars","reset_def","assignments","chained","direct_access","fixed","exposed","recursive_refs","should_replace","single_use","reset_variables","safe_ids","mark","loop_ids","reset_block_variables","safe","safe_to_read","safe_to_assign","mark_escaped","depth","is_constant","is_constant_expression","lazy_op","suppressor","mark_def_node","inlined","save_ids","mark_func_expr","iife","eq","saved_loop","has_break_or_continue","recursive_ref","ref_once","_top","global_names","def_is_string","identifier_atom","is_identifier_atom","tighten_body","statements","in_try","find_parent","find_loop_scope_try","CHANGED","max_iter","eliminate_spurious_blocks","eliminate_dead_code","handle_if_return","sequencesize","sequencesize_2","join_consecutive_vars","collapse","stat_index","scanner","abort","hit","hit_stack","hit_index","handle_custom_scan_order","stop_after","find_stop","write_only","lvalues","equivalent_to","replace_all","is_declared","stop_if_hit","lhs_local","can_replace","value_def","candidate","funarg","may_modify","may_throw_on_access","may_throw","has_side_effects","side_effects_external","multi_replacer","extract_args","extract_candidates","get_lhs","get_lvalues","is_lhs_local","value_has_side_effects","replace_all_symbols","remove_candidate","has_overlapping_symbol","fn","fn_strict","found","scan_this","referenced","var_def","mangleable_var","get_rvalue","min","seen_dirs","multiple_if_returns","has_multiple_if_returns","in_lambda","next_index","ab","can_merge_flow","aborts","negate","as_statement_array_with_return","extract_functions","prev_index","lct","loopcontrol_target","is_return_void","declarations_only","has_quit","extract_declarations_from_unreachable_code","seq","push_seq","to_simple_statement","decls","cons_seq","alt","join_object_assignments","defn","trimmed","diff","extract_object_assignments","target","remove_initializers","is_undefined","def_may_throw_on_access","_dot_throw","def_is_boolean","unary_bool","binary_bool","is_boolean","def_is_number","unary","binary","is_number","is_string","unary_side_effects","best_of_expression","ast1","ast2","convert_to_predicate","keys","def_find_defs","_find_defs","child","suffix","defines","to_node","object_fns","native_fns","Boolean","Number","static_fns","def_eval","_eval","unaryPrefix","element","non_converting_unary","non_converting_binary","pow","global_objs","static_values","aa","first_arg","static_value","static_fn","native_fn","constructor","def_negate","basic_negation","negated","global_pure_fns","def_has_side_effects","any","is_call_pure","def_may_throw","def_is_constant_expression","all_refs_local","scope_def","block_aborts","opt_AST_Lambda","drop_funcs","drop_vars","assign_as_unused","in_use_ids","fixed_ids","var_defs_by_id","initializations","destructuring_value","node_def","in_export","destructuring_cache","scan_ref_scoped","in_use","trim","__unused","unreferenced","template","drop_block","head","is_destructure","var_defs","assign","dirs","hoisted","vars_found","var_decl","to_assignments","is_lambda","varNames","var_names","_var_names","defs_by_id","make_sym","new_var","make_var_name","def_drop_side_effect_free","nodes","changed","values","pure_prop_access_globals","retain_top_func","if_break_in_loop","is_break","drop_it","rest","self_condition_length","negated_length","negated_is_best","default_branch","exact_match","decl","eliminate_branch","default_index","has_break","varDef","inline_array_like_spread","simple_args","is_func","EXIT","separator","consts","ast","fun","comp","compute_char_frequency","mangle_names","is_regular_func","can_inline","returned_value","return_value","can_flatten_body","block_scoped","variable","safe_to_inject","can_inject_vars","can_inject_args","arg_vals_outer_refs","value_walker","scope_outer_refs","size","can_inject_args_values","is_reachable","can_inject_symbols","append_var","flatten_args","lines","flatten_vars","flatten_fn","ev","trim_right_for_undefined","lift_sequences","in_boolean_context","commutativeOperators","is_atomic","reachable","find_ref","scan_scope","reversible","is_strict_comparison","combined","ll","rr","truthy","falsy","lr","associative","reversed","within_array_or_object_literal","defun_def","lambda_def","value_length","has_symbol_ref","name_length","overhead","undef","ASSIGN_OPS","ASSIGN_OPS_COMMUTATIVE","safe_to_flatten","literals_in_boolean_context","lift_key","evaluateRight","arg_index","single_arg_diff","in_bool","is_true","is_false","booleanize","OPT_ARGUMENTS","sub","flatten_object","retValue","FLATTEN","flatten","k","optimized","has_special_symbol","segment","arrow","ancestors","is_destructuring_export_decl","keep","elem","should_retain","domprops","reserve_quoted_keys","addStrings","mangle_properties","reserved_option","builtins","debug","keep_quoted","only_cache","regex","objects","global_ref","new_global","Date","Symbol","ArrayBuffer","DataView","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","EvalError","Float32Array","Float64Array","Int8Array","Int16Array","Int32Array","JSON","Promise","Proxy","RangeError","ReferenceError","Reflect","SyntaxError","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","URIError","WeakMap","getOwnPropertyNames","find_builtins","debug_name_suffix","names_to_mangle","keep_quoted_strict","declared","root","mangleStrings","can_mangle","should_mangle","mangled","debug_mangled","to_ascii","atob","b64","Buffer","from","to_base64","btoa","set_shorthand","init_cache","map_from_object","to_json","minify","files","quoted_props","timings","compress","enclose","nameCache","sourceMap","wrap","now","includeSources","url","warning","orig_line_diff","dest_line_diff","MOZ_SourceMap","SourceMapGenerator","sourceRoot","orig_map","SourceMapConsumer","sources","sourceContent","sourceContentFor","setSourceContent","gen_line","gen_col","orig_line","orig_col","originalPositionFor","column","addMapping","generated","original","stringify","toJSON","SourceMap","total","error","infer_options","normalize_directives","MOZ_TO_ME","Program","M","my_start_token","my_end_token","from_moz","ArrayPattern","elm","ObjectPattern","AssignmentPattern","Type","FROM_MOZ_STACK","SpreadElement","argument","RestElement","TemplateElement","cooked","TemplateLiteral","quasis","TaggedTemplateExpression","quasi","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","ExpressionStatement","TryStatement","handlers","handler","guardedHandlers","finalizer","Property","computed","MethodDefinition","ArrayExpression","ObjectExpression","SequenceExpression","MemberExpression","SwitchCase","VariableDeclaration","declarations","ImportDeclaration","specifiers","specifier","imported","local","ExportAllDeclaration","ExportNamedDeclaration","declaration","ExportDefaultDeclaration","Literal","rx","pattern","flags","MetaProperty","meta","Identifier","BigIntLiteral","raw_token","moznode","loc","range","moztype","mytype","propmap","moz_to_me","me_to_moz","moz","how","my","to_moz","to_moz_block","to_moz_scope","def_to_moz","UpdateExpression","UnaryExpression","ClassDeclaration","ClassExpression","superClass","to_moz_in_destructuring","guard","name_mapping","isComputed","string_or_num","to_mozilla_ast","mynode","from_mozilla_ast","save_stack","TO_MOZ_STACK","0","component"],"mappings":"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W,EAAY/f,GAC/B,QAAIA,EAAI1I,WAAWzR,UACdma,EAAIsU,UACLyL,EAAWpsB,SAASgrB,QACfoB,EAAWlC,YACJkC,EAAWlC,WAAW7d,OAz+MlD,GC3ZO,IAAIq2B,GAAW,CAClB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,SACA,aACA,YACA,SACA,oBACA,iBACA,kBACA,WACA,2BACA,2BACA,uBACA,UACA,QACA,aACA,WACA,SACA,WACA,0BACA,eACA,uBACA,mBACA,iBACA,YACA,oBACA,eACA,iBACA,qBACA,mBACA,6BACA,QACA,cACA,OACA,QACA,cACA,wBACA,eACA,uBACA,gBACA,YACA,aACA,uBACA,mBACA,yBACA,OACA,yBACA,WACA,QACA,cACA,kBACA,gBACA,iBACA,uBACA,qBACA,kBACA,gBACA,YACA,OACA,OACA,eACA,YACA,YACA,YACA,OACA,wBACA,iBACA,cACA,eACA,OACA,oBACA,UACA,WACA,iBACA,kBACA,oBACA,mBACA,OACA,YACA,UACA,kBACA,MACA,eACA,qBACA,SACA,eACA,WACA,gBACA,QACA,SACA,UACA,oBACA,mBACA,oBACA,kBACA,eACA,iBACA,gCACA,gCACA,gCACA,+BACA,6BACA,aACA,iBACA,iBACA,iBACA,qBACA,eACA,qBACA,MACA,iBACA,iBACA,mBACA,sBACA,kBACA,2BACA,kBACA,gBACA,kBACA,mBACA,eACA,qBACA,mBACA,cACA,oBACA,UACA,cACA,sBACA,eACA,gBACA,kBACA,iBACA,WACA,eACA,0BACA,mBACA,kBACA,WACA,SACA,cACA,aACA,UACA,gBACA,UACA,UACA,kBACA,wBACA,sBACA,oBACA,yBACA,uBACA,wBACA,oBACA,qBACA,uBACA,sBACA,mBACA,WACA,SACA,YACA,SACA,cACA,UACA,aACA,eACA,SACA,SACA,aACA,SACA,iBACA,kBACA,sBACA,SACA,SACA,UACA,WACA,eACA,aACA,eACA,cACA,cACA,cACA,QACA,YACA,cACA,aACA,aACA,aACA,WACA,YACA,YACA,aACA,gBACA,kBACA,iBACA,iBACA,iBACA,cACA,UACA,iBACA,SACA,WACA,WACA,SACA,YACA,iBACA,kBACA,wBACA,SACA,KACA,iBACA,gBACA,2BACA,gBACA,oBACA,sBACA,gBACA,aACA,iBACA,YACA,iBACA,aACA,WACA,eACA,UACA,mBACA,UACA,cACA,gBACA,UACA,SACA,YACA,cACA,eACA,iBACA,WACA,WACA,OACA,YACA,gBACA,mBACA,aACA,mBACA,oBACA,kBACA,oBACA,aACA,cACA,gBACA,2BACA,aACA,kBACA,iBACA,iBACA,kBACA,eACA,WACA,uBACA,SACA,yBACA,gBACA,iCACA,6BACA,iCACA,8BACA,4CACA,8BACA,qBACA,YACA,WACA,eACA,oBACA,sBACA,YACA,oBACA,YACA,WACA,mBACA,UACA,UACA,cACA,kBACA,aACA,qBACA,uBACA,gBACA,eACA,eACA,sBACA,iBACA,iBACA,kBACA,wBACA,+BACA,uBACA,4BACA,8BACA,0BACA,yBACA,0BACA,2BACA,yBACA,4BACA,wBACA,0BACA,0BACA,yBACA,4BACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,gBACA,aACA,aACA,eACA,mBACA,kBACA,YACA,cACA,WACA,mBACA,oBACA,oBACA,oBACA,WACA,gBACA,mBACA,oBACA,eACA,uBACA,6BACA,qBACA,eACA,eACA,sBACA,iBACA,iBACA,eACA,cACA,WACA,iBACA,gBACA,gBACA,gBACA,sBACA,cACA,WACA,cACA,aACA,eACA,gBACA,eACA,gBACA,qBACA,iBACA,eACA,WACA,YACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,YACA,YACA,YACA,YACA,YACA,eACA,eACA,WACA,sBACA,WACA,gBACA,eACA,cACA,cACA,mBACA,cACA,sBACA,WACA,gBACA,WACA,eACA,WACA,cACA,eACA,WACA,cACA,kBACA,mBACA,WACA,cACA,oBACA,kBACA,WACA,oBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,kBACA,WACA,eACA,iBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,mBACA,mBACA,oBACA,kBACA,sBACA,4BACA,oBACA,WACA,aACA,kBACA,gBACA,mBACA,iBACA,eACA,iBACA,gBACA,cACA,cACA,cACA,eACA,qBACA,oBACA,oBACA,WACA,uBACA,eACA,WACA,cACA,gBACA,eACA,WACA,qBACA,gBACA,mBACA,mBACA,eACA,eACA,eACA,eACA,kBACA,WACA,aACA,eACA,WACA,oBACA,cACA,iBACA,YACA,WACA,qBACA,qBACA,mBACA,WACA,aACA,gBACA,oBACA,uBACA,sBACA,sBACA,sBACA,yBACA,uBACA,sBACA,uBACA,sBACA,wBACA,0BACA,yBACA,4BACA,yBACA,4BACA,sBACA,qBACA,qBACA,qBACA,uBACA,wBACA,WACA,6BACA,iCACA,kCACA,kCACA,8BACA,mCACA,4BACA,2BACA,2BACA,4BACA,2BACA,2BACA,mCACA,kCACA,6BACA,6BACA,6BACA,2BACA,qBACA,qBACA,6BACA,wBACA,qBACA,0BACA,qBACA,kCACA,2BACA,yBACA,mBACA,sBACA,0BACA,gCACA,qBACA,oBACA,4BACA,wBACA,0BACA,oBACA,sBACA,sBACA,yBACA,0BACA,wBACA,wBACA,2BACA,8BACA,qBACA,mBACA,sBACA,0BACA,wBACA,0BACA,0BACA,wBACA,oCACA,kCACA,iCACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,yBACA,yBACA,yBACA,yBACA,yBACA,yBACA,2BACA,wBACA,qBACA,6BACA,uBACA,wBACA,qBACA,wBACA,wBACA,0BACA,oCACA,kCACA,sBACA,4BACA,yBACA,oBACA,qBACA,4BACA,qBACA,yBACA,uBACA,sBACA,sBACA,yBACA,2BACA,0BACA,oBACA,wBACA,uBACA,sBACA,4BACA,6BACA,0BACA,+BACA,4BACA,4BACA,qBACA,6BACA,6BACA,4BACA,0BACA,uBACA,qBACA,qBACA,sBACA,6BACA,wBACA,sBACA,qBACA,yBACA,wBACA,wBACA,0BACA,yBACA,qBACA,sBACA,yBACA,2BACA,uBACA,wBACA,wBACA,wBACA,oBACA,4BACA,sBACA,qBACA,wBACA,wBACA,6BACA,qBACA,qBACA,oBACA,qBACA,uBACA,wBACA,yBACA,WACA,WACA,cACA,OACA,YACA,cACA,WACA,YACA,YACA,eACA,cACA,eACA,mBACA,uBACA,WACA,OACA,iBACA,YACA,sBACA,4BACA,mBACA,oBACA,yBACA,uBACA,gBACA,2BACA,WACA,mBACA,eACA,YACA,yBACA,IACA,uBACA,+BACA,eACA,QACA,eACA,QACA,aACA,eACA,cACA,wBACA,UACA,QACA,aACA,QACA,uBACA,UACA,eACA,SACA,kBACA,QACA,aACA,YACA,QACA,iBACA,cACA,cACA,WACA,UACA,UACA,gBACA,mBACA,gBACA,cACA,iBACA,0BACA,QACA,aACA,aACA,aACA,aACA,aACA,aACA,QACA,iBACA,2BACA,kBACA,sCACA,cACA,qCACA,qCACA,+CACA,uCACA,sBACA,uBACA,oCACA,oCACA,4CACA,0BACA,QACA,iBACA,aACA,WACA,wBACA,gBACA,OACA,YACA,OACA,YACA,WACA,aACA,aACA,eACA,eACA,aACA,WACA,WACA,WACA,uBACA,SACA,UACA,aACA,WACA,UACA,gBACA,eACA,eACA,oBACA,mBACA,mBACA,gBACA,eACA,mBACA,SACA,wBACA,WACA,YACA,aACA,WACA,aACA,kBACA,OACA,oBACA,oBACA,oBACA,kBACA,mBACA,gBACA,kBACA,sBACA,wBACA,kBACA,oBACA,oBACA,iBACA,qBACA,qBACA,mBACA,kBACA,sBACA,qBACA,oBACA,uBACA,iBACA,eACA,cACA,mBACA,sBACA,kBACA,6BACA,kBACA,mBACA,sBACA,gBACA,kBACA,qBACA,kBACA,oBACA,mBACA,mBACA,qBACA,oBACA,gBACA,mBACA,oBACA,kBACA,iBACA,qBACA,mBACA,kBACA,sBACA,kBACA,mBACA,iBACA,mBACA,oBACA,sBACA,oBACA,wBACA,oBACA,uBACA,mBACA,qBACA,iBACA,sBACA,2BACA,mBACA,oBACA,oBACA,oBACA,oBACA,kBACA,mBACA,0BACA,uBACA,sBACA,mBACA,sBACA,0BACA,sBACA,sBACA,kBACA,mBACA,mBACA,mBACA,qBACA,mBACA,kBACA,UACA,UACA,eACA,aACA,gBACA,gBACA,aACA,gBACA,cACA,YACA,qBACA,cACA,uBACA,aACA,gBACA,iBACA,WACA,cACA,iBACA,iBACA,mBACA,aACA,iBACA,wBACA,OACA,mCACA,iCACA,cACA,OACA,YACA,iBACA,MACA,WACA,WACA,WACA,sBACA,qBACA,wBACA,eACA,yBACA,gCACA,2BACA,wBACA,oBACA,oBACA,gBACA,mBACA,SACA,eACA,QACA,cACA,YACA,WACA,aACA,qBACA,iBACA,aACA,aACA,YACA,SACA,gBACA,OACA,4BACA,WACA,OACA,OACA,UACA,iBACA,gBACA,WACA,QACA,WACA,gBACA,uBACA,gCACA,uBACA,SACA,OACA,SACA,kBACA,uBACA,wBACA,QACA,YACA,aACA,aACA,cACA,OACA,OACA,MACA,SACA,UACA,SACA,QACA,UACA,WACA,YACA,UACA,cACA,iBACA,YACA,kBACA,mBACA,WACA,mCACA,4BACA,+BACA,wBACA,mBACA,0BACA,iCACA,mBACA,YACA,sBACA,qBACA,iCACA,6BACA,oBACA,oBACA,mBACA,sBACA,oBACA,8BACA,sBACA,sBACA,8BACA,sBACA,uBACA,uBACA,aACA,eACA,aACA,YACA,mBACA,YACA,kBACA,oBACA,mBACA,eACA,YACA,YACA,YACA,WACA,YACA,UACA,qBACA,oBACA,oBACA,oBACA,sBACA,mBACA,iBACA,mBACA,qBACA,uBACA,wBACA,qBACA,yBACA,sBACA,uBACA,qBACA,uBACA,2CACA,kCACA,qCACA,iCACA,gCACA,8BACA,2BACA,6BACA,+BACA,kCACA,kCACA,iCACA,gCACA,kCACA,kCACA,gCACA,yBACA,yBACA,yBACA,iCACA,yBACA,0BACA,0BACA,MACA,OACA,kBACA,eACA,8BACA,sBACA,aACA,gBACA,gBACA,uBACA,sBACA,kBACA,oBACA,uBACA,YACA,YACA,iBACA,sBACA,gBACA,cACA,cACA,kCACA,6BACA,mBACA,mBACA,wBACA,iBACA,eACA,cACA,UACA,WACA,gBACA,aACA,mBACA,eACA,oBACA,wBACA,uBACA,uBACA,6BACA,mBACA,wBACA,6BACA,gBACA,wBACA,aACA,wBACA,eACA,oBACA,oBACA,oBACA,iBACA,sBACA,uBACA,iBACA,sBACA,sBACA,sBACA,qBACA,cACA,kBACA,aACA,qBACA,eACA,aACA,eACA,qBACA,sBACA,iBACA,gBACA,eACA,gBACA,qBACA,qBACA,qBACA,iBACA,aACA,wBACA,eACA,yBACA,0BACA,0BACA,aACA,iBACA,eACA,iBACA,cACA,gBACA,yBACA,sBACA,YACA,mBACA,6BACA,8BACA,0BACA,2BACA,gBACA,kBACA,iBACA,uBACA,kBACA,mBACA,cACA,gBACA,iBACA,aACA,mBACA,yBACA,wBACA,yBACA,oBACA,eACA,qBACA,oBACA,gBACA,qBACA,wBACA,wBACA,8BACA,eACA,eACA,gBACA,gBACA,oBACA,kBACA,gBACA,mBACA,iBACA,gBACA,iBACA,UACA,wBACA,yBACA,oBACA,gBACA,cACA,eACA,iBACA,kBACA,oBACA,QACA,MACA,OACA,oBACA,SACA,aACA,cACA,wBACA,cACA,OACA,oBACA,gBACA,QACA,WACA,kBACA,gBACA,mBACA,oBACA,sBACA,SACA,WACA,8BACA,cACA,iCACA,MACA,eACA,YACA,cACA,qBACA,OACA,aACA,eACA,WACA,WACA,eACA,mBACA,SACA,eACA,WACA,MACA,2BACA,2BACA,sBACA,sBACA,sBACA,sBACA,OACA,SACA,UACA,6BACA,6BACA,gBACA,SACA,8BACA,sBACA,sBACA,SACA,iBACA,gBACA,iBACA,YACA,YACA,kBACA,kBACA,oBACA,4BACA,4BACA,mCACA,mCACA,gCACA,gCACA,uCACA,uCACA,qBACA,gCACA,gCACA,qBACA,8BACA,8BACA,qBACA,qBACA,kBACA,kBACA,UACA,oBACA,aACA,KACA,gBACA,SACA,wBACA,sBACA,uBACA,uBACA,oBACA,OACA,oBACA,8BACA,kBACA,sBACA,eACA,mBACA,aACA,SACA,cACA,mBACA,kBACA,qBACA,wBACA,4BACA,oBACA,eACA,SACA,cACA,gBACA,oBACA,wBACA,gBACA,UACA,mBACA,QACA,cACA,mBACA,IACA,YACA,qBACA,iBACA,YACA,gBACA,aACA,WACA,UACA,eACA,0BACA,uBACA,yBACA,0BACA,0BACA,sBACA,+BACA,wBACA,4BACA,qBACA,WACA,yCACA,wBACA,8BACA,yCACA,8BACA,2BACA,SACA,UACA,MACA,SACA,UACA,OACA,QACA,WACA,qBACA,4BACA,sBACA,kBACA,4BACA,iBACA,eACA,wBACA,iBACA,gBACA,QACA,aACA,iBACA,mBACA,OACA,iBACA,SACA,UACA,WACA,aACA,eACA,UACA,2BACA,iBACA,kBACA,yBACA,wBACA,WACA,kBACA,cACA,eACA,mBACA,iBACA,aACA,YACA,eACA,eACA,SACA,gBACA,iBACA,uBACA,mBACA,kBACA,cACA,2BACA,aACA,QACA,UACA,WACA,iBACA,qBACA,eACA,gBACA,yBACA,qBACA,eACA,cACA,wBACA,gBACA,8BACA,YACA,OACA,aACA,eACA,UACA,QACA,SACA,YACA,qBACA,YACA,eACA,iBACA,cACA,qBACA,oBACA,oBACA,+BACA,+BACA,mBACA,0BACA,yBACA,eACA,qBACA,sBACA,eACA,eACA,gBACA,iBACA,0BACA,0BACA,cACA,eACA,qBACA,oBACA,cACA,cACA,aACA,gBACA,gBACA,cACA,wBACA,qBACA,yBACA,WACA,yBACA,oBACA,0BACA,6BACA,mBACA,qBACA,yBACA,qBACA,oBACA,wBACA,oBACA,wBACA,iCACA,kBACA,oBACA,2BACA,sBACA,mBACA,qBACA,WACA,sCACA,mBACA,iBACA,iBACA,oBACA,cACA,aACA,qBACA,yBACA,oBACA,eACA,oBACA,0BACA,gCACA,wBACA,6BACA,8BACA,8BACA,2BACA,yBACA,oBACA,oBACA,oBACA,oBACA,oBACA,2BACA,oBACA,oBACA,wBACA,yBACA,qBACA,yBACA,+BACA,wBACA,mBACA,yBACA,mBACA,iBACA,qBACA,2BACA,yBACA,wBACA,wBACA,0BACA,cACA,qBACA,kBACA,qBACA,qBACA,qBACA,kBACA,kBACA,YACA,gBACA,iBACA,2BACA,kBACA,mBACA,iBACA,YACA,qBACA,yBACA,YACA,gBACA,WACA,iBACA,aACA,mBACA,mBACA,sBACA,4BACA,4BACA,kCACA,kCACA,gCACA,gCACA,sCACA,sCACA,sBACA,gCACA,gCACA,sBACA,8BACA,8BACA,iBACA,sBACA,sBACA,oBACA,WACA,eACA,oBACA,qBACA,yBACA,2BACA,UACA,iBACA,qBACA,gBACA,mBACA,gBACA,iBACA,gBACA,kBACA,mBACA,mBACA,iBACA,kBACA,wBACA,iBACA,qBACA,4BACA,kBACA,eACA,mBACA,eACA,gBACA,kBACA,iBACA,cACA,gBACA,eACA,oBACA,qBACA,oBACA,wBACA,4BACA,gBACA,gBACA,gBACA,gBACA,sBACA,6BACA,yBACA,kCACA,wBACA,yBACA,oBACA,uBACA,oBACA,yBACA,8BACA,+BACA,0BACA,8BACA,6BACA,8BACA,uBACA,2BACA,8BACA,4BACA,0BACA,2BACA,8BACA,0BACA,8BACA,2BACA,mCACA,0CACA,gCACA,kCACA,iCACA,wCACA,qCACA,wCACA,sCACA,qCACA,uCACA,sCACA,gCACA,8BACA,+BACA,gCACA,mCACA,+BACA,wBACA,oBACA,qBACA,qBACA,oBACA,oBACA,wBACA,oBACA,4BACA,oBACA,oBACA,yBACA,8BACA,0BACA,iCACA,0BACA,yBACA,4BACA,qBACA,yBACA,4BACA,uBACA,wBACA,0BACA,iCACA,gCACA,kCACA,6BACA,qBACA,yBACA,kCACA,wBACA,oBACA,iCACA,yBACA,6BACA,sCACA,+BACA,kCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,uBACA,2BACA,0BACA,2BACA,0BACA,wBACA,yBACA,uBACA,uBACA,sBACA,sBACA,sBACA,0BACA,wBACA,mCACA,iCACA,8BACA,kCACA,wBACA,+BACA,qBACA,yBACA,yBACA,yBACA,aACA,aACA,SACA,oBACA,SACA,sBACA,kBACA,+BACA,YACA,gBACA,yBACA,4BACA,qBACA,MACA,aACA,eACA,qBACA,uBACA,2BACA,gBACA,UACA,eACA,SACA,aACA,iBACA,eACA,SACA,cACA,YACA,4BACA,8BACA,8BACA,4BACA,6BACA,+BACA,UACA,WACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,YACA,WACA,WACA,WACA,WACA,WACA,WACA,aACA,qBACA,2BACA,mBACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,qBACA,6BACA,qBACA,iBACA,iBACA,YACA,UACA,cACA,gBACA,2BACA,WACA,YACA,eACA,iBACA,oBACA,WACA,oBACA,gBACA,cACA,gBACA,OACA,cACA,cACA,YACA,cACA,YACA,eACA,mBACA,gBACA,YACA,aACA,QACA,aACA,YACA,aACA,kBACA,aACA,YACA,UACA,WACA,cACA,eACA,0BACA,wBACA,+BACA,+BACA,mBACA,qCACA,sBACA,iCACA,oBACA,SACA,gBACA,eACA,iBACA,yBACA,yBACA,uBACA,6BACA,cACA,WACA,MACA,kBACA,eACA,mBACA,MACA,cACA,cACA,aACA,oBACA,qBACA,+BACA,qBACA,kBACA,iBACA,iBACA,SACA,UACA,iBACA,cACA,qCACA,oCACA,8BACA,iCACA,8BACA,2BACA,6BACA,2BACA,gBACA,WACA,gBACA,UACA,WACA,gBACA,SACA,YACA,gBACA,mBACA,qBACA,wBACA,uBACA,qBACA,qBACA,iBACA,UACA,UACA,kBACA,cACA,oBACA,mBACA,eACA,oBACA,wBACA,cACA,6BACA,eACA,uBACA,mBACA,uBACA,oBACA,sBACA,uBACA,wBACA,yBACA,kBACA,sBACA,0BACA,gBACA,gBACA,sBACA,6BACA,wBACA,kBACA,oBACA,yBACA,kBACA,wCACA,cACA,mBACA,qBACA,yBACA,wBACA,YACA,aACA,SACA,SACA,cACA,iBACA,4BACA,0BACA,8BACA,uBACA,gBACA,qCACA,iBACA,iBACA,kBACA,kBACA,cACA,gBACA,OACA,SACA,SACA,mBACA,mBACA,mBACA,mBACA,UACA,YACA,gBACA,IACA,QACA,OACA,QACA,MACA,WACA,eACA,+BACA,cACA,SACA,gBACA,aACA,YACA,iBACA,WACA,OACA,QACA,SACA,YACA,SACA,aACA,gBACA,sBACA,oBACA,gBACA,MACA,cACA,eACA,eACA,SACA,aACA,mBACA,YACA,gBACA,aACA,kBACA,YACA,cACA,WACA,cACA,UACA,aACA,WACA,YACA,UACA,kBACA,kBACA,YACA,eACA,WACA,sBACA,aACA,iBACA,kBACA,SACA,YACA,MACA,UACA,QACA,YACA,QACA,gBACA,cACA,aACA,eACA,aACA,YACA,oBACA,aACA,MACA,kBACA,oBACA,QACA,MACA,cACA,UACA,SACA,UACA,WACA,mBACA,YACA,kBACA,SACA,aACA,eACA,UACA,QACA,UACA,UACA,uBACA,gCACA,sBACA,iBACA,YACA,kBACA,sBACA,qBACA,sBACA,4BACA,iBACA,uBACA,4BACA,iBACA,qBACA,oBACA,oBACA,0BACA,gBACA,qBACA,qBACA,0BACA,mBACA,cACA,MACA,cACA,kBACA,UACA,mBACA,aACA,SACA,eACA,cACA,aACA,aACA,eACA,cACA,aACA,eACA,kBACA,oBACA,UACA,mBACA,QACA,eACA,MACA,QACA,UACA,QACA,YACA,cACA,OACA,QACA,SACA,SACA,QACA,QACA,OACA,QACA,QACA,OACA,cACA,eACA,eACA,cACA,SACA,aACA,WACA,kBACA,gBACA,qBACA,oBACA,aACA,cACA,gBACA,aACA,iBACA,eACA,cACA,YACA,WACA,cACA,YACA,WACA,aACA,eACA,YACA,WACA,OACA,OACA,UACA,IACA,OACA,sBACA,qBACA,aACA,wBACA,wBACA,kBACA,mBACA,mBACA,oBACA,sBACA,oBACA,kBACA,uBACA,sBACA,iBACA,kBACA,kBACA,mBACA,qBACA,sBACA,sBACA,mBACA,iBACA,WACA,UACA,iBACA,iBACA,WACA,aACA,UACA,UACA,gBACA,UACA,OACA,eACA,iBACA,YACA,WACA,iBACA,eACA,eACA,OACA,gBACA,UACA,eACA,OACA,MACA,aACA,OACA,qBACA,aACA,kBACA,mBACA,cACA,aACA,gBACA,wBACA,YACA,oBACA,QACA,OACA,iBACA,OACA,OACA,OACA,WACA,OACA,YACA,eACA,SACA,gBACA,sBACA,4BACA,6BACA,sBACA,sBACA,kBACA,eACA,eACA,sBACA,sBACA,qBACA,sBACA,qBACA,cACA,oBACA,oBACA,oBACA,gBACA,eACA,qBACA,qBACA,qBACA,iBACA,eACA,aACA,mBACA,yBACA,0BACA,mBACA,mBACA,eACA,eACA,oBACA,yBACA,0BACA,oBACA,oBACA,iBACA,cACA,kBACA,mBACA,cACA,oBACA,oBACA,mBACA,oBACA,mBACA,aACA,kBACA,kBACA,kBACA,eACA,cACA,mBACA,mBACA,mBACA,gBACA,cACA,YACA,iBACA,sBACA,uBACA,iBACA,iBACA,cACA,SACA,eACA,QACA,gBACA,qBACA,iBACA,eACA,cACA,gBACA,SACA,uBACA,aACA,aACA,qBACA,YACA,YACA,aACA,cACA,cACA,kBACA,OACA,UACA,SACA,aACA,cACA,aACA,gBACA,WACA,iBACA,UACA,cACA,SACA,WACA,UACA,aACA,aACA,IACA,OACA,SACA,iBACA,eACA,cACA,kBACA,cACA,cACA,SACA,uBACA,eACA,wBACA,aACA,YACA,SACA,UACA,eACA,cACA,gBACA,oBACA,yBACA,sBACA,OACA,QACA,WACA,OACA,KACA,OACA,YACA,cACA,cACA,QACA,KACA,QACA,QACA,YACA,iBACA,UACA,eACA,mBACA,wBACA,OACA,SACA,WACA,aACA,YACA,eACA,gBACA,wBACA,WACA,eACA,UACA,iBACA,yBACA,oBACA,gBACA,UACA,oBACA,YACA,aACA,WACA,SACA,aACA,OACA,YACA,YACA,UACA,QACA,kBACA,aACA,YACA,aACA,iBACA,gBACA,aACA,gBACA,kBACA,YACA,uBACA,cACA,eACA,eACA,aACA,QACA,aACA,eACA,oBACA,aACA,aACA,cACA,YACA,cACA,UACA,UACA,OACA,YACA,YACA,aACA,WACA,WACA,gBACA,YACA,WACA,UACA,gBACA,QACA,gBACA,YACA,aACA,QACA,YACA,SACA,UACA,MACA,QACA,MACA,OACA,WACA,cACA,WACA,UACA,WACA,gBACA,kBACA,YACA,UACA,QACA,QACA,sBACA,8BACA,aACA,qBACA,4BACA,YACA,YACA,OACA,cACA,aACA,YACA,eACA,aACA,kBACA,kBACA,kBACA,aACA,cACA,UACA,UACA,oBACA,0BACA,UACA,wBACA,0BACA,mBACA,cACA,eACA,aACA,aACA,UACA,gBACA,WACA,qBACA,uBACA,yBACA,uBACA,0BACA,SACA,gBACA,iBACA,iBACA,gBACA,UACA,qBACA,uCACA,kCACA,UACA,aACA,eACA,YACA,aACA,kBACA,UACA,cACA,qBACA,cACA,YACA,WACA,eACA,UACA,kBACA,kBACA,kBACA,oBACA,mBACA,cACA,gBACA,UACA,cACA,cACA,WACA,aACA,UACA,aACA,WACA,0BACA,SACA,gBACA,SACA,kBACA,iBACA,oBACA,gBACA,aACA,uBACA,0BACA,MACA,OACA,QACA,oBACA,gBACA,mBACA,eACA,WACA,kBACA,SACA,iBACA,eACA,kBACA,oBACA,qBACA,eACA,qBACA,qBACA,sBACA,gBACA,sBACA,wBACA,gBACA,2BACA,qBACA,kBACA,mBACA,oBACA,cACA,kBACA,iBACA,yBACA,qBACA,2BACA,gBACA,kBACA,wBACA,cACA,oBACA,mBACA,oBACA,iBACA,aACA,iBACA,qBACA,oBACA,kBACA,cACA,uBACA,uBACA,2BACA,kBACA,+BACA,0BACA,oBACA,mBACA,qBACA,qBACA,oBACA,kBACA,cACA,mBACA,eACA,gBACA,qBACA,cACA,8BACA,gBACA,uBACA,cACA,wBACA,qBACA,iBACA,kBACA,kBACA,kBACA,yBACA,yBACA,4BACA,kCACA,kCACA,wCACA,wCACA,sCACA,sCACA,4CACA,4CACA,4BACA,sCACA,sCACA,4BACA,oCACA,oCACA,4BACA,4BACA,iBACA,gBACA,qBACA,+BACA,wBACA,gBACA,eACA,mBACA,qBACA,mBACA,cACA,cACA,cACA,iBACA,kBACA,gBACA,cACA,kBACA,mBACA,mBACA,eACA,cACA,SACA,MACA,WACA,WACA,UACA,eACA,UACA,WACA,OACA,WACA,cACA,cACA,eACA,gBACA,aACA,eACA,eACA,gBACA,cACA,mBACA,cACA,SACA,QACA,cACA,KACA,KACA,IACA,OACA,UACA,eACA,eACA,UACA,eACA,WACA,UACA,WACA,KACA,QACA,kBACA,UACA,SACA,kBACA,eACA,YACA,qBACA,UACA,UACA,iBACA,iBACA,eACA,sBACA,mBACA,kBACA,gBACA,aACA,eACA,cACA,gBACA,QACA,sBACA,sBACA,mBACA,iBACA,YACA,SACA,eACA,gBACA,aACA,iBACA,aACA,iBACA,oBACA,qBACA,cACA,eACA,oBACA,gBACA,qBACA,YACA,aACA,eACA,cACA,cACA,gBACA,uBACA,WACA,eACA,iBACA,oBACA,QACA,YACA,SACA,SACA,SACA,YACA,YACA,aACA,aACA,YACA,cACA,cACA,aACA,cACA,iBACA,SACA,cACA,eACA,SACA,SACA,mBACA,aACA,aACA,kBACA,SACA,aACA,MACA,UACA,YACA,SACA,UACA,2BACA,WACA,kBACA,aACA,gBACA,UACA,gBACA,UACA,SACA,WACA,WACA,aACA,WACA,UACA,WACA,kBACA,eACA,cACA,UACA,oBACA,cACA,cACA,cACA,2BACA,6BACA,iBACA,aACA,SACA,kBACA,oBACA,oBACA,mBACA,OACA,gBACA,WACA,WACA,YACA,aACA,2BACA,sBACA,eACA,6BACA,oBACA,YACA,oBACA,sBACA,sBACA,qBACA,aACA,qBACA,WACA,OACA,YACA,WACA,SACA,QACA,KACA,KACA,SACA,IACA,WACA,gBACA,cACA,mBACA,WACA,YACA,UACA,QACA,SACA,QACA,cACA,aACA,SACA,mBACA,0BACA,0BACA,UACA,gBACA,SACA,YACA,qBACA,WACA,UACA,UACA,MACA,eACA,aACA,eACA,cACA,YACA,UACA,QACA,WACA,WACA,UACA,YACA,YACA,oBACA,QACA,YACA,SACA,OACA,WACA,QACA,aACA,QACA,YACA,OACA,cACA,sBACA,aACA,iBACA,kBACA,MACA,SACA,yBACA,UACA,YACA,aACA,yBACA,QACA,WACA,+BACA,YACA,SACA,aACA,aACA,eACA,WACA,4BACA,kBACA,cACA,IACA,OACA,eACA,WACA,aACA,0BACA,WACA,QACA,QACA,aACA,UACA,UACA,kBACA,aACA,mBACA,WACA,WACA,kBACA,WACA,QACA,OACA,eACA,YACA,cACA,WACA,WACA,YACA,WACA,SACA,aACA,aACA,cACA,UACA,UACA,OACA,YACA,WACA,WACA,SACA,YACA,aACA,oBACA,YACA,QACA,OACA,aACA,iBACA,YACA,YACA,cACA,YACA,YACA,gBACA,WACA,WACA,aACA,WACA,QACA,QACA,QACA,cACA,gBACA,aACA,eACA,QACA,QACA,QACA,YACA,cACA,OACA,cACA,wBACA,eACA,yBACA,YACA,mBACA,eACA,aACA,iBACA,eACA,0BACA,oBACA,0BACA,yBACA,uBACA,wBACA,cACA,aACA,sBACA,cACA,uBACA,WACA,iBACA,uBACA,cACA,YACA,gBACA,cACA,wBACA,kBACA,uBACA,uBACA,qBACA,sBACA,aACA,YACA,QACA,WACA,MACA,UACA,cACA,OACA,aACA,cACA,aACA,iBACA,aACA,SACA,gBACA,QACA,UACA,KACA,QACA,cACA,eACA,eACA,0BACA,uBACA,SACA,YACA,SACA,YACA,oBACA,OACA,eACA,gBACA,cACA,YACA,SACA,aACA,oBACA,oBACA,KACA,KACA,OACA,UACA,QACA,iBACA,cACA,iBACA,kBACA,cACA,gBACA,MACA,kBACA,mBACA,kBACA,SACA,wBACA,YACA,cACA,qBACA,oBACA,eACA,iBACA,mBACA,qBACA,iBACA,UACA,aACA,UACA,cACA,wBACA,qBACA,uBACA,wBACA,sBACA,SACA,+BACA,iBACA,uBACA,gBACA,iBACA,6BACA,mBACA,wBACA,mBACA,aACA,uBACA,kBACA,eACA,aACA,qBACA,iBACA,UACA,mBACA,UACA,SACA,0BACA,gCACA,sBACA,cACA,iBACA,yBACA,oBACA,uBACA,yBACA,mBACA,uBACA,aACA,mBACA,mBACA,WACA,eACA,kBACA,aACA,UACA,aACA,aACA,wBACA,yBACA,gBACA,oCACA,uBACA,cACA,cACA,WACA,eACA,WACA,WACA,UACA,sBACA,UACA,WACA,SACA,cACA,kBACA,WACA,qBACA,cACA,cACA,kBACA,aACA,mBACA,WACA,eACA,iBACA,cACA,mBACA,mCACA,mBACA,2BACA,sBACA,wBACA,eACA,qBACA,mBACA,gBACA,uBACA,2BACA,oBACA,oBACA,sBACA,sBACA,sBACA,uBACA,mBACA,iBACA,mBACA,kBACA,aACA,eACA,eACA,kBACA,mBACA,2BACA,oBACA,UACA,oBACA,iBACA,eACA,aACA,eACA,aACA,mBACA,qBACA,2BACA,kBACA,oBACA,eACA,aACA,2BACA,yBACA,eACA,WACA,oBACA,gBACA,iBACA,qBACA,kBACA,yBACA,kBACA,UACA,oBACA,iBACA,eACA,YACA,wBACA,aACA,YACA,iBACA,cACA,qBACA,gBACA,cACA,gBACA,YACA,YACA,WACA,aACA,qBACA,eACA,YACA,aACA,mBACA,kBACA,wBACA,0BACA,iBACA,mBACA,UACA,YACA,SACA,cACA,2BACA,6BACA,2BACA,WACA,KACA,oBACA,gBACA,WACA,QACA,QACA,iBACA,WACA,sBACA,MACA,eACA,iBACA,gBACA,gBACA,iBACA,eACA,aACA,WACA,YACA,iBACA,OACA,OACA,UACA,UACA,SACA,SACA,OACA,YACA,OACA,OACA,UACA,kBACA,kBACA,qBACA,OACA,WACA,OACA,WACA,SACA,wBACA,UACA,WACA,YACA,cACA,QACA,QACA,qBACA,oBACA,OACA,KACA,aACA,WACA,YACA,aACA,oBACA,kBACA,mBACA,iBACA,SACA,WACA,UACA,iBACA,YACA,aACA,mBACA,UACA,OACA,OACA,MACA,MACA,kCACA,UACA,WACA,cACA,gBACA,QACA,aACA,UACA,YACA,sBACA,sBACA,OACA,OACA,qBACA,sBACA,qBACA,iBACA,mBACA,uBACA,kBACA,WACA,wBACA,6BACA,gBACA,iBACA,YACA,iBACA,mBACA,sBACA,eACA,oBACA,0BACA,mBACA,iBACA,uBACA,sBACA,oBACA,mBACA,oBACA,gBACA,0BACA,mBACA,oBACA,oBACA,sBACA,yBACA,mBACA,gBACA,gBACA,iBACA,sBACA,cACA,2BACA,4BACA,uBACA,iBACA,cACA,aACA,gBACA,QACA,YACA,cACA,YACA,aACA,QACA,cACA,gBACA,cACA,wBACA,qBACA,qBACA,eACA,aACA,aACA,mBACA,aACA,YACA,aACA,eACA,YACA,iBACA,iBACA,iBACA,WACA,uBACA,UACA,aACA,KACA,OACA,cACA,UACA,6BACA,WACA,2BACA,SACA,cACA,cACA,oBACA,6BACA,gBACA,qBACA,aACA,YACA,UACA,cACA,eACA,WACA,gBACA,WACA,cACA,OACA,aACA,YACA,QACA,cACA,QACA,SACA,gBACA,gBACA,iBACA,kBACA,kBACA,YACA,YACA,qBACA,8BACA,gBACA,iBACA,gBACA,aACA,WACA,WACA,cACA,aACA,YACA,YACA,kBACA,SACA,YACA,UACA,OACA,SACA,WACA,UACA,YACA,WACA,YACA,cACA,WACA,cACA,WACA,OACA,OACA,kBACA,iBACA,KACA,KACA,KACA,KACA,eACA,oBACA,oBACA,UACA,MACA,UACA,SACA,gBACA,kBACA,cACA,UACA,YACA,UACA,WACA,OACA,UACA,OACA,OACA,QACA,SACA,OACA,WACA,YACA,eACA,YACA,mBACA,cACA,YACA,cACA,YACA,qBACA,kBACA,eACA,mBACA,WACA,YACA,YACA,oBACA,WACA,SACA,SACA,aACA,aACA,iBACA,iBACA,iBACA,iBACA,SACA,OACA,cACA,aACA,SACA,eACA,mBACA,iBACA,gBACA,QACA,iBACA,gBACA,oBACA,OACA,cACA,YACA,YACA,UACA,iBACA,aACA,WACA,aACA,SACA,YACA,0BACA,SACA,OACA,YACA,cACA,QACA,OACA,aACA,mBACA,sBACA,kBACA,YACA,iBACA,oBACA,gBACA,WACA,OACA,eACA,iBACA,YACA,SACA,mBACA,YACA,eACA,SACA,gBACA,WACA,cACA,OACA,aACA,MACA,QACA,QACA,OACA,cACA,cACA,WACA,YACA,qBACA,eACA,OACA,UACA,YACA,UACA,MACA,QACA,aACA,YACA,SACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,WACA,MACA,UACA,SACA,gBACA,cACA,eACA,aACA,eACA,eACA,aACA,cACA,YACA,cACA,OACA,SACA,aACA,aACA,gBACA,eACA,YACA,eACA,YACA,eACA,cACA,cACA,cACA,QACA,OACA,YACA,mBACA,WACA,YACA,QACA,aACA,cACA,UACA,SACA,kBACA,MACA,aACA,YACA,kBACA,kBACA,0BACA,cACA,cACA,YACA,YACA,iBACA,WACA,WACA,UACA,cACA,QACA,oBACA,eACA,eACA,aACA,YACA,YACA,cACA,SACA,UACA,kBACA,UACA,eACA,kBACA,UACA,SACA,WACA,YACA,MACA,aACA,YACA,cACA,YACA,WACA,WACA,aACA,iBACA,eACA,OACA,SACA,QACA,OACA,SACA,UACA,YACA,gBACA,gBACA,iBACA,cACA,WACA,UACA,YACA,SACA,iBACA,oBACA,cACA,SACA,wBACA,UACA,UACA,mBACA,sBACA,qBACA,0BACA,sBACA,iCACA,mBACA,6BACA,iBACA,aACA,cACA,sBACA,sBACA,6BACA,YACA,UACA,gBACA,mBACA,qBACA,cACA,iBACA,gBACA,gBACA,uBACA,uBACA,YACA,gBACA,eACA,eACA,iBACA,kBACA,cACA,aACA,YACA,2BACA,eACA,kBACA,kBACA,iBACA,iBACA,UACA,eACA,WACA,YACA,qBACA,qBACA,eACA,eACA,YACA,iBACA,gBACA,mBACA,kBACA,SACA,wBACA,qBACA,oBACA,cACA,mBACA,qBACA,uBACA,2BACA,YACA,2BACA,uBACA,wBACA,eACA,qBACA,gBACA,eACA,YACA,eACA,eACA,aACA,uBACA,mBACA,qBACA,cACA,mBACA,uBACA,sBACA,sBACA,4BACA,kBACA,uBACA,uBACA,4BACA,uBACA,qBACA,6BACA,YACA,mBACA,gCACA,uBACA,mBACA,UACA,wBACA,sBACA,qBACA,wBACA,wBACA,oBACA,0BACA,wBACA,mBACA,eACA,WACA,eACA,sBACA,qBACA,mBACA,iBACA,aACA,eACA,SACA,cACA,kBACA,aACA,kBACA,iBACA,iBACA,cACA,aACA,iBACA,sBACA,aACA,aACA,aACA,wBACA,sBACA,sBACA,oBACA,qBACA,2BACA,wBACA,eACA,oBACA,mBACA,gBACA,YACA,iBACA,gBACA,aACA,WACA,uBACA,wBACA,wBACA,uBACA,YACA,0BACA,aACA,cACA,sBACA,iBACA,cACA,SACA,cACA,oBACA,6BACA,eACA,oBACA,mBACA,gBACA,kBACA,gBACA,sBACA,mBACA,6BACA,kBACA,mBACA,mBACA,0BACA,0BACA,sBACA,aACA,mBACA,mBACA,gBACA,oBACA,oBACA,oBACA,oBACA,gBACA,sBACA,sBACA,mBACA,gBACA,gBACA,sBACA,iBACA,iBACA,sBACA,0BACA,mBACA,WACA,gBACA,gBACA,gCACA,+BACA,iCACA,gCACA,cACA,oBACA,mBACA,eACA,oBACA,uBACA,uBACA,6BACA,sBACA,gCACA,eACA,oBACA,aACA,eACA,gBACA,sBACA,SACA,WACA,KACA,aACA,oBACA,YACA,WACA,WACA,eACA,cACA,QACA,IACA,OACA,WACA,YACA,iBACA,QACA,eACA,aACA,gBACA,eACA,WACA,aACA,iBACA,kBACA,YACA,OACA,yBACA,WACA,WACA,eACA,WACA,eACA,SACA,WACA,yBACA,aACA,UACA,OACA,qBACA,WACA,WACA,cACA,WACA,SACA,WACA,UACA,aACA,SACA,WACA,WACA,YACA,YACA,wBACA,eACA,YACA,OACA,cACA,UACA,SACA,MACA,aACA,SACA,mBACA,iBACA,gBACA,kBACA,cACA,mBACA,SACA,aACA,kBACA,YACA,iBACA,cACA,mBACA,UACA,KACA,qBACA,SACA,eACA,aACA,aACA,eACA,YACA,cACA,UACA,UACA,KACA,SACA,WACA,aACA,kBACA,SACA,UACA,aACA,WACA,cACA,aACA,eACA,uBACA,gBACA,aACA,iBACA,eACA,iBACA,sBACA,mBACA,eACA,cACA,qBACA,oBACA,gBACA,gBACA,wBACA,iBACA,iBACA,YACA,SACA,WACA,aACA,WACA,WACA,wBACA,wBACA,0BACA,YACA,mBACA,eACA,WACA,mBACA,uBACA,aACA,UACA,UACA,4BACA,aACA,gBACA,kBACA,SACA,cACA,QACA,kBACA,gBACA,mBACA,oBACA,aACA,eACA,gBACA,iBACA,sBACA,oBACA,0BACA,YACA,gBACA,SACA,YACA,cACA,cACA,aACA,cACA,SACA,mBACA,YACA,cACA,QACA,UACA,UACA,UACA,gBACA,SACA,iBACA,WACA,UACA,YACA,aACA,qBACA,oBACA,kBACA,eACA,iBACA,sBACA,eACA,SACA,iBACA,6BACA,aACA,UACA,YACA,YACA,aACA,UACA,mBACA,mBACA,gBACA,SACA,eACA,mBACA,YACA,cACA,gBACA,uBACA,OACA,SACA,YACA,cACA,eACA,eACA,cACA,aACA,cACA,YACA,eACA,SACA,YACA,cACA,wBACA,uBACA,yBACA,yBACA,wBACA,kBACA,uBACA,sBACA,oBACA,uBACA,iBACA,kBACA,mBACA,iBACA,wBACA,mBACA,yBACA,+BACA,cACA,wBACA,oBACA,kBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,gBACA,kCACA,qBACA,sBACA,YACA,aACA,aACA,YACA,WACA,SACA,sBACA,eACA,aACA,aACA,UACA,UACA,SACA,YACA,sBACA,kBACA,gBACA,iBACA,iBACA,sBACA,qBACA,gBACA,eACA,gBACA,cACA,aACA,aACA,mBACA,eACA,qBACA,iBACA,gBACA,UACA,WACA,cACA,gBACA,6BACA,WACA,WACA,aACA,YACA,eACA,iBACA,WACA,WACA,WACA,YACA,WACA,oBACA,gBACA,SACA,yBACA,aACA,eACA,cACA,gBACA,YACA,UACA,gBACA,SACA,YACA,kBACA,WACA,YACA,YACA,cACA,YACA,eACA,WACA,gBACA,aACA,cACA,eACA,kBACA,WACA,gBACA,kBACA,kBACA,kBACA,kBACA,iBACA,YACA,YACA,uBACA,6BACA,yBACA,iDACA,2BACA,0BACA,mBACA,mBACA,qBACA,kBACA,4BACA,4CACA,4BACA,2BACA,mCACA,wBACA,UACA,SACA,UACA,OACA,aACA,eACA,gBACA,SACA,QACA,gBACA,WACA,MACA,UACA,UACA,QACA,SACA,SACA,UACA,MACA,SACA,cACA,aACA,cACA,SACA,iBACA,UACA,QACA,YACA,cACA,YACA,aACA,UACA,gBACA,iBACA,gBACA,gBACA,eACA,gBACA,eACA,eACA,eACA,WACA,aACA,aACA,YACA,YACA,mBACA,aACA,gBACA,eACA,YACA,YACA,kBACA,gBACA,KACA,KACA,KACA,KACA,MACA,UACA,iBACA,eACA,gBACA,cACA,gBACA,cACA,eACA,aACA,OACA,mBACA,oBACA,oBACA,iBACA,kBACA,kBACA,YACA,QACA,cACA,QACA,cACA,QACA,cACA,aACA,gBACA,YACA,UACA,eACA,SACA,gBACA,aACA,aACA,mBACA,iBACA,eACA,QACA,aACA,kBACA,WACA,eACA,WACA,YACA,OACA,aACA,cACA,cACA,sBACA,WACA,UACA,sBACA,kBACA,mBACA,eACA,QACA,kBACA,cACA,SACA,UACA,cACA,aACA,YACA,cACA,cACA,qBACA,oBACA,qBACA,oBACA,QACA,OACA,QACA,cACA,aACA,cACA,YACA,aACA,cACA,WACA,yBACA,yBACA,aACA,cACA,WACA,OACA,eACA,gBACA,eACA,SACA,UACA,cACA,QACA,iBACA,6BACA,iBACA,gBACA,YACA,qBACA,cACA,SACA,YACA,YACA,YACA,gBACA,MACA,sBACA,kBACA,iBACA,OACA,QACA,QACA,QACA,YACA,YACA,UACA,WACA,SACA,WACA,WACA,gBACA,YACA,cACA,SACA,MACA,WACA,kBACA,YACA,yBACA,yBACA,SACA,UACA,gBACA,sBACA,4BACA,UACA,WACA,YACA,iBACA,oBACA,yBACA,eACA,eACA,gBACA,kBACA,oBACA,aACA,gBACA,iBACA,aACA,QACA,aACA,0BACA,UACA,oBACA,UACA,aACA,UACA,aACA,WACA,SACA,aACA,uBACA,eACA,WACA,eACA,YACA,cACA,gBACA,WACA,YACA,YACA,OACA,mBACA,YACA,MACA,eACA,mBACA,YACA,sBACA,uBACA,oBACA,wBACA,mBACA,oBACA,gBACA,mBACA,QACA,SACA,IACA,KACA,KACA,OACA,aACA,UACA,UACA,SACA,QACA,aACA,WACA,WACA,cACA,gBACA,cACA,iBACA,OACA,QACA,MACA,OACA,oBACA,qBACA,aACA,gBACA,aACA,WACA,aACA,sBACA,aACA,SACA,SACA,WACA,YACA,eACA,YACA,OACA,MACA,gBACA,cACA,gBACA,SACA,cACA,YACA,cACA,OACA,OACA,gBACA,WACA,UACA,SACA,gBACA,gBACA,WACA,UACA,WACA,yBACA,kBACA,0BACA,SACA,MACA,UACA,cACA,gBACA,UACA,iBACA,gBACA,wBACA,wBACA,WACA,SACA,iBACA,oBACA,SACA,kBACA,kBACA,oBACA,sBACA,iBACA,cACA,YACA,sBACA,eACA,eACA,aACA,iBACA,kBACA,oBACA,aACA,kBACA,iBACA,cACA,eACA,aACA,sCACA,qBACA,eACA,cACA,iBACA,yBACA,iCACA,eACA,sBACA,iBACA,gBACA,SACA,UACA,sBACA,eACA,cACA,YACA,cACA,cACA,eACA,eACA,mBACA,iBACA,wBACA,sBACA,cACA,oBACA,8BACA,oBACA,qBACA,eACA,mBACA,WACA,qBACA,mBACA,QACA,iBACA,SACA,WACA,WACA,UACA,WACA,eACA,cACA,gBACA,eACA,eACA,cACA,cACA,UACA,SACA,aACA,SACA,cACA,MACA,UACA,WACA,YACA,kBACA,WACA,QACA,eACA,cACA,gBACA,OACA,cACA,SACA,kBACA,sBACA,mBACA,uBACA,aACA,WACA,eACA,QACA,WACA,UACA,OACA,YACA,eACA,eACA,QACA,UACA,eACA,KACA,KACA,SACA,iBACA,aACA,UACA,OACA,QACA,UACA,cACA,kBACA,sBACA,YACA,SACA,UACA,QACA,YACA,SACA,SACA,mBACA,gBACA,aACA,2BACA,2BACA,YACA,UACA,UACA,UACA,SACA,kBACA,eACA,iBACA,WACA,gBACA,gBACA,cACA,eACA,iBACA,yBACA,aACA,gBACA,aACA,aACA,WACA,YACA,eACA,cACA,UACA,UACA,wBACA,sBACA,qBACA,2BACA,qBACA,0BACA,uBACA,sBACA,aACA,YACA,MACA,gBACA,SACA,OACA,SACA,YACA,uBACA,eACA,kBACA,wBACA,WACA,OACA,WACA,UACA,SACA,oBACA,aACA,qBACA,cACA,mBACA,kBACA,WACA,gBACA,kBACA,wBACA,wBACA,YACA,qBACA,eACA,iBACA,WACA,eACA,OACA,OACA,eACA,aACA,SACA,gBACA,YACA,oBACA,gBACA,YACA,iBACA,MACA,YACA,WACA,eACA,iBACA,mBACA,qBACA,mBACA,8BACA,aACA,WACA,wBACA,iBACA,oBACA,UACA,UACA,eACA,SACA,cACA,eACA,cACA,eACA,eACA,aACA,aACA,gBACA,cACA,WACA,eACA,WACA,WACA,UACA,cACA,UACA,aACA,cACA,cACA,eACA,sBACA,YACA,iBACA,eACA,kBACA,aACA,gBACA,WACA,eACA,iBACA,2BACA,mBACA,kBACA,iBACA,mCACA,WACA,eACA,kBACA,oBACA,cACA,gBACA,cACA,iBACA,cACA,sBACA,YACA,eACA,uBACA,mBACA,eACA,8BACA,YACA,WACA,aACA,oBACA,uBACA,YACA,WACA,WACA,WACA,gBACA,iBACA,kBACA,iBACA,iBACA,mBACA,kBACA,uBACA,UACA,aACA,eACA,eACA,aACA,iBACA,cACA,qBACA,gBACA,cACA,gBACA,YACA,YACA,WACA,SACA,iBACA,sBACA,cACA,cACA,aACA,UACA,cACA,eACA,MACA,eACA,aACA,cACA,gBACA,gBACA,aACA,QACA,kBACA,iBACA,QACA,QACA,WACA,YACA,OACA,WACA,YACA,kBACA,qBACA,mBACA,UACA,OACA,iBACA,MACA,kBACA,OACA,OACA,gBACA,QACA,QACA,YACA,QACA,YACA,QACA,QACA,QACA,SACA,OACA,wBACA,cACA,eACA,iBACA,OACA,OACA,SACA,eACA,gBACA,cACA,UACA,OACA,UACA,WACA,YACA,mBACA,mBACA,kBACA,QACA,eACA,aACA,SACA,QACA,YACA,eACA,OACA,MACA,aACA,YACA,SACA,SACA,UACA,SACA,QACA,kBACA,aACA,aACA,UACA,QACA,iBACA,WACA,cACA,iBACA,YACA,aACA,QACA,SACA,gBACA,aACA,YACA,gBACA,gBACA,cACA,sBACA,cACA,sBACA,YACA,oBACA,OACA,WACA,eACA,SACA,SACA,cACA,OACA,aACA,eACA,YACA,2BACA,cACA,kBACA,cACA,cACA,gBACA,qCACA,gCACA,aACA,SACA,SACA,cACA,YACA,SACA,mBACA,oBACA,iBACA,kBACA,oBACA,iBACA,eACA,kBACA,mBACA,gBACA,iBACA,mBACA,gBACA,aACA,cACA,aACA,cACA,QACA,aACA,aACA,aACA,iBACA,cACA,MACA,WACA,UACA,SACA,YACA,SACA,YACA,gBACA,SACA,UACA,SACA,WACA,UACA,MACA,WACA,eACA,mBACA,UACA,gBACA,YACA,WACA,YACA,UACA,SACA,aACA,WACA,iBACA,aACA,aACA,UACA,QACA,QACA,WACA,QACA,eACA,cACA,cACA,MACA,UACA,SACA,OACA,eACA,cACA,MACA,OACA,SACA,gBACA,gBACA,UACA,UACA,MACA,YACA,OACA,aACA,gBACA,gBACA,gBACA,OACA,aACA,cACA,kBACA,wBACA,uBACA,wBACA,cACA,gBACA,iBACA,cACA,iBACA,YACA,gBACA,aACA,gBACA,eACA,cACA,iBACA,sBACA,sBACA,qBACA,4BACA,qBACA,yBACA,sBACA,0BACA,aACA,cACA,kBACA,cACA,mBACA,aACA,eACA,gBACA,aACA,aACA,gBACA,wBACA,OACA,WACA,YACA,QACA,QACA,OACA,UACA,YACA,UACA,YACA,kBACA,SACA,QACA,UACA,SACA,YACA,eACA,YACA,gBACA,UACA,iBACA,iBACA,cACA,cACA,SACA,qBACA,iBACA,oBACA,iBACA,qBACA,oBACA,cACA,WACA,cACA,QACA,WACA,eACA,WACA,cACA,eACA,cACA,cACA,SACA,yBACA,UACA,UACA,MACA,YACA,QACA,kBACA,mBACA,cACA,UACA,QACA,QACA,cACA,eACA,YACA,mBACA,kBACA,kBACA,iBACA,kBACA,iBACA,sBACA,sBACA,aACA,mBACA,sBACA,sBACA,6BACA,kBACA,qBACA,qBACA,2BACA,YACA,gBACA,eACA,eACA,OACA,WACA,YACA,YACA,QACA,WACA,OACA,aACA,eACA,gBACA,QACA,SACA,YACA,WACA,SACA,eACA,cACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,mBACA,mBACA,mBACA,SACA,WACA,eACA,WACA,QACA,iBACA,mBACA,SACA,UACA,YACA,UACA,oBACA,cACA,aACA,2BACA,4BACA,cACA,eACA,UACA,cACA,kBACA,qBACA,UACA,YACA,SACA,iBACA,YACA,iBACA,iBACA,UACA,WACA,SACA,QACA,aACA,YACA,MACA,MACA,MACA,OACA,SACA,iBACA,SACA,aACA,YACA,YACA,eACA,WACA,kBACA,SACA,QACA,QACA,kBACA,oBACA,WACA,QACA,cACA,gBACA,gBACA,wBACA,eACA,UACA,YACA,YACA,SACA,gBACA,eACA,kBACA,oBACA,YACA,YACA,SACA,YACA,SACA,UACA,iBACA,kBACA,iBACA,kBACA,iBACA,kBACA,iBACA,kBACA,2BACA,sBACA,WACA,iBACA,gBACA,mBACA,UACA,cACA,cACA,aACA,OACA,UACA,gBACA,aACA,mBACA,WACA,kBACA,kBACA,kBACA,aACA,kBACA,UACA,aACA,QACA,SACA,OACA,SACA,IACA,OACA,OACA,WACA,QACA,gBACA,YACA,eACA,kBACA,uBACA,2BACA,0BACA,0BACA,gCACA,sBACA,2BACA,gCACA,mBACA,qBACA,8BACA,wBACA,2BACA,mBACA,6BACA,uBACA,wBACA,wBACA,yBACA,2BACA,4BACA,4BACA,yBACA,uBACA,+BACA,oBACA,0BACA,0BACA,yBACA,0BACA,yBACA,iBACA,qBACA,gBACA,wBACA,kBACA,gBACA,kBACA,6BACA,yBACA,yBACA,oCACA,6BACA,8BACA,mCACA,mCACA,yBACA,iCACA,wCACA,oCACA,6BACA,wBACA,wBACA,uBACA,uBACA,wBACA,uCACA,0BACA,0BACA,2BACA,mBACA,yBACA,mBACA,yBACA,yBACA,sBACA,oBACA,uBACA,sBACA,4BACA,qBACA,0BACA,eACA,kBACA,oBACA,yBACA,6BACA,mBACA,iBACA,oBACA,uBACA,mBACA,uBACA,8BACA,kBACA,yBACA,qBACA,aACA,uBACA,wBACA,wBACA,oBACA,sBACA,4BACA,oBACA,yBACA,0BACA,2BACA,oBACA,uBACA,uBACA,0BACA,sBACA,8BACA,0BACA,0BACA,0BACA,2BACA,kCACA,qBACA,oCACA,mBACA,iCACA,cACA,sBACA,0BACA,0BACA,+BACA,+BACA,oBACA,2BACA,yBACA,uBACA,kBACA,wBACA,mBACA,wBACA,2BACA,2BACA,iCACA,YACA,0BACA,mBACA,8BACA,wBACA,sCACA,iBACA,WACA,SACA,aACA,aACA,cACA,cACA,QACA,cACA,aACA,YACA,SACA,QACA,cACA,aACA,eACA,SACA,kBACA,aACA,eACA,YACA,YACA,cACA,WACA,OACA,UACA,QACA,UACA,cACA,IACA,KACA,KACA,mBACA,cACA,gBACA,aACA,UACA,UACA,WACA,IACA,KACA,KACA,mBACA,SACA,IACA,UACA,SACA,OACA,aACA,kBC/3KJ,SAASC,GAAoBnF,EAAK7Y,GAC9B,SAAS9a,EAAIpa,GACT8C,EAAUoyB,EAAUl1B,GAGxB+tC,EAAI9nB,KAAK,IAAIU,GAAW,SAASxT,GACzBA,aAAgBuI,IAAoBvI,EAAKlG,MACzCmN,EAAIjH,EAAK3O,KACF2O,aAAgB6Q,IAAsB7Q,EAAKlG,MAClDmN,EAAIjH,EAAK3O,IAAIxE,MACNmT,aAAgB2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"}